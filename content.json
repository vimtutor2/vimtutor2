{"meta":{"title":"vim教程网","subtitle":null,"description":"vim教程网专注于vim配置、插件、Vim命令和视频教程，提供vim中文教程、教程视频和vim使用技巧","author":"vimtutor","url":"https://vim.ink"},"pages":[],"posts":[{"title":"使用Vim的source命令辅助完成新浪微博图片迁移","slug":"vim-source-command","date":"2019-05-01T16:00:00.000Z","updated":"2019-05-04T10:12:12.709Z","comments":true,"path":"vim-source-command.html","link":"","permalink":"https://vim.ink/vim-source-command.html","excerpt":"","text":"Vim的 source 命令(缩写形式 :so)用于执行外部文件中保存的Vim命令列表(包括命令行模式下的Ex命令和普通模式下的命令)，实现批量或重复完成某种操作。 一、source命令简介:source {file} 用于从 {file} 指定的文件中读取每一行Vim Ex 命令并执行；:source! {file} 用于从 {file} 指定的文件中读取每一行 Vim 普通模式命令并执行。 注：:source {file} 会在Vim命令行模式下执行 {file} 中的命令列表，而 :source! {file} 则是在Vim普通模式下执行 {file} 中的命令列表。 二、source命令使用举例在Vim入门级配置一文中介绍的各种保存在 ~/.vimrc 文件中的配置项，其实就是通过 :source ~/.vimrc 来使得各配置项生效的。 除了将Vim配置保存在文件中以便永久生效外，还可以在文件中保存多个Vim命令，再通过 source 命令在多个目标文件中一次性执行完所有操作。 例如，由于最近新浪微博开启了防盗链检测，导致Vim教程网所有的教程图片都无法在博客文章中正常显示，不得不迫使我将所有图片迁移到新的图床 (github pages)。 完成图片迁移需要先从微博图床上下载原始图片再上传图片到新的图床上，最后再将博客源文件中的图片地址替换成新图床的地址。Vim教程网已经写了近90篇博客，如果纯手工完成下载、上传、替换的迁移流程，显然是一种非常低效率的体力劳动。 本文介绍使用Vim的source命令辅助完成新浪微博图床的图片迁移工作。 2.1 提取所有博客地址Python脚本download_sinaimg.py可提取出一篇博文中所有保存在新浪微博上的图片，例如，python download_sinaimg.py https://vim.ink/vim-color-schemes.html 会下载15个Vim配色方案的图片并保存到当前目录的 images 文件夹中。 为了获取到Vim教程网所有博文的地址，首先使用Vim打开站点地图文件 sitemap.xml 后，再在Vim的命令行模式下执行 :source get_blog_url.vim 即可从 sitemap.xml 文件中提取出所有博客文章的链接。get_blog_url.vim 文件的内容如下： 1234\" get_blog_url.vim \"v/loc/d/\\v *\\&lt;\\/?\\w+\\&gt;%s///g 关于 get_blog_url.vim 脚本中各命令的含义及功能，推荐阅读使用Vim处理文本进行详细分析。 此外，下载图片的Python脚本内容如下： 1234567891011121314151617181920212223242526272829303132# -*- coding: UTF-8 -*-# author: https://vim.inkimport osimport refrom sys import argvimport urllibdef getHtml(url): page = urllib.urlopen(url) return page.read()def getImg(html): reg = r'src=\"([.*\\S]*\\.sinaimg.[.*\\S]*)\"' imgre = re.compile(reg); return re.findall(imgre, html)def downloadFile(url): html = getHtml(url).decode('UTF-8') imgList = getImg(html) for imgPath in imgList: filename = os.path.basename(imgPath) print \"download file \\\"%s\\\" from \\\"%s\\\"\" % (filename, imgPath) try: f = open('./images/'+ filename, 'wb') f.write((urllib.urlopen(imgPath)).read()) f.close() except Exception as e: print(\"download \" imgPath + \" error\")if __name__ == '__main__': downloadFile(argv[1]) 2.2 替换图片地址为了将所有博客源文件中的 “wx1.sinaimg.cn/large”、”wx2.sinaimg.cn/large”、”wx4.sinaimg.cn/large” 等地址全部替换成 “image.vim.ink/images”，首先使用 vim source/_post/*.md 打开了hexo博客的所有markdown源文件，再通过执行 :argdo source replace_sinaimg_url.vim 对Vim参数列表中的每一个文件都执行 replace_sinaimg_url.vim 中的 Ex 命令。 “replace_sinaimg_url.vim” 文件中保存的Vim命令列表如下所示，提供的功能是：先使用Vim查找命令 / 查找到需要替换的原始串，再使用 substitute 替换命令进行全局替换。 1234\" replace_sinaimg_url.vim \"/wx[0-9].sinaimg.cn\\/large%s//image.vim.ink\\/images/gwrite 上述流程的Vim视频教程截图如下所示： 关于 Vim参数列表和 :argdo 命令的功能介绍，推荐阅读Vim参数列表args和argdo命令。 注：通过微博图床迁移来举例说明source命令的使用只是为了说明source命令的用途及可行性。在实践中，如果需要实现一系列的复杂操作，一般会通过其他脚本语言(如Python、shell等)完成。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"Vim实用技巧","slug":"Vim实用技巧","permalink":"https://vim.ink/tags/Vim实用技巧/"},{"name":"vim-global","slug":"vim-global","permalink":"https://vim.ink/tags/vim-global/"},{"name":"vim-source-command","slug":"vim-source-command","permalink":"https://vim.ink/tags/vim-source-command/"},{"name":"Vim-substitute","slug":"Vim-substitute","permalink":"https://vim.ink/tags/Vim-substitute/"}]},{"title":"Vim插件推荐-Python PEP8规范自动格式化插件vim-autopep8安装和使用","slug":"vim-autopep8-plugin","date":"2019-04-25T16:00:00.000Z","updated":"2019-04-27T15:52:40.238Z","comments":true,"path":"vim-autopep8-plugin.html","link":"","permalink":"https://vim.ink/vim-autopep8-plugin.html","excerpt":"","text":"vim-autopep8是一个将Python源代码自动格式化为满足PEP8规范的Vim插件，是个人觉得打造Vim-Python集成开发环境过程中需要用到的一个。 1. vim-autopep8的安装方法vim-autopep8插件依赖于Python工具autopep8，所以在使用vim-autopep8插件前必须先安装autopep8。 可以通过pip安装autopep8：sudo pip install --upgrade autopep8 安装完autopep8后，可以直接使用Vim插件管理器Vundle或vim-plug安装vim-autopep8。下图展示了使用Vundle安装vim-autopep8的过程。 2. vim-autopep8的使用和命令安装完vim-autopep8插件后，在Vim命令行模式下执行 :Autopep8 命令便可使用vim-autopep8插件对当前Python文件中的代码进行基于PEP8规范的格式化操作。 下面的Vim视频教程截图展示了通过vim-autopep8进行代码格式化的操作过程。从按 u 撤销格式化结果和 &lt;Ctrl-r&gt; 恢复格式化结果的前后可以看出，vim-autopep8插件具备非常高效且实用的代码格式化能力。 除了使用 :Autopep8 命令外，还可以使用 :Autopep8 --range 11 13 或 :call Autopep8(&quot; --range 11 13&quot;) 在指定的文件范围内 (如11-13行) 对代码进行格式化操作。 此外，最新的vim-autopep8插件已经默认取消了在 F8 键上的按键映射，可以在 ~/.vimrc 中增加以下Vim按键映射配置来设置 F8 快键键调用vim-autopep8插件：autocmd FileType python noremap &lt;buffer&gt; &lt;F8&gt; :call Autopep8()&lt;CR&gt;。 更多关于vim-autopep8插件的个性化设置，推荐阅读官方文档说明vim-autopep8 1.1.0 documentation。`","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Python-Vim插件","slug":"Python-Vim插件","permalink":"https://vim.ink/tags/Python-Vim插件/"},{"name":"vim代码格式化","slug":"vim代码格式化","permalink":"https://vim.ink/tags/vim代码格式化/"},{"name":"vim-autopep8","slug":"vim-autopep8","permalink":"https://vim.ink/tags/vim-autopep8/"},{"name":"Vim-Python","slug":"Vim-Python","permalink":"https://vim.ink/tags/Vim-Python/"}]},{"title":"Vim入门教程-14种退出Vim的方法及区别","slug":"vim-write-quit","date":"2019-04-15T16:00:00.000Z","updated":"2019-04-27T15:35:46.185Z","comments":true,"path":"vim-write-quit.html","link":"","permalink":"https://vim.ink/vim-write-quit.html","excerpt":"","text":"Vim是一种区分编辑模式的编辑器，如何退出Vim是新手最需了解的功能，也是StackOverflow上关于Vim相关话题中问得最多的问题。关于Vim编辑模式的内容，推荐阅读三种Vim操作模式。 本文总结了几种常用的退出Vim的方法，并对比了各种方法的不同。 1、普通模式下退出Vim普通模式是Vim使用过程中用得最多的模式，也是打开Vim后进入的默认模式。Vim提供在插入模式下了不需进行模式切换而直接退出Vim的高效率方法。 ZZ：退出Vim；如果文件被修改，则先保存文件再退出。(等价于 :x 命令，是程序员们最应该使用的退出命令) ZQ：强制退出Vim，不保存任何修改。(等价于 :q! 命令) 2、命令行模式下退出Vim命令行模式下退出Vim是最常见的方式，主要场景包括直接退出Vim和保存文件后再退出Vim。常用的命令包括： 2.1 退出Vim :q 或 :quit：退出当前Vim窗口，如果是最后一个窗口则退出Vim。 :conf q 或 :confirm quit：退出当前Vim窗口，如果当前窗口有修改，则给出提示进行选择。 :q! 或 :quit!：强制退出当前Vim窗口，即使当前缓冲区发生了修改也不保存。 :cq 或 :cquit：在任何情形下都直接退出Vim而不保存文件，并返回一个错误代码。 :qa 或 :qall：退出所有Vim窗口，除非存在修改过的缓冲区。 :conf qa 或 :confirm qall：退出所有打开的Vim窗口；如果存在修改过的缓冲区，则给出提示进行选择。 :qa! 或 :qall!：强制退出所有打开的Vim窗口，不保存任何修改的内容。 2.2 保存文件并退出Vim :wq：保存当前文件并退出Vim。如果文件只读或者该缓冲区无名，写回操作将失败。 :wq test.txt：保存当前Vim缓冲区中的内容到文件 test.txt 中并退出Vim。 :[range]wq test.txt：保存当前Vim缓冲区中由range界定的内容到文件 test.txt 中并退出Vim。 :[range]x test.txt：功能和 :[range]wq test.txt 类似， 但只有文件有修改时写入才会实际进行保存。 :wqa 或 :wqall 或 :xa 或 :xall：保存所有修改过的缓冲区并退出Vim。 :x 和 :w 命令的更多区别，可以参考Vim保存文件。 关于Vim保存文件，推荐阅读Vim打开和保存文件的方法。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim命令","slug":"Vim命令","permalink":"https://vim.ink/tags/Vim命令/"},{"name":"退出Vim","slug":"退出Vim","permalink":"https://vim.ink/tags/退出Vim/"},{"name":"quit-vim","slug":"quit-vim","permalink":"https://vim.ink/tags/quit-vim/"},{"name":"Vim保存文件","slug":"Vim保存文件","permalink":"https://vim.ink/tags/Vim保存文件/"},{"name":"Vim-ZZ","slug":"Vim-ZZ","permalink":"https://vim.ink/tags/Vim-ZZ/"},{"name":"VIM-ZQ","slug":"VIM-ZQ","permalink":"https://vim.ink/tags/VIM-ZQ/"}]},{"title":"Vim入门教程-命令行窗口(cmdwin)","slug":"vim-cmdwin","date":"2019-04-13T16:00:00.000Z","updated":"2019-04-27T15:35:46.001Z","comments":true,"path":"vim-cmdwin.html","link":"","permalink":"https://vim.ink/vim-cmdwin.html","excerpt":"","text":":q 命令是Vim中使用非常频繁的命令，用于退出当前Vim窗口。 不知道在使用 :q 命令尝试退出Vim的时候，有没有遇到因为错误输成了 q: 导致并没有退出Vim，而是在窗口下方打开了一个新窗口的情况。 通过 q: 命令打开的窗口是Vim命令行窗口 (:h cmdwin)。Vim命令行窗口中的每行内容都对应一条在Vim命令行模式下执行过的Vim历史命令，可以通过设置 history 选项指定要保存的列表命令个数，例如，使用 :set history=20 设置保留最近执行的20条Vim命令行命令。 1. 打开Vim命令行窗口除了在普通模式下可以使用 q: 打开Vim命令行窗口外，还可以在命令行模式下使用组合键 &lt;Ctrl-f&gt; 切换到命令行窗口中。下表总结了打开命令行窗口的几种方式： 命令 动作 q/ 打开查找命令历史的命令行窗口 q: 打开 Ex 命令历史的命令行窗口 &lt;Ctrl-f&gt; 从命令行模式切换到命令行窗口 假设正在Vim命令行模式下构建一条Ex命令，输入到一半时才意识到需要更强大的编辑能力来辅助完成命令的编写，这时该怎么办呢？ 当处于命令行模式下时，可以直接用 &lt;Ctrl-f&gt; 命令切换到命令行窗口中，且已经在Vim命令行上输入的内容会直接在打开的命令行窗口进行显示。 2. Vim命令行窗口操作Vim命令行窗口除了保存的内容是Vim历史命令列表外，其他操作与一个常规的Vim缓冲区并无不同。可以在Vim命令行窗口中用 k、j 在历史Vim命令列表中向上或向下移动，也可以用Vim的查找功能查找某一行，可以在高亮选区上操作，还可以在命令行窗口中切换到插入模式对历史命令进行编辑，甚至还能对命令行窗口中的内容执行 Ex 命令。 在Vim命令行窗口中按下回车键时将会把当前行的内容当成 Ex 命令在Vim命令行模式中执行。 注：在命令行窗口内按回车键 Enter 时，命令行窗口中光标所在行命令将在活动窗口的上下文中执行。所谓活动窗口指的是在打开命令窗口前处于活动状态的那个窗口。当命令行窗口处于打开状态时，Vim并不会提示哪个窗口是活动窗口，如果使用了Vim屏幕分割打开了多个缓冲区，一定要特别谨慎。 3. 退出命令行窗口命令行窗口处于打开状态时会始终拥有焦点，除非主动关闭命令行窗口，否则无法使用常规的 &lt;Ctrl-w&gt;w 等命令切换到其他窗口。 与关闭普通Vim窗口一样，关闭命令行窗口可以执行 :q 命令。(按回车键执行当前行命令也会自动退出Vim命令行窗口) 4. Vim命令行窗口操作实例假设正在写一个简单的 Python 脚本，每做出一个修改时，几乎都会依次执行以下两条命令：:w (保存文件)、:!python % (执行当前文件)。 在执行了几次这两条命令后发现把这两条命令合为一条后，下次可以从命令历史中选择该完整命令并再次执行，从而简化工作流程。 上面的Vim教程截图描述的操作为：先在 w 命令行执行 A | 追加一个空格和 | 后按 Esc 退出到普通模式，再执行 J 合并连续两行后获得需要的命令 w | !python % 直接按回车键执行该命令。此后，Vim的历史命令列表中便存在该条命令了，需要的时候直接直接即可。 注：关于 :!python % 命令的详细解释，推荐阅读Vim执行shell命令及使用Vim批量更改文件名。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-cmdwin","slug":"Vim-cmdwin","permalink":"https://vim.ink/tags/Vim-cmdwin/"},{"name":"命令行窗口","slug":"命令行窗口","permalink":"https://vim.ink/tags/命令行窗口/"},{"name":"Vim命令历史","slug":"Vim命令历史","permalink":"https://vim.ink/tags/Vim命令历史/"},{"name":"Ex命令","slug":"Ex命令","permalink":"https://vim.ink/tags/Ex命令/"}]},{"title":"Vim实用技巧-插入模式实用技巧","slug":"vim-insert-mode-tips","date":"2019-04-12T16:00:00.000Z","updated":"2019-04-27T15:36:41.666Z","comments":true,"path":"vim-insert-mode-tips.html","link":"","permalink":"https://vim.ink/vim-insert-mode-tips.html","excerpt":"","text":"Vim作为一种流行的编辑器，在插入模式下编辑文本是其提供的最基本功能。本文介绍几种Vim插入模式下用于减少按键、提高效率的小技巧。 1. 插入模式下如何删除字符在Vim插入模式下，除了可以使用退格键(Backspace)删除光标前的字符外，还可以使用组合键 &lt;Ctrl-h&gt; 来删除光标前一个字符； 此外，插入模式下还可以使用组合键 &lt;Ctrl-w&gt; 来删除光标前一个单词，使用组合键 &lt;Ctrl-u&gt; 删除至当前行行首。 注：上述的3个组合键并不是Vim插入模式所独有，在Vim的命令行模式以及bash shell中，均可以使用它们完成相同的删除功能。 2. 插入-普通模式Vim插入模式只用于输入文字，这是编辑器最基本的功能；而Vim普通模式却是使用Vim时最常用的模式。 在日常场景中，经常出现在插入模式下想运行一个普通模式命令后再返回到插入模式继续编辑的场景，Vim为此提供了一种非常巧妙的方式来减少模式切换所带来的不畅及代价，这就是：Vim插入-普通模式。在该模式下，可以不退出插入模式而直接执行一个普通模式命令。 插入模式下使用组合键 &lt;Ctrl-o&gt; 便可进入插入-普通模式。 例如，当编辑的当前行处于Vim窗口顶部时，为了看到已经编写完的上一个段落的内容，可以使用 &lt;Ctrl-o&gt;zz 命令，使得Vim自动从插入模式切换到普通模式并执行命令 zz 重绘屏幕，将当前行显示在窗口的正中间。 上述的整个过程中，并不需要人为地使用 Esc 退出到普通模式后执行下 zz 命令，再使用 a 命令继续进入到插入模式进行编辑，极大地提高了工作效率。关于Vim提供工作效率的技巧，推荐阅读Vim中的重复操作与高效率。 3. 不离开插入模式粘贴寄存器中的文本在插入模式下，使用 &lt;Ctrl-r&gt;{register} 可以将Vim寄存器 register 中的内容插入到当前光标下。 例如，假设Vim的复制专用寄存器0中保存的内容为 https://vim.ink，在Vim插入模式下，可以使用命令 &lt;Ctrl-r&gt;0 把复制的文本https://vim.ink粘贴到光标所在位置。 4. 插入模式下做计算在插入模式下，输入组合键 &lt;Ctrl-r&gt;= 将使用Vim的表达式寄存器，在屏幕下方显示的提示符后，可以输入要执行的表达式并按下回车键，Vim就会把输入表达式对应的执行结果插入到光标的当前位置下。 假设在插入模式下刚输入完以下内容： 1Vim教程网平均每天的pv为1100，按每个月31天计算，Vim教程网一个月的总pv为 插入模式下直接执行命令 &lt;Ctrl-r&gt;=1100*30 便可将总pv数输入到当前光标位置处。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/tags/Vim技巧/"},{"name":"Vim插入模式","slug":"Vim插入模式","permalink":"https://vim.ink/tags/Vim插入模式/"},{"name":"插入-普通模式","slug":"插入-普通模式","permalink":"https://vim.ink/tags/插入-普通模式/"},{"name":"Vim表达式寄存器","slug":"Vim表达式寄存器","permalink":"https://vim.ink/tags/Vim表达式寄存器/"}]},{"title":"Vim插件推荐-Python自动补齐Vim插件jedi-vim的安装与使用方法","slug":"jedi-vim-plugin","date":"2019-04-01T16:00:00.000Z","updated":"2019-04-27T15:36:41.571Z","comments":true,"path":"jedi-vim-plugin.html","link":"","permalink":"https://vim.ink/jedi-vim-plugin.html","excerpt":"","text":"jedi是一个用于Python自动补齐和静态分析的开源库。jedi-vim是jedi作者开源的一个基于jedi库实现的Vim插件，提供了Vim下Python代码优秀的自动补全能力，在github上拥有近4k的star。 Vim教程网介绍的YouCompleteMe插件实际上也是使用jedi-vim来实现Python代码自动补全。 依赖于Jedi库，jedi-vim插件几乎支持了Python的所有语法特性，官方文档上列出的jedi-vim功能包括： Builtins Multiple returns or yields Tuple assignments/array indexing/dictionary indexing with-statement/exception handling *args and **kwargs Decorators, lambdas, closures Generators, iterators Some descriptors: property/staticmethod/classmethod Some magic methods: __call__, __iter__, __next__, __get__,__getitem__, __init__ list.append(), set.add(), list.extend(), etc. (Nested) list comprehensions and ternary expressions Relative imports getattr()/__getattr__/__getattribute__ Function annotations (py3k feature, are being ignored at the moment, but areparsed) Class decorators (py3k feature, are being ignored at the moment, but areparsed) Simple/usual sys.path modifications isinstance checks for if/while/assert case, that doesn’t work withJedi And more… 除了Python代码自动补齐，jedi-vim插件还能实时展示对应函数的文档(Pydoc)，可以说是一个功能非常强大的Vim插件。 一、jedi-vim安装1.1 jedi-vim安装依赖首先，jedi-vim插件需要当前Vim版本支持python，在终端输入 vim --version 可查看当前 Vim 的版本和编译信息。如下图可知，当前Vim并不支持 python2或python3，因此需要重新编译和安装。源码编译安装Vim的方法可参考vim源码编译安装方法。 其次，jedi-vim插件依赖python开源库jedi，可以使用pip安装：pip install jedi，也可以从github下载源码安装。 此外，jedi-vim作者建议Vim版本不应该低于7.3，因为7.3以上版本的Vim提供了conceal功能，这是jedi-vim插件的”函数形参自动补齐(function parameter completion)”功能所必需的。 1.2 jedi-vim安装方法有多种方法安装jedi-vim插件，推荐使用Vim插件管理器vundle或(vim-plug)[https://vim.ink/vim-plug.html]安装。 如果采用从github下载源码的方式进行安装，执行下面的命令下载源代码后将下载的文件夹复制到 ~/.vim 即可完成安装。 12git clone http://github.com/davidhalter/jedi-vim path/to/bundles/jedi-vimgit clone --recursive http://github.com/davidhalter/jedi-vim 如果使用vundle安装jedi-vim，只需在配置文件 ~/.vimrc 中的适当位置增加 Plugin &#39;davidhalter/jedi-vim&#39; 后再在Vim的命令行模式下执行 :PluginInstall 即可完成安装。 如果使用vim-plug安装jedi-vim，只需在配置文件 ~/.vimrc 中的适当位置增加 Plug &#39;davidhalter/jedi-vim&#39; 后再在Vim的命令行模式下执行 PlugInstall 即可。 二、jedi-vim插件使用方法默认设置下，插入模式下按 &lt;Ctrl-Space&gt; 会触发jedi-vim的自动补齐，输入 . 时也会自动触发自动补齐提醒。 可以使用 let g:jedi#completions_command = &quot;&lt;C-N&gt;&quot; 设置 &lt;Ctrl-n&gt;(同时按下Ctrl和n键) 组合键用于触发jedi-vim的自动补齐功能。 除此之外，jedi-vim插件常用的功能还包括： Goto assignments: &lt;leader&gt;g (typical goto function) 跳转到定义： &lt;leader&gt;d 显示Python文档(Pydoc)： K 重命名：&lt;leader&gt;r 展示某个变量的使用方法：&lt;leader&gt;n (shows all the usages of a name) 打开某个模块：:Pyimport os (打开 os 模块) 注：&lt;leader&gt; 表示Vim的leader键，默认为 \\。 推荐阅读jedi-vim官方文档获取更多相关介绍：https://github.com/davidhalter/jedi-vim/blob/master/doc/jedi-vim.txt。","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"jedi-vim","slug":"jedi-vim","permalink":"https://vim.ink/tags/jedi-vim/"},{"name":"vim-python插件","slug":"vim-python插件","permalink":"https://vim.ink/tags/vim-python插件/"},{"name":"python-vim","slug":"python-vim","permalink":"https://vim.ink/tags/python-vim/"},{"name":"Vim自动补全","slug":"Vim自动补全","permalink":"https://vim.ink/tags/Vim自动补全/"}]},{"title":"Vim插件推荐-Python缩进指示Vim插件indentLine安装和使用","slug":"vim-indentLine-plugin","date":"2019-03-20T16:00:00.000Z","updated":"2019-04-27T15:35:46.091Z","comments":true,"path":"vim-indentLine-plugin.html","link":"","permalink":"https://vim.ink/vim-indentLine-plugin.html","excerpt":"","text":"indentLine是一款Vim下用于显示缩进指示线的插件。对于Python、Golang等靠代码缩进来标识代码块的语言来说，indentLine提供的缩进指示功能非常有用。 一、indentLine插件安装很显然，indentLine插件虽然在Vim打开的文件中显示出了缩进指示线，但这些指示线并不会(也不能)真正保存在文件中。indentLine 插件在 Vim 界面中显示出来的缩进指示线，使用了 Vim 提供的 conceal 功能。 由于indentLine插件依赖于 Vim7.3 版本中引入的隐藏(conceal)功能，所以低于 7.3 版本的 Vim 或编译时未开启 conceal 功能的 Vim 均无法使用 indentLine 提供的功能。 indentLine插件的安装非常简单。推荐使用 Vim 插件管理器 Vundle 或 vim-plug 进行安装。 如果使用vundle安装indentLine，只需要在Vim配置文件 ~/.vimrc 中增加 Plugin &#39;Yggdroot/indentLine&#39; 并使用 :PluginInstall 进行安装即可。 如果使用vim-plug安装indentLine插件，只需要在Vim配置文件 ~/.vimrc 中增加 Plug &#39;Yggdroot/indentLine&#39; 并在Vim命令行模式执行 :PlugInstall 即可完成indentLine插件的安装。 二、indentLine的使用使用 let g:indentLine_enabled = 0 可关闭indentLine插件。 在Vim命令行模式下可以使用 :IndentLinesToggle 命令打开或者关闭显示缩进指示线。 三、自定义indentLine插件indentLine插件虽然功能比较简单，但是仍然提供了比较友好的个性化设置选项。常用的定制选项包括： 3.1 修改indentLine的隐藏行为indentLine将用以下默认值覆盖 concealcursor 选项和 conceallevel 选项的值： 12let g:indentLine_concealcursor = &apos;inc&apos;let g:indentLine_conceallevel = 2 可以根据需要自定义这两个选项，但如果 conceallevel 选项未被设置为 1 或者 2，那么indentLine插件将无法运行。 注：concealcursor 选项设置能隐藏光标所在行的文本的Vim模式， conceallevel 选项指定如何显示使用 “conceal” 语法属性 :syn-conceal 的文本。 3.2 修改indentLine缩进指示线颜色indentLine 插件默认用灰色覆盖掉当前Vim配色方案的”隐藏颜色(conceal color)”，如果需要恢复使用配色方案中的 conceal color，需要关闭 indentLine_setColors 选项：let g:indentLine_setColors = 0。 如果需要指定 indentLine 插件显示的缩进指示线的颜色，可以使用 g:indentLine_color_term 选项。例如，可以使用 let g:indentLine_color_term = 255 将 indentLine 插件在 Vim 中显示的缩进指示线颜色设置为白色。 3.3 修改indentLine缩进指示线的符号indentLine 插件默认使用 ¦ 来标识缩进，可以通过 g:indentLine_char 选项进行更改。例如，可以设置indentLine显示的缩进线为 ¦、┆、│、⎸ 或 ▏；也可以使用 let g:indentLine_char_list = [&#39;|&#39;, &#39;¦&#39;, &#39;┆&#39;, &#39;┊&#39;] 为不同的缩进层级设置不同的缩进线。","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Python-Vim插件","slug":"Python-Vim插件","permalink":"https://vim.ink/tags/Python-Vim插件/"},{"name":"vim插件","slug":"vim插件","permalink":"https://vim.ink/tags/vim插件/"},{"name":"Vim-indentLine","slug":"Vim-indentLine","permalink":"https://vim.ink/tags/Vim-indentLine/"},{"name":"Vim缩进显示","slug":"Vim缩进显示","permalink":"https://vim.ink/tags/Vim缩进显示/"},{"name":"vim-conceal","slug":"vim-conceal","permalink":"https://vim.ink/tags/vim-conceal/"}]},{"title":"将Vim打造成IDE编辑器(基础)-Vim使用技巧(19)","slug":"vim-ide-base","date":"2019-02-16T16:00:00.000Z","updated":"2019-04-27T15:36:41.658Z","comments":true,"path":"vim-ide-base.html","link":"","permalink":"https://vim.ink/vim-ide-base.html","excerpt":"","text":"根据个人的经验，一个程序员使用文本编辑器进行编程时最常用的功能主要是：语法高亮、代码自动补齐、函数跳转、工程项目树展示、全局搜索、代码折叠等。作为入门级Vim配置，本文介绍如何将Vim打造成最基础的集成开发环境(IDE,Integrated Development Environment)。 1. 语法高亮Vim 自带语法高亮显示功能，只需要打开 syntax 选项即可。可通过在 Vim 配置文件 ~/.vimrc 中增加以下配置项： 1234\" 打开文件类型检测 \"filetype on\" 打开语法高亮显示 \"syntax on Vim 的语法高亮显示依赖于 Vim 的文件类型检测功能，具体可参考Vim文件类型检测原理及应用。 2. 代码自动补齐使用 IDE 提供的代码自动补齐功能可以提高编程效率，减少输入上的错误。Vim 自带基础的自动补齐功能，推荐使用自动补齐神器：YouCompleteMe 插件。YouCompleteMe 是通过 Vim 的 omnifunc 机制来实现自动补全功能的，具体安装方法参考Vim自动补齐插件YouCompleteMe安装指南(2019年最新)。 3. 函数跳转函数跳转是使用 IDE 时最常用的功能之一，可基于 ctags 软件手工生成 tags 文件实现跳转(参考Vim使用ctags实现函数跳转)，也可以使用 Vim 插件 vim-gutentags 自动生成和更新 tags 文件进行跳转，具体安装和使用方法请参考Vim自动生成tags插件vim-gutentags安装和自动跳转方法。 此外，对于代码中引入的头文件快速打开等场景，可使用 Vim 提供的文件跳转功能，推荐阅读Vim文件间跳转。 4. 工程项目树展示IDE 最直观的一个功能就是能非常清晰地展示当前开发项目所包含的各源文件目录层次， Vim 下推荐使用 NERDTree 插件来显示文件树结构，其安装和使用方法请阅读Vim插件NERD tree介绍与使用方法。 5. 全局搜索有些时候，需要在当前工程下模糊搜索某些关键词，全局搜索功能就能在这种场景下发挥很大的作用。有多种提供模糊搜索功能的 Vim 插件，这里推荐Vim模糊搜索插件ctrlp以及Vim模糊搜索神器fzf，各位按需取用。 6. 代码折叠当某个函数中的模块逻辑比较长，而你又只想理解整个函数的功能时，往往需要对部分细节代码进行折叠。Vim 也提供了基本的代码折叠功能，只需在 ~/.vimrc 配置文件中增加以下配置项即可： 1set foldmethod=indent 详情可查考Vim代码折叠，也可以使用 Vim 插件SimpleFold来实现更加智能地折叠。 只需以上几个步骤就可以将 Vim 打造成最基础的 IDE。写完这篇文章突然发现，原来我已经把最基础的 Vim 配置介绍都写完了，不禁有一丝小小的满足感~","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim函数跳转","slug":"vim函数跳转","permalink":"https://vim.ink/tags/vim函数跳转/"},{"name":"Vim-IDE","slug":"Vim-IDE","permalink":"https://vim.ink/tags/Vim-IDE/"},{"name":"VI语法高亮","slug":"VI语法高亮","permalink":"https://vim.ink/tags/VI语法高亮/"},{"name":"vim自动补齐","slug":"vim自动补齐","permalink":"https://vim.ink/tags/vim自动补齐/"},{"name":"vim工程目录树展示","slug":"vim工程目录树展示","permalink":"https://vim.ink/tags/vim工程目录树展示/"},{"name":"Vim全局搜索","slug":"Vim全局搜索","permalink":"https://vim.ink/tags/Vim全局搜索/"},{"name":"Vim代码折叠","slug":"Vim代码折叠","permalink":"https://vim.ink/tags/Vim代码折叠/"}]},{"title":"Vim自动补齐插件YouCompleteMe安装指南(2019年最新)-Vim插件(15)","slug":"vim-youcompleteme-install","date":"2019-02-13T16:00:00.000Z","updated":"2019-04-27T15:36:41.719Z","comments":true,"path":"vim-youcompleteme-install.html","link":"","permalink":"https://vim.ink/vim-youcompleteme-install.html","excerpt":"","text":"YouCompleteMe 简称 YCM，是一款 Vim 下非常流行的自动代码补齐神器。 虽然 Vim自带自动补齐功能，但是这种自带的补齐功能其本质就是 猜：通过对文本进行正则表达式匹配，再根据字典文件和生成的tags文件实现自动补全的效果， 因此其功能相对也较为简单。YouCompleteMe 插件是一种基于语义分析的补齐：通过分析源文件，经过语法分析以后进行智能补全。 YouCompleteMe 基于 clang/llvm 等开源语法分析库进行构建，并整合了多种自动补齐引擎：an identifier-based engine that works with every programming language、a Clang-based engine that provides native semantic code completion for C/C++/Objective-C/Objective-C++/CUDA、a clangd-based experimental completion engine for the C-family languages、a Jedi-based completion engine for Python 2 and 3、an OmniSharp-based completion engine for C#、a combination of Gocode and Godef semantic engines for Go、an omnifunc-based completer that uses data from Vim’s omnicomplete system to provide semantic completions for many other languages (Ruby, PHP etc.)。由此可见，YouCompleteMe 几乎对现在所有流行的编程语言都提供了非常强大的补齐功能。 YouCompleteMe 插件无需通过按键来获取补齐列表，它会随着你的键盘输入自动列出当前可用的补齐候选项，其功能完全可以媲美 Visual Studio 提供的小番茄插件：Visual Assist。 由于 YouCompleteMe 插件依赖的库和引擎较多，所以很多 Vim 的入门级新手常常会遇到各种安装困难。本文整理了安装 Vim 自动补齐插件 YouCompleteMe 的完整流程及每个步骤的作用。 一、Vim版本支持最新 YouCompleteMe 插件需要 Vim 的版本至少是7.4.1578，并且需要支持 python2 或 python3 (Make sure you have Vim 7.4.1578 with Python 2 or Python 3 support)。 在 Linux 终端输入 vim --version 可查看当前 Vim 的版本和编译信息。如下图可知，当前 Vim 并不支持 python2或python3，因此需要重新编译和安装。 源码编译安装 Vim 的方法可参考vim8源码编译安装教程。 二、安装依赖软件和库编译 YouCompleteMe 插件时需要依赖 cmake 构建 Makefile，且依赖 Python 源码头文件，Ubuntu 系统可以使用以下命令安装相关依赖。 1sudo apt-get install build-essential cmake python-dev python3-dev clang 是一个面向 C 族语言(C-family languages)的轻量级编译器，YouCompleteMe 插件依赖 clang 实现对 C 族语言的语义补全，可以通过 sudo apt-get install clang 安装，也可以在后续编译 YouCompleteMe 时通过编译选项来自动安装。 三、下载 YouCompleteMe 源码可以使用 Vundle 或 vim-plug 等 Vim 插件管理器从 github 获取 YouCompleteMe 最新的源码，官方推荐使用 Vundle。 当然，也可以直接使用 git clone https://github.com/Valloric/YouCompleteMe.git ~/.vim/plugged/ 下载 YouCompleteMe 源码到指定目录，使用 Vim 插件管理器下载的主要目的在于方便管理多个插件。 不管使用何种方式，在下载完源码后，建议在源码目录运行 git submodule update --init --recursive 来获取 YouCompleteMe 的相关依赖 (虽然使用 vundle 或 vim-plug 安装时都会下载所有的依赖)。 下载 YoucompleteMe 插件及其依赖所需要的时间比较长，耐心等待吧~ 四、编译 YouCompleteMe经历过上述3个步骤后，YouCompleteMe 插件还没法使用，此时打开 Vim 时会看到如下的报错： The ycmd server SHUT DOWN (restart with ‘:YcmRestartServer’). YCM core library not detected; you need to compile YCM before using it. Follow the instructions in the documentation. 这是因为，YouCompleteMe 需要手工编译出库文件 ycm_core.so (以及依赖的libclang.so) 才可使用。 假设使用 vim-plug 下载的 YouCompleteMe 源码保存在目录 ~/.vim/plugged/YouCompleteMe，在该目录下执行 ./install.py --clang-completer 即可编译具有C族语言的语义补全功能的 YouCompleteMe 插件。 至此，YouCompleteMe 插件已经安装完成并可以正常使用了。 五、个性化配置 YouCompleteMeYouCompleteMe 是基于 Vim 的 omnifunc 机制来实现自动补全功能，所以需要为你想要支持的语言安装一个提供 omnifunc 接口的Vim插件。可以根据自己的需要，对 YouCompleteMe 插件进行个性化配置，包括针对特定编程语言类型进行配置。具体细节本文不做介绍，如有需要，将另开文章进行整理。","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-YouCompleteMe","slug":"Vim-YouCompleteMe","permalink":"https://vim.ink/tags/Vim-YouCompleteMe/"},{"name":"vim-ycm-install","slug":"vim-ycm-install","permalink":"https://vim.ink/tags/vim-ycm-install/"},{"name":"youcompleteme安装","slug":"youcompleteme安装","permalink":"https://vim.ink/tags/youcompleteme安装/"},{"name":"vim-youcompleteme插件","slug":"vim-youcompleteme插件","permalink":"https://vim.ink/tags/vim-youcompleteme插件/"}]},{"title":"再谈Vim substitute替换命令-Vim入门教程(54)","slug":"vim-substitute-introduce","date":"2019-01-25T16:00:00.000Z","updated":"2019-04-27T15:35:46.168Z","comments":true,"path":"vim-substitute-introduce.html","link":"","permalink":"https://vim.ink/vim-substitute-introduce.html","excerpt":"","text":"在Vim替换命令一文介绍过，substitute 命令的语法格式为：:[range]s[ubstitute]/{pattern}/{string}/[flags]。 [flags] 表示可选的标志位，常用的包括 g、c、n、e 等。其中，标志位 g 使得 substitute 命令可以修改一行内的所有匹配，而不仅仅是第一处匹配；标志位 c 可以确认或拒绝每一处修改；标志位 n 让 Vim 不执行替换操作，而只是统计和显示本次 substitute 命令匹配的个数；标志位 e 专门用于屏蔽错误提示；标志位 &amp; 用于指示 Vim 重用上一次 substitute 命令所用过的标志位。 一、Vim substitute命令的操作范围为了便于理解，可以将整个文件想象成一个二维平面，字符沿着 x 轴向右增加，而文本行则随着 y 轴向下增长。缺省情况下，substitute 命令仅仅作用于当前行，而且只会修改第一处匹配。 怎么才能将替换范围扩大到由 x 与 y 轴所围的整个平面？本文接下来以将下文中出现的所有单词 going 都替换为 rolling 为例逐步进行说明。 12When the going gets tough, the tough get going.If you are going through hell, keep going. 使用 substitute 命令，最简单的方法就是为其提供待匹配的模式 {pattern} 以及替换字符串 {string}。因此，先尝试在 Vim 命令行模式下执行命令： 1:s/going/rolling 执行完上述命令后，可以发现 Vim 已经将第一处 going 替换成了 rolling，但是文中其他匹配的内容并没有发生替换。 为了使 substitute 命令作用于整个横轴，需要使用标志位 g。 g 看似为全局 (global) 的含义，容易让人误以为 g 标志位是用于实现在整个文件范围内进行替换操作，但实际上，g 仅表示当前一整行范围。由于 Vim 直接继承自 “行编辑器 ed”，对于行编辑器而言，全局的范围就是一行，这就是 g 标志位命令的由来。 继续尝试在 Vim 命令行模式下执行命令： 1:s/going/rolling/g 执行完该命令后，发现所有出现在当前行的 going 都被替换成了 rolling 了，但除当前行外的文件其他位置，仍然有一些匹配未被修改。 如何才能控制 substitute 命令在整个文件的纵轴上执行呢？ 答案就是使用 subsititute 命令格式中的 [range] 来指定一个执行范围。如果需要在整个文件的每一行都执行替换命令，只需要在 substitute 命令的开头加上前缀 %，关于 range 的具体使用，推荐阅读Vim操作范围、文件范围介绍。 这次，尝试在 Vim 命令行模式下执行下述命令，发现确实把整个文件中的 going 单词替换成了新单词 rolling。 1:%s/going/rolling/g 总结上述的内容就是：如果想在当前文件中查找并替换部分匹配，就必须明确地指示 substitute 命令在整个 x 轴与 y 轴上执行的具体范围，即通过标志位 g 处理横轴字符的同时，使用 range 指定处理纵轴的范围。 二、手工控制每一次替换操作有些时候，在执行具体的替换操作前，可能需要先观察该处匹配再决定是否需要进行替换。 例如，在某个文件中，假设单词 going 一共出现了 10 次，出于具体语境需要，第 3 次出现的 going 并不应该被替换成 rolling，如果直接使用 :%s/going/rolling/g 则会把所有的 going 替换成 rolling，这显然不符合要求。 为了完成上述的操作目的，需要使用用标志位 c 来控制 substitute 命令的行为，需要执行的命令为： 1:%s/going/rolling/gc 增加标志位 c 后，Vim 会在替换每处匹配结果之前都提示 “替换为 rolling ?” 供操作者手工确认，可以按 y 键确认一次修改，也可以按 n 键，跳过一次修改。无论选择哪种结果，Vim 都会执行输入的决定并移动光标到下一匹配处再次进行提示。 除了可以选 y 确认，选 n 跳过以外，还可以键入 q 退出此次替换过程，使用 a 指示 Vim 替换该处及该处后所有的匹配而无需再由人工确认，也可以使用 l 指示 Vim 替换当前处匹配后直接退出替换过程。 下表总结了针对 Vim 替换提示所给出的所有答案及用途。 答案 用途 y 替换此处匹配 n 忽略此处匹配 q 退出替换过程 l 替换此处匹配后退出 (l 表示 last) a 替换此处与之后所有的匹配 (a 表示 all) &lt;Ctrl-e&gt; 向上滚动屏幕 &lt;Ctrl-y&gt; 向下滚动屏幕","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim操作范围","slug":"vim操作范围","permalink":"https://vim.ink/tags/vim操作范围/"},{"name":"Vim替换原理","slug":"Vim替换原理","permalink":"https://vim.ink/tags/Vim替换原理/"},{"name":"vi-subsititute","slug":"vi-subsititute","permalink":"https://vim.ink/tags/vi-subsititute/"},{"name":"VIM部分替换","slug":"VIM部分替换","permalink":"https://vim.ink/tags/VIM部分替换/"},{"name":"Vim替换确认","slug":"Vim替换确认","permalink":"https://vim.ink/tags/Vim替换确认/"}]},{"title":"Vim模式行及应用-Vim入门教程(53)","slug":"vim-modeline","date":"2019-01-19T16:00:00.000Z","updated":"2019-04-27T15:36:41.669Z","comments":true,"path":"vim-modeline.html","link":"","permalink":"https://vim.ink/vim-modeline.html","excerpt":"","text":"你应该在很多源代码文件中看到过类似下图红框中这种注释信息，在源文件中的注释信息中设置跟 Vim 相关的选项，这是使用了 Vim 的模式行 (modeline) 特性。 一、Vim 模式行介绍Vim 模式行是指文件中一行以特定语言的注释符 (如 #、//、/*) 开头，间隔一个空格，以 vi: 、vim: 、Vim: 等关键字触发的设置命令。该命令只对命令所在文件生效，且该行命令在文件中的位置有具体要求：需要放在文件的前 几 行或末尾最后 几 行之间。如果把 Vim 模式行命令置于超过文件首尾 几 行的范围，那么这条模式行设置是无效的！具体是 几 行，由 Vim 的 modelines 选项决定。 modelines 选项的默认值为 5，这说明默认情况下，有效的 Vim 模式行只能放置在一个文件的前面 5 行或最末尾 5 行的范围内。可以通过在Vim配置文件或命令行模式下设置 set modelines=10 来使得有效模式行的范围为文件开头10行和末尾10行内。 在命令行模式下输入命令 :help modelines，可以看到官方帮助文档对 modelines 选项的说明如下：如果 modeline 已启用并且 modelines 设置了行数，那么便在相应位置范围内查找 set 命令；如果 modeline 禁用或 modelines 设置的行数为 0 则不查找。 此外，为了使用正常使用 Vim 的模式行功能，必须开启 modeline 选项 (即设置 set modeline)。默认情况下，当 Vim 以非兼容模式运行时该特性都是启用的，除了在一些发行版中，出于安全考虑，Vim 的 ~/.vimrc 配置文件中显式禁用了该选项。 二、Vim 模式行格式有两种模式形式：[text]{white}{vi:|vim:|ex:}[white]{options} 和 [text]{white}{vi:|vim:|Vim:|ex:}[white]se[t] {options}:[text]。 其中 [text] 表示任何文本，可以为空，一般是对应语言的注释符号；{white} 表示不少于一个的空白字符 (空格或Tab)；{vi:|vim:|Vim:|ex:} 是 Vim 模式行的标识字符；[white] 表示可选的任意个空白字符；se[t] 表示字符串 set 或 se (注意空格)，使用 Vim: 时必须用 set；{options} 表示选项设置的列表，用空格或 : 分隔，每个 : 之间的部分成为一个 :set 命令的参数 (可为空)，:help options 可以查看所有有效选项的说明。 例如，本文提到的 noai 是 noautoindent 选项的缩写，用于设置不自动缩进；ts 是 tabstop 选项的缩写，用于设置文件里的 Tab 键代表的空格数；sw 是 shiftwidth 选项的缩写，用于设置执行Vim缩进操作 ( &lt;&lt; 和 &gt;&gt; )时缩进的列数，更多内容，推荐阅读Vim自动缩进。 简单来说，Vim 在文件特定范围内检索模式行时，首先会判断该文件的类型(参考Vim文件类型检测原理及应用)，再根据获取到的文件类型获取对应的注释符号，最后，在注释行中查找 vim: 或 ex: 等关键词作为 Vim 的模式行。 Vim 的模式行格式有以下规则： 注释符号 与模式行关键词 vim: 间必须包含空格 如果用 set 来设置模式行的内容，Vim 会在找到第一个 : 时结束选项的设置，后面类似 */ 之类的为了闭合注释而出现的文本均不会被当做模式行选项 如果不用 set 设置模式行，那么从 vim: 开头的该行以后的所有内容均被视作模式行选项 因此，对应 C++ 语言的源文件来说，/* vim: set noai ts=4 sw=4:expandtab */ 是一个有效的模式行设置，但 : 后面的 expandtab 选项不会生效，因为其位于 第一个 : 之后； 而 /* vim: noai:ts=4:sw=4 */ 是无效的，因为模式行中包含 */ 这部分非法的内容，需要修改为 // vim: noai:ts=4:sw=4 才是个有效的模式行设置，当然，也可以换成下面这种分成两行的形式，因为 Vim 检测模式行时只会处理到行尾。 12/* vim: noai:ts=4:sw=4*/ 在 Vim 命令行模式下，输入 :verbose set modeline? modelines? 命令可以查看当前与模式行相关的设置及它们最新的设置。类似结果如下所示： 1234modeline Last set from ~/.vimrcmodelines=6 Last set from ~/.vimrc 三、Vim 模式行应用示例假设当前的 Vim 配置文件中有如下配置： 123set modelineset modelines=6set tabstop=4 制表符被设置为 4 个空格，如果想把当前目录下的文件 test.cpp 中的所有制表符增加到 8 个空格而不影响其它所有文件，可以在 test.cpp 文件的前 6 行内 增加 // vim: noai:ts=8: 并保存。 此后，在 test.cpp 文件中输入一个制表符时，空格的数量变成了 8 个。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim模式行","slug":"Vim模式行","permalink":"https://vim.ink/tags/Vim模式行/"},{"name":"vim-modeline","slug":"vim-modeline","permalink":"https://vim.ink/tags/vim-modeline/"}]},{"title":"Vim单词拼写检查与更正-Vim入门教程(52)","slug":"vim-spell-check","date":"2019-01-09T16:00:00.000Z","updated":"2019-04-27T15:35:46.157Z","comments":true,"path":"vim-spell-check.html","link":"","permalink":"https://vim.ink/vim-spell-check.html","excerpt":"","text":"Vim 内置拼写检查器，使用命令 :set spell 可以对当前文件中所有未在字典中出现过的单词进行标记并高亮显示。 Vim 普通模式下，使用 [s、]s 命令可以在拼写错误间进行反向或正向跳转。当 Vim 光标位置某个错误单词之上时，可以使用 z= 命令获取 Vim 提供的更正建议列表，再输入 1&lt;CR&gt; 来选择编号为 1 的单词。如果已经确认第一项建议单词就是目标词，可以直接使用 1z= 跳过提示直接采纳第一个单词进行更正。 1. 指定拼写单词Vim 的拼写检查器开启后将使用英语字典作为缺省的拼写字典进行单词比较，可以通过配置 spelllang 选项更改缺省设置。 注意：spelllang 选项不是全局性的，它永远只在当前缓冲区生效。所以当编辑两个或两个以上的文档时，可以分别采用不同的拼写文件。 Vim 的发行版本身内置了支持英语的拼写文件，可以到 http://ftp.vim.org/vim/runtime/spell/ 下载 Vim 所支持的其他几十种语言的拼写字典。当通过 set spellang 尝试加载某个尚未得到系统支持的拼写文件时，Vim 会基于一个内置于发行版中的 spellfile.vim 插件提供自动下载和安装的能力。 2. 增加单词到拼写字典既然是字典文件，当然可以对其进行增加和删除操作。 可以使用 zg 命令将当前光标下的单词添加到 Vim 的拼写字典中；使用 zw 命令将光标所在处的单词标记为拼写错误 (即将该单词从拼写文件中删除)；此外，Vim 专门提供了一条撤销命令 zug，用于撤销对光标下单词所执行的 zg 或 zw 命令。 spellfile 选项用于指定由 zg 和 zw 命令添加、删除的单词所保存的文件路径。如以下配置所示，可以同时指定多个拼写文件，维护多份单词列表。 123setlocal spelllang=en_ussetlocal spellfile=~/.vim/spell/en.utf-8.addsetlocal spellfile+=~/vim.ink/vimtutor/jargon.utf-8.add 下表总结了在普通模式下操作 Vim 拼写检查器的基本命令。 命令 用途 ]s 跳到下一处拼写错误 [s 跳到上一处拼写错误 z= 为当前单词提供更正建议 zg 把当前单词添加到拼写文件中 zw 把当前单词从拼写文件中删除 zug 撤销针对当前单词的 zg 或 zw 命令 3 插入模式下更正拼写错误假设刚使用 Vim 输入完一行文本，却突然发现位于几个单词之前的地方出现了一处拼写错误。该怎么办呢？ 最常规的做法是先切换到普通模式，再通过 [s 命令跳回到出现拼写错误的地方，用 z= 将其更正后再通过 A 命令切回到插入模式，并跳到刚才的位置继续编辑。 另外一种更加高效的方法是直接在插入模式下通过 &lt;Ctrl-x&gt;s (或 &lt;Ctrl-x&gt;&lt;Ctrl-s&gt; )命令更正拼写错误，该命令会触发一个特殊的自动补全功能 (参见 :h compl-spelling)。 插入模式下使用 &lt;Ctrl-x&gt;s 获得的自动补全单词列表所提供的补全建议与通过 z= 命令所获得的结果完全一致。但与 Vim 自带的单词补齐功能所不同的是，执行 &lt;Ctrl-x&gt;s 时，Vim 会从光标位置开始进行反向扫描，直到发现一处拼写错误为止；然后，它再根据更正建议创建单词列表，并将它们显示在弹出式菜单中。 当某行文本出现的相同拼写错误不止一处时，在插入模式下执行多次 &lt;Ctrl-x&gt;s 命令，既不需要切换输入模式，又可以将当前光标之前的所有相同错误进行更正，这才是该命令的精妙所在。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim-spell","slug":"vim-spell","permalink":"https://vim.ink/tags/vim-spell/"},{"name":"vim拼写更正","slug":"vim拼写更正","permalink":"https://vim.ink/tags/vim拼写更正/"},{"name":"spelllang","slug":"spelllang","permalink":"https://vim.ink/tags/spelllang/"},{"name":"vim-zg-zw","slug":"vim-zg-zw","permalink":"https://vim.ink/tags/vim-zg-zw/"}]},{"title":"Vim grep命令及其使用-Vim入门教程(51)","slug":"vimgrep","date":"2018-11-10T16:00:00.000Z","updated":"2019-04-27T15:35:46.077Z","comments":true,"path":"vimgrep.html","link":"","permalink":"https://vim.ink/vimgrep.html","excerpt":"","text":"grep 命令在 linux 系统中常用于在某个文件目录下查找包含指定目标内容的所有文件。 Vim 作为 linux 系统中最常用的编辑器之一，对外部 grep (或类似 grep) 命令进行了一层封装，提供了 Vim 命令 :grep。 使用 :grep 命令，可以在不退出 Vim 的情况下调用 linux 的 grep 命令，实现在多个文件中查找某个模式 (然后可以用 quickfix 列表浏览这些查找结果)。 1. 在 Vim 内部调用grep假设正在使用 Vim 编辑文本，这时候需要在当前目录的所有文件中查找单词 vim.ink。 最普通的做法是退出 Vim 后在 shell 中执行命令 grep -n vim.ink * (-n 参数指示 grep 在显示结果时加入行号信息)。 但是这么做成本太高，需要在 shell 和 Vim 间来回切换。正如Vim高效率一文所介绍，Vim 对许多日常操作和场景都提供了非常高效的支持。 针对上述场景，Vim 提供了对外部 grep 程序的包装命令 :grep，可以直接在 Vim 中执行 grep 而不用切换到 shell 中执行。在 Vim 的命令行模式下执行命令 :grep vim.ink * 便可以在当前目录的所有文件中查找目标单词 vim.ink。 具体来说，Vim 将在后台自动在 shell 终端中执行命令 grep -n vim.ink *，并且 Vim 会对 grep 的输出结果进行解析，再基于解析结果创建一个 quickfix 列表。 注：虽然只调用了 :grep vim.ink *，但 Vim 会自动加入 -n 参数指定 grep 命令在输出结果中加入行号信息。 2. 定制 grep 命令Vim 的 :grep 命令是对外部 grep 程序的封装。类似于Vim定制make编译器介绍的 :make 命令，可以通过配置 grepprg 和 grepformat 选项对 Vim 的查找行为进行定制。 当执行 Vim 的 :grep 命令时，实际上执行的是通过 grepprg 选项指定所调用的外部 shell 程序，而 grepformat 选项则用于指示 Vim 如何解析来自 :grep 命令的输出结果。 在 Unix 系统中，上述两个 Vim 选项的默认设置为： 12grepprg=&quot;grep -n $* /dev/null&quot;grepformat=&quot;%f:%l:%m,%f:%l%m,%f %l%m&quot; 出现在 grepprg 选项中的符号 $* 表示占位符，最终将被提供给 :grep 命令的参数所代替。grepformat 选项由一串逗号分隔的字符组成，其内容包括用于解析 :grep 执行结果的符号。其中，%f 表示文件名，%l 表示行号，%m 表示匹配行的文本内容，可通过 :h errorformat 命令查看完整的列表字段介绍。 ack (ack is a tool like grep, optimized for programmers) 是一个比 linux 自带的 grep 效率更高的程序，其官网为 http://betterthangrep.com (better than grep)，可见其作者创造它的目的就是为取代grep。ubuntu下要使用命令 sudo apt-get install ack-grep 安装ack，因为在debian系中，ack这个名字被其他的软件占用了。 如果需要使用 ack 代替 Vim 的 :grep命令默认使用的 grep，最简单方法就是对 grepprg 选项进行如下设置： :set grepprg=ack\\ --nogroup\\ $* 注：上述设置中，空格需要使用 \\ 进行转义，-nogroup 参数用于在输出结果中加入行号信息。 3. 使用 Vim 内部的 grepVim 提供了一个名为 :vimgrep (缩写形式 :vim) 的命令，其采用的是 Vim 内置的正则表达式查找引擎 (vimgrep 的查找速度远不及grep和ack，毕竟这不是 Vim 的核心能力)。 该命令的语法格式为：:vim[grep][!] /{pattern}/[g][j] {file}。 g 标志位表示为每个匹配均创建一条记录，否则 Vim 只会为整行文本创建一项记录；缺省情况下，Vim 会直接跳转到第一处匹配，可以通过 j 标志位，让 :vim 命令只更新 quickfix 列表而不跳转到第一处匹配； 参数 {file} 不能为空，接受的参数与 :args 命令的相同，包括文件名、通配符、反引号表达式及它们的组合形式。通配符 * 会匹配目录下的任意文件，通配符 ** 则会匹配指定目录及其子目录中的任意文件，符号 ## 将被扩展成参数列表中的所有文件。 使用 :vimgrep 的主要优点在于它能使用与 Vim查找命令相同的模式。与 :substitute 和 :global 命令类似，如果保持 :vimgrep 命令的模式域为空，:vimgrep 会使用最近一次的查找模式。在实际工作中，一般都是先在当前文件中查找，撰写出符合需求的正则表达式获取到了满意的匹配结果后，就可以使用完全相同的模式来执行 :vimgrep。 此外，还可以使用 &lt;Ctrl-r&gt;/ 显式把当前模式的内容粘贴至 :vimgrep 命令的模式域。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-grep","slug":"Vim-grep","permalink":"https://vim.ink/tags/Vim-grep/"},{"name":"vimgrep","slug":"vimgrep","permalink":"https://vim.ink/tags/vimgrep/"},{"name":"grepprg","slug":"grepprg","permalink":"https://vim.ink/tags/grepprg/"},{"name":"grepformat","slug":"grepformat","permalink":"https://vim.ink/tags/grepformat/"}]},{"title":"Vim中文键盘速查表详细介绍-Vim入门教程(50)","slug":"vim-chinese-cheatsheet","date":"2018-05-31T16:00:00.000Z","updated":"2019-04-27T15:36:41.612Z","comments":true,"path":"vim-chinese-cheatsheet.html","link":"","permalink":"https://vim.ink/vim-chinese-cheatsheet.html","excerpt":"","text":"经典的Vim键盘速查表中文介绍图以及各命令的详细介绍索引，按不同颜色区分Vim动作(motion)、Vim命令、Vim操作符(operator)，推荐阅读谈谈Vim中的操作符和动作命令。 Esc：返回到Vim的普通模式 ~：大小写转换，即将当前光标所在的大写字符转为小写字符，或将当前小写字符转为大写字符 !：在 Vim 中执行外部命令，参考Vim执行shell命令。 @: 回放录制的宏操作，参考Vim宏录制与重复操作。 #：反向查找Vim当前光标所在单词，参考Vim搜索命令使用方法和技巧。 $：将Vim光标移动到当前所在行的行尾(实际行)，参考Vim光标移动命令汇总。 %：找到本行的光标所在或其后的下一个项目，并跳转到它的匹配 ^：将光标移动到当前行的第一个非空格字符(“软”行首) &amp;：等价于 :s，表示重复上次的 substitute 命令，参考Vim替换命令。 *：正向查找Vim当前光标所在单词，参考Vim搜索命令使用方法和技巧。 (：将光标移动到句首 )：将光标移动到下一个句首 +：将光标移动到下一行行首，参考Ex命令偏移地址。 0：将光标移动到当前行行首 (“硬”行首，对应 ^) -：将光标移动到上一行行首 (对应 +) =：自动格式化，&gt;&gt;= 表示行首缩进，参考Vim自动缩进和tab键。 Q：切换到Ex模式q：开始录制宏，参考Vim宏录制与重复操作。 W：将光标移动到下一个字串w：将光标移动到下一个单词，关于 W 和 w 的区别，参考Vim单词和字串概念。 E：正向移动到当前字串 / 下一字串的结尾e：正向移动到当前单词 / 下一单词的结尾 R：切换到替换模式r：替换字符 T：反向移动到上一个目标所在之处的后一个字符上t：正向移动到下一个目标字符所在之处的前一个字符上，参考Vim字符查找与光标快速移动。 Y：拷贝行y：拷贝 U：撤销行内命令u：撤销命令 I：到行首插入i：插入模式 O：在当前行上一行插入o：在当前行下一行插入 P：粘贴到前一行p：粘贴到后一行 A：在行尾插入a：在Vim当前光标后插入 S：删除行并插入s：删除字符并插入，非常好用却被很多人忽略的命令 D：删除到当前行行尾d：删除 F：行内字符反向查找f：行内字符查找，参考Vim字符查找与光标快速移动。 G：将光标移动到文档末尾行g：gg 将光标移动到文档首行，26gg 将光标移动到文档的第 26 行，gf 打开光标处的文件名 H：移动光标到屏幕顶行h：光标往左移动 J：合并两行j：光标往下移动 K：打开光标所在单词对应的Vim帮助文档k：光标往上移动 L：移动光标到屏幕底行l：光标往右移动 Z：ZZ 保存退出，ZQ 不保存退出z：zz 移动光标所在行到屏幕顶端，zb 移动光标所在行到屏幕底端，zz 移动光标所在行到屏幕中间。 X：删除光标所在词的前一个字符，类似于word、notepad等编辑器中的退格 (Backspace)x：删除字符 C：修改至行末；c：修改当前光标下的字符，后面可以接一个移动范围，表示修改光标点到移动终点之间的内容并进入插入模式，参考Vim删除并进入插入模式命令c(change)。 V：进入行选择可视化模式；v：进入字符选择可视化模式，参考vim可视化模式。 B：将光标移动到前一个字串；b：将光标移动到前一个单词，参考vim单词和字串。 N：反向(往上)查找上一个目标串；n：正向(往下)查找下一个目标串，参考vim查找。 M：将光标移动到屏幕中间行；m：用于设置位置标注(vim mark)，参考Vim位置标记mark详解。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-chinese-cheatsheet","slug":"Vim-chinese-cheatsheet","permalink":"https://vim.ink/tags/Vim-chinese-cheatsheet/"},{"name":"vim键盘速查","slug":"vim键盘速查","permalink":"https://vim.ink/tags/vim键盘速查/"},{"name":"vim键盘图","slug":"vim键盘图","permalink":"https://vim.ink/tags/vim键盘图/"},{"name":"vim命令索引","slug":"vim命令索引","permalink":"https://vim.ink/tags/vim命令索引/"}]},{"title":"Vim文件间跳转-Vim入门教程(49)","slug":"vim-goto-file","date":"2018-04-14T16:00:00.000Z","updated":"2019-04-27T15:34:36.544Z","comments":true,"path":"vim-goto-file.html","link":"","permalink":"https://vim.ink/vim-goto-file.html","excerpt":"","text":"Vim 会把文件中的文件名当成一个超链接，进行了正确的配置后，在 Vim 普通模式下可以用 gf 命令跳转到当前光标下文件名对应的文件。(gf 命令可理解为 goto file 的缩写形式) 以下面的目录结构进行举例，假设当前目录下有个文件 event.c 和 文件夹 include，且 event.c 文件中需要引用定义在 include/event2/event.h 头文件中的函数。 123456.├── event.c├── include│ ├── event2│ │ ├── event.h│ │ ├── event_struct.h event.c 中引用 include/event2 文件夹下部分头文件的源代码如下： 123#include \"event2/event.h\"#include \"event2/event_struct.h\"...... 这是 C 源代码文件中最常见的头文件引用方式，如果能快速查看 include 所指定头文件的具体内容，在工作中将会非常高效、实用。Vim 普通模式下的 gf 命令正好能用于这种场景。 把光标移动到字符串 &quot;event2/event.h&quot; 的某个位置上后尝试执行 gf 命令，这时 Vim 会提示错误： “E447: 在路径中找不到文件 ‘event2/event.h’ “。 这是因为，Vim 确实在尝试打开名为 event2/event.h 的文件，但由于在对应路径下并未找到该文件，从而报错结束。 为了让 Vim 能按照需要在指定的目录下寻找对应文件，需要手工设置 path 选项来自定义搜索目录。path 选项可以被设置成一个以逗号分隔的目录列表。关于 path 选项的更多内容，可以使用 :help &#39;path&#39; 查看官方帮助文档的介绍。 当执行 gf 命令时，Vim 会检查 path 选项指定的目录列表中的每个目录，搜索该目录中是否包含一个匹配光标下文本的文件名。若存在对应文件，则使用 tabedit 命令在新的标签页中打开。 现在，先使用 :set path+=./include,., 将当前目录下的include文件夹加入到 gf 命令的搜索路径中，再执行 gf 命令时发现已经在新的标签页中正确打开了 include/event2/event.h 文件。 每次用 gf 命令时，Vim 都会在跳转列表中增添一条记录。所以在新打开的 event.h 文件中，可以用 &lt;Ctrl-o&gt; 命令返回到上一次所在的 event.c 文件中。(&lt;Ctrl-o&gt; 命令用于后退到之前的文件中，而 &lt;Ctrl-i&gt; 命令则是前进到之前打开过的文件中，更多内容，可参考Vim教程网中的其他文章)。 注：可使用 :set path? 命令查看当前已经设置的 path 选项的值。 除此之外，suffixesadd 选项可用于指定一个或多个文件扩展名，当 Vim 用 gf 命令搜索文件名时，会尝试在当前光标所在文件名后加上这些扩展名进行搜索，这对于 Python、ruby 等这些包含文件时不指定文件扩展名的语言来说，是个非常有用的特性。例如，可通过 :set suffixesadd+=.rb 命令增加 .rb 后缀，之后就可以直接用 gf 打开 require 指示符指定的文件了。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim-gf","slug":"vim-gf","permalink":"https://vim.ink/tags/vim-gf/"},{"name":"vim-goto-file","slug":"vim-goto-file","permalink":"https://vim.ink/tags/vim-goto-file/"},{"name":"vim标记","slug":"vim标记","permalink":"https://vim.ink/tags/vim标记/"},{"name":"Vim-jumps","slug":"Vim-jumps","permalink":"https://vim.ink/tags/Vim-jumps/"},{"name":"vim-suffixesadd","slug":"vim-suffixesadd","permalink":"https://vim.ink/tags/vim-suffixesadd/"},{"name":"vim-path","slug":"vim-path","permalink":"https://vim.ink/tags/vim-path/"}]},{"title":"Vim的session保存和会话恢复-Vim入门教程(48)","slug":"vim-session","date":"2017-10-09T16:00:00.000Z","updated":"2019-04-27T15:34:36.588Z","comments":true,"path":"vim-session.html","link":"","permalink":"https://vim.ink/vim-session.html","excerpt":"","text":"大多数IDE编程软件(如visual studio、eclipse、pycharm等)都具有会话保存和恢复的功能：当重新打开IDE时，软件会自动恢复到上次退出时的环境，包括恢复窗口布局、所打开的文件列表等。 Vim作为最强大的编辑器，自然也具有类似功能。要实现上述效果，需要使用 Vim 的会话(session) 和 viminfo的保存和恢复功能。 viminfo文件主要保存了命令行历史(history)、搜索字符串历史(search)、输入行历史、非空的寄存器内容(register)、文件的位置标记(mark)、最近搜索/替换的模式、缓冲区列表、全局变量等信息，其作用已经在viminfo文件介绍与使用一文介绍过，这篇文章介绍下 Vim 的session保存和会话恢复功能。 1. Vim 会话Vim 的会话信息保存了所有窗口的视图、文件列表、全局设置等。 Vim 会话具体保存哪些信息由 sessionoptions 选项决定，可通过 :set sessionoptions 设置自己个性化的会话保存信息。sessionoptions 选项的值是一串由逗号分隔的单词列表，每个单词允许保存和恢复某种设置，下表列出了所有支持的单词及其功能。 sessionoptions选项值 保存和恢复 blank 空窗口 buffers 包括隐藏和卸载的文件缓冲区，而不仅仅是显示在窗口里的 curdir 当前目录 folds 手动建立的折叠、打开/关闭的折叠和局部折叠选项 globals 大写字母开头且包含至少一个小写字母的全局变量 (只保存字符串和数值类型) help 帮助窗口 localoptions 局部于窗口或缓冲区的选项和映射 (非局部选项的全局值) options 所有的选项和映射 (也包括局部选项的全局值) resize Vim 窗口的大小: ‘lines’ 和 ‘columns’ sesdir 会话文件所在的目录会成为当前目录 (用于通过网络访问别的系统的项目) slash 文件名里的反斜杠被替换成正斜杠 tabpages 所有标签页；如果不包含，只恢复当前标签页。这样你可以为每个标签页分别保存一个会话 unix 即使在 Windows 系统也使用 Unix 换行格式 winpos 整个 Vim 窗口的位置 winsize 窗口大小 默认的 sessionoptions 选项包括: blank、buffers、curdir、folds、help、options、tabpages、winsize (等价于 :set sessionoptions=blank,buffers,curdir,folds,help,options,tabpages,winsize)。 也就是说默认的会话文件可以恢复当前编辑环境的空窗口、所有的文件缓冲区、当前目录、折叠相关信息、帮助窗口、所有的选项和映射、所有的标签页(tab)、窗口大小。通过 :help sessionoptions 命令可查看官方 Vim 文档对 sessionoptions 的介绍。 2. 创建 Vim 会话在 Vim 命令行模式下使用命令 :mksession [file_name] 可用来创建一个会话文件，创建的会话文件保存在当前目录下，如果省略文件名则会自动创建一个名为 Session.vim 的会话文件。 例如，在 /home/vim/ 目录下使用 Vim 打开 ./test/bench.c 文件后使用 :mksession 创建的会话文件 Session.vim 保存在目录 /home/vim/。 会话文件本质上是一个 Vim 脚本，里面保存的都是可执行的 Vim Ex 命令。 如果不希望在 session 文件中保存当前路径 (curdir)，而是希望session文件所在的目录自动成为当前工作目录，则需要在 sessionoptions 去掉 curdir 并增加 sesdir。设置此选项后，session文件中保存的是文件的相对路径，而不是绝对路径。这样每次载入session件时，此文件所在的目录就被设为 Vim的当前工作目录。 当项目有多个不同版本 (位于不同的目录)或通过网络访问其它项目的session文件时，若想始终使用一个相同的session文件，只需要把session文件拷贝到不同的目录即可实现。 3. 恢复 Vim 会话使用 :mksession 命令创建完会话文件后，可以在 Vim 命令行模式下使用 :source file_name 来导入指定的会话文件。 由于 Vim 会话文件实际上保存的是 Ex 命令，所以执行 :source 命令其实只是把会话文件中的所有 Ex 命令从头到尾执行了一遍，这就是 Vim 会话恢复的原理。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-session","slug":"Vim-session","permalink":"https://vim.ink/tags/Vim-session/"},{"name":"vim会话文件","slug":"vim会话文件","permalink":"https://vim.ink/tags/vim会话文件/"},{"name":"Vim会话保存和恢复","slug":"Vim会话保存和恢复","permalink":"https://vim.ink/tags/Vim会话保存和恢复/"},{"name":"mksession","slug":"mksession","permalink":"https://vim.ink/tags/mksession/"},{"name":"sessionoptions","slug":"sessionoptions","permalink":"https://vim.ink/tags/sessionoptions/"}]},{"title":"Vim括号/引号自动补齐和匹配插件delimitMate-Vim插件(14)","slug":"vim-delimitmate-plugin","date":"2017-09-24T16:00:00.000Z","updated":"2019-04-27T15:35:46.029Z","comments":true,"path":"vim-delimitmate-plugin.html","link":"","permalink":"https://vim.ink/vim-delimitmate-plugin.html","excerpt":"","text":"Vim教程网之前介绍过的vim-surround插件可以高效地方在字符两边插入各种符号，本文介绍可对各种符号(括号、引号)进行自动补齐和智能匹配的Vim插件 delimitMate (伙伴定界? 用于界定符自动补齐， 从英文单词的直译便可看出该插件的核心功能)。 例如，使用 delimitMate 插件，可以在 Vim 插入模式下，输入前大括号后自动补全后大括号，在一对括号之间回车，自动分为 3 行并调整缩进， 一、delimitMate 插件安装Vim 支持多种方法安装 delimitMate 插件，推荐使用 Vundle 或 vim-plug 进行插件安装。 如果使用 Vundle 安装 delimitMate 插件，只需要在 ~/.vimrc 文件的合适位置添加 Plugin &#39;Raimondi/delimitMate&#39; 后再在 Vim 的命令行模式下执行 :PluginInstall 命令即可完成插件的安装。 如果使用 vim-plug 安装 delimitMate 插件，只需在 ~/.vimrc 文件的合适位置添加 Plug &#39;Raimondi/delimitMate&#39; 后再在 Vim 的命令行模式下执行 :PlugInstall 即可完成插件的安装。 关于插件的安装细节，可参考 Vim教程网上关于Vim插件管理的相关文章。 二、delimitMate 配置和使用安装完 delimitMate 插件后，当 Vim 启动时会自动加载该插件，不需要进行额外的配置就可使用 delimitMate 提供的功能。 delimitMate 插件提供的是一种 被动 技能，即：在 Vim 插入模式下，输入一个双引号、单引号、单号、圆括号 或 方括号的左半部分时，都会触发 delimitMate 自动补齐对应右半部分。可以按 组合键将光标移动到补全后的符号后面继续编辑。 delimitMate 插件提供了多种配置选项(delimitMate_autoclose、delimitMate_nesting_quotes、delimitMate_smart_matchpairs)进行个性化设置，例如，可以使用 let b:delimitMate_autoclose = 0 选项关闭 delimitMate 插件。 au FileType python let b:delimitMate_autoclose = 0 使用 autocmd 命令关闭 delimitMate 对 python 文件的自动补齐功能。 au FileType python let b:delimitMate_nesting_quotes = [&#39;&quot;&#39;] 在 Vim 命令行模式下执行 :help delimitMate 可查看 delimitMate 插件提供的完整官方文档。","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-delimitMate","slug":"Vim-delimitMate","permalink":"https://vim.ink/tags/Vim-delimitMate/"},{"name":"vim插件","slug":"vim插件","permalink":"https://vim.ink/tags/vim插件/"},{"name":"自动补齐","slug":"自动补齐","permalink":"https://vim.ink/tags/自动补齐/"},{"name":"vim-surround","slug":"vim-surround","permalink":"https://vim.ink/tags/vim-surround/"}]},{"title":"Vim光标移动之实际行与屏幕行-Vim入门教程(47)","slug":"vim-line-downward","date":"2017-05-19T16:00:00.000Z","updated":"2019-04-27T15:35:46.112Z","comments":true,"path":"vim-line-downward.html","link":"","permalink":"https://vim.ink/vim-line-downward.html","excerpt":"","text":"与许多文本编辑器不同，Vim 会区分实际行与屏幕行。当 Vim 的 wrap 设置被启用时(缺省启用)，每个超出窗口宽度的文本行都会被回绕显示(自动换行)，来保证所有文本都能在当前窗口中完整展示出来。 因此，文件中的一行可能会被显示为屏幕上的若干行，从而出现了Vim 实际行与屏幕行的差异。 1. Vim光标移动实际行与屏幕行当 Vim 启用 number 选项设置成显示行号后，以行号开头的行对应一个实际行，它们会占据着屏幕上的一行或几行；若某一行文本为适应窗口宽度而回绕时，回绕行的前面则不会显示行号。 在Vim光标移动命令汇总一文介绍过，Vim普通模式下使用 j 和 k 命令可向下及向上移动光标，注意：这里提到的行移动是指实际行。 而如果需要按屏幕行向下、向上移动光标，则需要分别使用Vim命令 gj 和 gk。 如下面的Vim视频教程所示，假设想将当前光标向下移到单词 “watch” 上，如果直接按下 j 键，则会将当前光标往下移动到第5行的单词 “body”上，显然，这种往下移动一个实际行的操作并不是想要的结果。 而如果使用命令 gj，则会把当前光标往下移动一个屏幕行，正好将光标移动到单词 “watch” 上。如果不使用 gj 命令，可能你需要按下许多次 l 来右移光标，一步一步地移动到单词 “watch” 上，这是个多么低效的操作。 同样地，对于移动光标到行首、行尾等操作，Vim 也提供了对应以屏幕行为对象的命令。下表对操作实际行和屏幕行的命令进行了总结。 命令 光标动作 j 向下移动一个实际行 gj 向下移动一个屏幕行 k 向上移动一个实际行 gk 向上移动一个屏幕行 0 移动到实际行的行首 g0 移动到屏幕行的行首 ^ 移动到实际行的第一个非空白字符 g^ 移动到屏幕行的第一个非空白字符 $ 移动到实际行的行尾 g$ 移动到屏幕行的行尾 观察上表，容易发现一个简单规律：j、k、0 和 $ 都用于操作实际行，而如果在这些键前加上 g 前缀，就会让 Vim 对屏幕行进行操作。 自定义映射面向行的动作命令如果想让 j 及 k 命令操作屏幕行而不是实际行，可以通过Vim按键映射修改默认的 j、k的功能。 把以下按键配置配置项加到 ~/.vimrc 文件中即可实现自定义面向屏幕行的动作命令。 1234nnoremap k gknnoremap gk knnoremap j gjnnoremap gj j 注：上述映射项使 j 和 k 基于屏幕行向下或向上移动，而 gj 和 gk 则基于实际行向下和向上移动，与 Vim 的缺省设置刚好相反。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim光标移动","slug":"vim光标移动","permalink":"https://vim.ink/tags/vim光标移动/"},{"name":"Vim-line-downward","slug":"Vim-line-downward","permalink":"https://vim.ink/tags/Vim-line-downward/"},{"name":"vim屏幕行移动","slug":"vim屏幕行移动","permalink":"https://vim.ink/tags/vim屏幕行移动/"},{"name":"vim-gj","slug":"vim-gj","permalink":"https://vim.ink/tags/vim-gj/"},{"name":"vim-gk","slug":"vim-gk","permalink":"https://vim.ink/tags/vim-gk/"}]},{"title":"2017年排名前10的暗黑简约型vim配色方案-Vim插件(13)","slug":"10-light-vim-color-scheme","date":"2017-04-08T16:00:00.000Z","updated":"2019-04-27T15:36:41.540Z","comments":true,"path":"10-light-vim-color-scheme.html","link":"","permalink":"https://vim.ink/10-light-vim-color-scheme.html","excerpt":"","text":"Vim教程网整理的15个著名的Vim配色方案获得的反馈还不错，在Google上搜索Vim配色相关的内容时，这篇文章能排到首页前三的位置。本文继续推荐10个暗黑简约型的Vim配色方案，供大家各取所需。 1. SolarizedSolarized可以称得上是Vim配色方案中最为流行和推崇的方案 (几乎可以说是没有之一)，所以不管这篇文章的主题是什么，最先推荐给大家的主题，我首选Solarized。其下载地址为：https://github.com/altercation/vim-colors-solarized，star数已经超过5000了。 2. GRB256GRB256是基于ir_black方案而设计的一款Vim配色方案，作者同为Gary Bernhard。对于Ruby on Rails和Python开发者来说，是一款非常友好的简约型配色，推荐使用。其github地址为：https://github.com/garybernhardt/dotfiles/blob/master/.vim/colors/grb256.vim。 3. DistinguishedDistinguished是一个面向256-color终端的暗黑型配色方案，对于JavaScript语言来说，是一个非常值得推荐的主题，当然，这款Vim配色对于Ruby和Python开发者来说，也是一个非常不错的选择。其github下载地址为：https://github.com/Lokaltog/vim-distinguished。 4. GuardianGuardian是面向XHTML和CSS文件而设计的一款Vim配色方案，但是对于Ruby和Javascript开发者来说，也是一个非常不错的选择。其官方下载地址为：http://www.vim.org/scripts/script.php?script_id=1240。 5. RailscastsRailscasts配色方案是由Ryan Bates通过移植其在TextMate (Mac下的著名的文本编辑器软件，与BBedit一起并称Mac上的emacs和vim) 所使用的配色到Vim而产生的，如果你是一位Ruby或ptyhon语言的使用者，那么你一定要尝试下这个Vim配色。其github地址为：https://github.com/ryanb/dotfiles/blob/master/vim/colors/railscasts.vim。 6. TwilightTwilight也是一款从TextMate移植过来的Vim配色方案，但是青出于蓝，在一些场景下甚至比TextMate上的twilight配色更加完美。如果你曾经是TextMate编辑器的使用者，那么强烈建议你尝试下这款名叫Twilight的Vim配色方案。其官网下载地址为：http://www.vim.org/scripts/script.php?script_id=1677。 7. JellybeansJellybeans是一个色彩鲜明但不花哨的Vim配色方案，据说是基于 ir_black 和 twilight 主题而进行设计实现。虽然官方称其主要是为了给gVim和MacVim所实现，但是其对256-color终端也是非常友好的。配色下载地址为：https://github.com/nanotech/jellybeans.vim。 8. VividchalkVividchalk也是一款从TextMate移植过来的Vim配色方案，它基于TextMae上一个叫做Vibrant Ink的主题而设计和开发。不管是GUI，还是256-color、88-color 或者是 16-color 终端，都能很好地进行支持。下载地址为：https://github.com/tpope/vim-vividchalk。 9. CandyCandy是一款隐藏色系的Vim配色方案 (hidden color schemes)，色彩鲜明、关键词突出，是我自己非常喜欢的一款Vim配色，其下载地址为：http://www.vim.org/scripts/script.php?script_id=282。 10. GitHub这是一款基于GitHub的 light-background 语法高亮而实现的一款Vim配色方案，对于completion menus、diffsplit、STL highlighting 等十分友好。其官方下载地址为：http://www.vim.org/scripts/script.php?script_id=2855。 关于Vim配色方案的更多推荐，建议阅读15个著名的Vim配色方案整理。","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim配色方案","slug":"Vim配色方案","permalink":"https://vim.ink/tags/Vim配色方案/"},{"name":"vim主题颜色","slug":"vim主题颜色","permalink":"https://vim.ink/tags/vim主题颜色/"},{"name":"vim-color-scheme","slug":"vim-color-scheme","permalink":"https://vim.ink/tags/vim-color-scheme/"},{"name":"Vim-python配色","slug":"Vim-python配色","permalink":"https://vim.ink/tags/Vim-python配色/"},{"name":"vim-ruby-on-rails","slug":"vim-ruby-on-rails","permalink":"https://vim.ink/tags/vim-ruby-on-rails/"},{"name":"vim-Solarized","slug":"vim-Solarized","permalink":"https://vim.ink/tags/vim-Solarized/"}]},{"title":"Vim跨行操作与Ex命令操作范围-Vim入门教程(46)","slug":"vim-operate-muliple-line","date":"2016-10-09T16:00:00.000Z","updated":"2019-04-27T15:34:36.573Z","comments":true,"path":"vim-operate-muliple-line.html","link":"","permalink":"https://vim.ink/vim-operate-muliple-line.html","excerpt":"","text":"跨行操作是日常工作中经常遇到的场景，最近在知乎上看到一个很好的讲解Vim跨行操作的案例，借鉴过来聊聊Vim的跨行操作。 简单来说，跨行操作是指一个Vim命令能同时操作多个文件行。在讲解跨行操作的具体案例时，需要理解下Vim的操作范围，推荐阅读Vim教程网之前介绍的两篇文章：ex命令操作范围 和 Vim操作范围、文件范围介绍。 1. 跨行删除假设有一段从百度贴吧复制下来的纯文本内容，基本格式如下： 12345678910111213141516171819202122232425262728293031323334353637381楼2016-08-04 20:24举报 |个人企业举报垃圾信息举报×_××xxx3Vim教程网挺不错的，支持下2楼2016-08-05 02:33举报 |个人企业举报垃圾信息举报××××xxxxxx吧主13嗯不错，支持原创，以后会经常访问https://vim.ink3楼2016-08-05 12:18举报 |个人企业举报垃圾信息举报xxxxxxxxl1支持原创，继续努力，妹子加油！ 现在希望只把回帖内容保留下来，其他信息全部删掉，达到下面的效果： 12345Vim教程网挺不错的，支持下嗯不错，支持原创，以后会经常访问https://vim.ink支持原创，继续努力，妹子加油！ 可以看到，作为起始部分的 楼层信息 格式是固定的，而作为结束部分的 头衔等级、空行 也是固定的。因此，可以用Vim pattern 匹配到 起始 和 结束 的部分，绕开难以处理的用户名和贴吧头衔等内容。 1.1 使用substitute命令替换非目标数据对于起始部分的 楼层信息，可以通过简单的正则表达式 ^\\d\\+楼.* 进行匹配；同样地，结束部分的 头衔等级和空行 也可以通过正则表达式 ^\\d\\+\\n^$\\n 进行匹配。但是，楼层信息和头衔等级中间的多行内容，很难用简单的正则表达式进行匹配。 对于正则表达式来说，元字符组合 .* 可以匹配到行内所有内容，却唯独不包括行尾字符，也就是说，.* 默认情况下是不匹配换行符的。所以，如果需要匹配起始行到结束行中间的任意多行，用 .* 无法实现。 为了匹配起始行和结束行中间的全部内容，需要使用 \\_.\\{-}。 \\_. 可以匹配到行尾字符，又因为 * 是贪婪匹配的，默认会匹配到最远的结束行，因此用 \\{-} 指定作最少的匹配，保证匹配到的是最近的结束行。 所以，匹配上述起始部分和结尾部分所有内容的正则表达式为 ^\\d\\+楼\\_.\\{-}\\n^\\d\\+\\n^$\\n，使用substitute命令替换非目标数据的最终命令为 :%s/^\\d\\+楼\\_.\\{-}\\n^\\d\\+\\n^$\\n//g。 为了更加清楚地理解上述命令的含义，将上面的substitute替换命令拆分为 /^\\d\\+楼\\_.\\{-}\\n^\\d\\+\\n^$\\n 和 :%s///g 两条命令。执行效果如下图所示。 1.2 使用global命令删除非目标数据当然，有了1.1介绍的起始部分和结束部分的正则表达式，配合之前介绍的Ex命令通过模式指定操作范围和 global 命令的执行原理，我们可以用 Vim 命令 :g/^\\d\\+楼/,/^\\d\\+\\n^$\\n/d 达到与 1.1 相同的操作效果。 上述 global 命令的含义是：在全文范围内 (缺省 %) 匹配 ^\\d\\+楼 并标记每一行匹配结果，然后在每一行匹配文本上逐行执行命令 ,/^\\d\\+\\n^$\\n/d，从而删除了起始部分和结束部分之间的所有内容。 注：这里 global 执行的命令使用了Ex命令 delete 的range形式，,/^\\d\\+\\n^$\\n/d 实际上等价于 .,/^\\d\\+\\n^$\\n/d，表示删除(d)当前行 (.) 到 匹配模式 /^\\d\\+\\n^$\\n/ 之间的所有行。 2. 跨行分离有了1.2介绍的基础，通过Vim寄存器可将匹配模式的内容删除到某个寄存器中，从而实现跨行分离操作。 例如，:g/^\\d\\+楼/,/^\\d\\+\\n^$\\n/d A 将开始部分和结束部分中间的内容删除并保存到寄存器 a 中，并且是对寄存器内容进行追加 (因为使用了 A 形式)。 同样地，:g/^\\d\\+楼/,/^\\d\\+\\n^$\\n/m$ 可将开始部分和结束部分中间的内容依次移动到当前文档的末尾 (通过 move 命令实现，具体可参考Vim移动命令move)。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim操作范围","slug":"Vim操作范围","permalink":"https://vim.ink/tags/Vim操作范围/"},{"name":"vim跨行删除","slug":"vim跨行删除","permalink":"https://vim.ink/tags/vim跨行删除/"},{"name":"vim正则表达式多行","slug":"vim正则表达式多行","permalink":"https://vim.ink/tags/vim正则表达式多行/"},{"name":"vim换行符","slug":"vim换行符","permalink":"https://vim.ink/tags/vim换行符/"}]},{"title":"Vim处理文本之使用normal命令实现奇偶行删除-Vim使用技巧(18)","slug":"vim-extract-odd-or-even-line-2","date":"2016-09-14T16:00:00.000Z","updated":"2019-04-27T15:35:46.046Z","comments":true,"path":"vim-extract-odd-or-even-line-2.html","link":"","permalink":"https://vim.ink/vim-extract-odd-or-even-line-2.html","excerpt":"","text":"Vim处理文本之奇偶行删除已经介绍了使用Vim的 :global 命令实现奇偶行删除的操作，本文介绍使用 :normal 命令来实现奇偶行删除的功能。 从Vim教程网整理的Vim normal命令和重复操作一文知道，normal 命令的使用形式为 :{range}norm[al][!] {commands}，表示在 range 指定范围内的每行执行若干普通模式命令 commands。 在具体介绍使用 normal 命令完成奇偶行删除之前，需要强调下 normal 命令的内部运行机制，即：纯粹根据 range 指定的行数来逐行运行Vim普通模式下的命令 commands。 例如，在下面名为 test.txt 文本中，执行Vim命令 :normal 1,3 dd 并不是删除了1~3行的内容，而是删除了1、3、5行的内容，剩下了原始文件中的2、4、6行。 123456aabbccddeeff 这是因为，normal 命令是纯粹根据行号来逐行执行的，在第一行执行完 dd 命令删除第一行后，原文件的第二行变成了第一行，接着，normal 命令将在文件的第二行继续执行 dd 命令，此时通过 dd 命令删除的第二行实则是原始文件的第三行。 这样一来，使用 :normal 1,3 dd 命令并没有删除掉原始文件中的1、2、3行，而是删除了原始文件中的1、3、5行。 注：normal 命令只有在与会更改文件行信息的普通模式命令结合才会出现上述的副作用，其他情况下的命令效果都是非常容易理解的。例如，命令 :normal 1,3 yy 会复制当前文件1~3行的内容到Vim无名寄存器。 上述 :normal 命令的执行机制与Vim的 :global 命令是完全不一样的。:[range]g[lobal]/{pattern}/[cmd] 命令是在 range 指定的范围内，对匹配 pattern 的行进行标记，只要文件行上的标记未被移除，就会在该行执行 cmd。 1. 奇偶行删除本文继续介绍使用Vim的 :normal 命令来提取所有奇数行或所有偶数行文本，达到奇偶行删除/奇偶行分离的目的。 仍然假设有一段如下的《泰坦尼克号》电影对白，需要分别提取出ROSE和JACK的所有台词，并分别保存到两个文件中。 123456789ROSE: I love you Jack.JACK: No... don&apos;t say your good-byes, Rose. Don&apos;t you give up. Don&apos;t do it.ROSE: I&apos;m so cold.JACK: You&apos;re going to get out of this... you&apos;re going to go on and you&apos;re going to make babies and watch them grow and you&apos;re going to die an old lady, warm in your bed. Not here. Not this night. Do you understand me?ROSE: I can&apos;t feel my body.JACK: You must do me this honor... promise me you will survive... that you will never give up... no matter what happens... no matter how hopeless... promise me now, and never let go of that promise.ROSE: I promise.JACK: Never let go.ROSE: I promise. I will never let go, Jack. I&apos;ll never let go. 关于奇偶行删除和提取的具体需求分析，已经在上文”Vim处理文本之奇偶行删除”进行过介绍，本文因此不再赘述，不了解背景的同学建议先阅读Vim处理文本之奇偶行删除。 2. :%normmal jdd 删除偶数行根据前面对 normal 命令的介绍，:%normmal jdd 表示在当前文档的所有行( % ) 上执行 jdd 命令。jdd 是Vim普通模式下的一个命令组合，表示将光标从所在当前行下移一行 ( j ) 后执行删除行操作 ( dd )。 同样地，根据前面的分析，在第一行执行完 jdd 删除第二行后，原始文件的第三行变成了第二行，在新的第二行继续执行 jdd 会删除原始文件的第四行……直到原始文件的最后一行上执行 jdd 时，由于执行 j 命令出错 (无法再移动) 而终止 normal 命令的执行。从而完成了删除原始文件所有偶数行的操作。 3. :%normmal jkdd 删除奇数行在分析 :%normmal jkdd 为什么能删除奇数行之前，需要再强调一下：normal 命令是纯粹根据行数来运行的，如果使用 % 来指定操作当前文档所有行，那么即便原始文件的最后一行已经执行过 normal 命令，只要不报错，normal 都会重复执行。 因此，出乎你的意料，在本文开头介绍的包含6行文本的 test.txt 文件中执行Vim命令 :%normal dd 时，确实会删除该文档的所有行，但是删除顺序却是： 第1行被删除、第3行被删除、第5行被删除、第6行被删除、第4行被删除、第2行被删除。 出现上述现象的原因是：normal 命令在执行到末行的时候并不会停止，而是会不断的重复执行。 那么有什么办法停止 normal 命令的执行呢？有！那就是出错。 normal 命令在执行到末行的时候，遇到出错就会自行停止。 jkdd 实际上就是我们人为加上的一个 错误，在除文件末行外的其他行执行 jkdd 命令时，会先将光标从当前行下移一行 ( j )，然后再将光标上移一行 ( k )，这么一下一上操作后，光标仍然处于原始行上，此时再执行 dd 则会删除当前行。因此，从文件第一行开始执行 jkdd 命令时，会逐步删除原始文件中的奇数行。 当删除到原始文件的末行时，此时因为已经位于末行而没法执行 j 操作而错误，所以 normal 命令就会停止，从而阻止了前面介绍的执行到末尾行后重复执行删除操作，最终导致整个文件都被删除的结果。 注：:%normal jkdd 会使得原始文件的末行无法被删除，因此，如果原始文件总行数是奇数，则最后一个奇数行无法被删除。 4. 小结介绍了使用Vim :normal 命令来实现奇偶行删除或奇偶行分离，重点需要理解 normal 命令的执行原理和执行流程：normal 命令纯粹根据 range 指定的行数来逐行执行Vim普通模式下的命令，如果需要停止 normal 命令的执行，可以通过出错实现。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim奇偶行分离","slug":"Vim奇偶行分离","permalink":"https://vim.ink/tags/Vim奇偶行分离/"},{"name":"vim-normal","slug":"vim-normal","permalink":"https://vim.ink/tags/vim-normal/"},{"name":"normal命令原理","slug":"normal命令原理","permalink":"https://vim.ink/tags/normal命令原理/"},{"name":"normal-jdd","slug":"normal-jdd","permalink":"https://vim.ink/tags/normal-jdd/"},{"name":"normal-jkdd","slug":"normal-jkdd","permalink":"https://vim.ink/tags/normal-jkdd/"},{"name":"vim技巧","slug":"vim技巧","permalink":"https://vim.ink/tags/vim技巧/"}]},{"title":"Vim的quickfix列表介绍-Vim入门教程(45)","slug":"vim-quickfix","date":"2016-07-06T16:00:00.000Z","updated":"2019-04-27T15:34:36.584Z","comments":true,"path":"vim-quickfix.html","link":"","permalink":"https://vim.ink/vim-quickfix.html","excerpt":"","text":"对于一线程序员来说，大部分的工作场景应该都是：编辑 - 编译 - 编辑 - 编译… 对于使用 Vim 的一线程序员来说，大部分的工作场景应该都是：使用 Vim 编辑代码 - 编译代码…如此循环往复，直到你变成一个不再需要写代码的程序员 (偷笑)！ 假设你正在使用 C++ 语言开发一个项目，如果你是刚刚接触 Vim，可能会在使用 Vim 完成代码编辑工作后，退出 Vim 到终端再使用 make 命令编译代码；若对 Vim 有一定的熟悉度，你可能会通过 :!make 直接在 Vim 内部执行外部shell命令make。 当 make 时遇到了编译错误，你还需要找到具体报错的文件和代码行，修复错误后再重新编译。如果你是根据编译器输出的错误信息，一个个打开出错的文件，找到出错的行再进行修改，那效率未免太低下了！！！ 在文章Vim中的重复操作与高效率提到过，大部分工作其实都是可重复的，Vim 对于各种重复性的操作和场景都提供了高效率的支持。 针对上述程序员日常：”编辑 - 编译”，Vim 同样提供了非常高效的支持方案，那就是 quickfix 列表。 一、Vim quickfix列表介绍quickfix 列表是 Vim 不同于大多数文本编辑器的一项核心功能，旨在将外部工具融入到使用 Vim 的工作过程当中。 从它的名字可以看出，quickfix 用于实现快速修复(quick fix)，它通过对 “编译器” 输出的错误信息进行解析，并生成 quickfix 列表供 Vim 使用者浏览和快速跳转，中途并不需要退出Vim进行额外操作，从而帮助我们简化工作过程。 简单来说，Vim quickfix 列表会保存一组针对单个或多个文件内容的、由文件名、行号、列号(可选)与消息组成的注释定位信息，并提供快速跳转能力。每一项记录可以是在执行 :make 时由编译器产生的出错信息，也可以是在执行 :grep 时找到的查找匹配。 假设在当前工作目录下，有一个名为 demo.cpp 的文件，里面是一段简单的 C 代码，且有几处语法错误。 12345678#include &lt;stdio.h&gt;int main(int argc, char **argv)&#123; int i; print(\"hello world\\n\") return 0;&#125; 现在，我们尝试直接在 Vim 内部编译这个文件。 首先，在 Vim 命令行模式下，执行命令 :set makeprg=gcc\\ -Wall\\ -odemo\\ demo.cpp 来设置 makeprg 选项，指定使用gcc编译 demo.cpp文件，并打开所有的Warnning。 注意：如果编译命令中有空格，需要使用 \\ 对空格进行转义。 设置完 makeprg 选项后，可以直接在 Vim 中执行命令 :make 来进行源码编译。 在执行 :make 时，Vim 会自动调用 makeprg 选项定义的命令进行编译，并把编译输出重定向到一个临时文件中。当编译出现错误时，Vim 会从上述临时文件中读出错误信息，根据这些信息形成 quickfix 列表，并跳转到第一个错误出现的地方。 对于上面描述的例子，在 Vim 内部执行 :make 得到的结果与在 shell 中运行 gcc -Wall -odemo demo.cpp 的结果完全一致。唯一的不同是 Vim 除了会显示 make 命令的输出结果外，还会解析结果中的每一行内容，并把文件名、行号以及错误信息提取出来。 对于每一条出错信息，Vim 都会在 quickfix 列表中为其创建一项记录。我们可以上下浏览这些记录项，让 Vim 跳转到产生错误信息所在的源文件行上。 具体来说，对于本文介绍的例子，Vim 会将光标停在第一个出错的位置 (即停在 print(“hello world\\n”) 这一行)，同时，Vim 还会提示出错信息 error: ‘print’ was not declared in this scope。 如果没看清出错信息，可以输入 :cc 命令让 Vim 再次显示此信息。也可以使用 :cw 命令打开一个 quickfix 窗口，把所有的出错信息显示出来。下面的Vim视频教程详细地展示了上述操作。 二、浏览/跳转quickfix列表Vim 提供了方便的命令用于快速浏览 quickfix 列表，下表展示了其中最有用的几种命令及其用途，其命令和含义类似缓冲区列表跳转。Vim 命令行模式下执行 :h quickfix 可以找到一份详尽的命令列表介绍。 命令 用途 :copen 或 :cw 如果有错误，打开 quickfix 窗口 :cc N 跳转到第 n 项，显示详细内容 :cclose 关闭 quickfix 窗口 :cnext 或 :cn 跳转到下一项 cprevious 或 :cprev 或 :cp 跳转到上一项 :cfirst 跳转到第一项 :clast 跳转到最后一项 :cnfile 跳转到下一个文件中的第一项 :cpfile 跳转到上一个文件中的最后一项 :copen 命令可以打开一个包含 quickfix 列表内容的窗口，可以用 k、j 键进行上、下滚动，如果将光标置于某个列表项并按 回车 键，Vim 将会打开相应的文件，并将光标置于包含匹配结果的那一行上。 通过 :cnext 与 :cprevious 这两条命令，可以向下或者向上遍历整个 quickfix 列表。如果想直接跳转到列表的起始或结尾项，可以用 cfirst 与 :clast 命令分别实现。 无论是 :cnext 还是 :cprev，都可以在其前面附加执行次数。因此，可以使用 :5cnext 实现每次间隔 5 项进行浏览，而不是依次浏览 quickfix 列表中的每一项。 三、定制外部编译器Vim 的 :make 命令不仅限于调用外部的 make 程序，也可以调用任何安装在操作系统上的编译器。 在 Vim 的术语中，编译器是指任何可以对文档进行处理并生成错误或警告列表的外部程序。而 :make 命令只负责调用外部编译器，并对其输出进行解析，以此构建一个可供浏览的 quickfix 列表。 makeprg 选项用于指定 Vim 运行 :make 时所调用的程序；errorformat 选项 (缩写形式：efm) 用于指示 Vim 如何解析由 :make 产生的输出结果，通过命令 :setglobal errorformat? 可以查看该选项的缺省值。 由于 errorformat 选项的配置很难记忆，Vim提供了一种将其保存到某个文件并使用 :compiler 命令来激活式对 makeprg 与 errorformat 的配置。更多细节，请参考Vim教程网上的其他内容。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-quickfix","slug":"Vim-quickfix","permalink":"https://vim.ink/tags/Vim-quickfix/"},{"name":"vim编译代码","slug":"vim编译代码","permalink":"https://vim.ink/tags/vim编译代码/"},{"name":"vim高效技巧","slug":"vim高效技巧","permalink":"https://vim.ink/tags/vim高效技巧/"},{"name":"vim-makeprg","slug":"vim-makeprg","permalink":"https://vim.ink/tags/vim-makeprg/"},{"name":"vim-errorformat","slug":"vim-errorformat","permalink":"https://vim.ink/tags/vim-errorformat/"}]},{"title":"Vim中的模式pattern-Vim入门教程(44)","slug":"vim-pattern","date":"2016-05-31T16:00:00.000Z","updated":"2019-04-27T15:36:41.676Z","comments":true,"path":"vim-pattern.html","link":"","permalink":"https://vim.ink/vim-pattern.html","excerpt":"","text":"模式(pattern)是Vim中一个非常重要的概念，Vim命令 /、:global、:substitute 等均要用到 pattern 的功能。 vim根据 pattern 来匹配文本，可通过 pattern 来指定Vim命令的操作对象。与 pattern 关系密切的正则表达式语法不是本文的重点，读者可以通过其他途径学习正则表达式，但跟Vim正则表达式相关的内容，推荐阅读Vim搜索字符转义与very magic搜索模式。 1. Vim模式与子匹配Vim模式相关概念比较抽象，为了对其进行准确的描述，本文以一个基本的Vim替换命令 :%s/\\v(^$\\n){2,}/\\1\\1 为例来进行介绍。 从Vim替换命令substitute小结一文可知，substitute命令的基本语法是 :[range]s/pattern/目标串/[option]。 在这条替换命令中，除 \\v 外，出现了三个新的符号： ()、{2,} 以及 \\1。 首先，Vim模式中的特殊字符 () 用来标识一个 子模式，任何 () 内部的匹配文本被称作为一个 子匹配，都会被自动保存到一个临时的仓库。 其次，可以用 \\1、\\2 …… \\9 来依次引用被每对 () 捕获的子匹配；不论模式中是否使用了圆括号，元字符 \\0 永远会引用整个匹配。 最后，{n,m} 是用于 pattern 的修饰符号，表示倍数项，意思是匹配 n 个以上匹配源，且尽可能多地进行匹配，但最多匹配不超过 m 个匹配源。在Vim中，通过命令 :h /multi 可以查看更加详细的介绍。 因此，:%s/\\v(^$\\n){2,}/\\1\\1 中第一个子模式为 ^$\\n，表示一个空白行，可以用 \\1 进行引用；{2,} 表示匹配连续两个以上的空白行，且匹配次数无上限；而替换命令substitute的目标模式为 \\1\\1，表示两个 ^$\\n。 所以，Vim命令 :%s/\\v(^$\\n){2,}/\\1\\1 是将整个文档( % )中连续两个以上的空行替换成两个空行。 2. 使用子匹配进行列重排为了加深对Vim模式和子匹配的理解，本文继续介绍一个应用Vim子匹配的实例。 假设有一个 CSV 格式的文件，其中包含了一份含有电子邮箱地址以及姓名的列表，部分数据如下所示。1234last name,first name,emailneil,drew,drew@vimcasts.orgdoe,john,john@example.comyuan,ayawaw,admin@vim.ink 现在假设想交换这些字段的次序，把电子邮箱放到首列，其次是名字，最后一列为姓氏。 这是一个典型的列重排任务，可以使用Vim的 substitute 命令完成。 为了获取到 substitute 命令的操作源模式，首先使用Vim查找命令 / 构建正确的匹配模式 /\\v^([^,]*),([^,]*),([^,]*)$。 在这个模式中，[^,] 会匹配除 , 以外的任何字符。因此，([^,]*) 不仅会匹配 0 次或多次连续的非 , 字符，而且会把捕获到的结果当作子匹配。 因此，搜索命令 /\\v^([^,]*),([^,]*),([^,]*)$ 会匹配到原始 CSV 文件中的每一行，而且原始文件中的姓、名、邮箱3列分别可通过 \\1、\\2 和 \\3 进行引用。 在此基础上，可以使用Vim替换命令 :%s//\\3,\\2,\\1 将原始文件重排成按邮箱、名字、姓氏属性进行排列。 对于 :%s//\\3,\\2,\\1 命令，由于其源pattern为空，因此会使用最近一次的查找模式(参考Vim替换命令substitute重用上次的查找模式)，即 \\v^([^,]*),([^,]*),([^,]*)$，而其目标字符串为 \\3,\\2,\\1，扩展开来的目标串格式为：源pattern中的子匹配3,源pattern中的子匹配2,源pattern中的子匹配1。而这一目标串格式正好能完成列重排的目标。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim模式","slug":"Vim模式","permalink":"https://vim.ink/tags/Vim模式/"},{"name":"vim-pattern","slug":"vim-pattern","permalink":"https://vim.ink/tags/vim-pattern/"},{"name":"vim子匹配","slug":"vim子匹配","permalink":"https://vim.ink/tags/vim子匹配/"},{"name":"子匹配引用","slug":"子匹配引用","permalink":"https://vim.ink/tags/子匹配引用/"},{"name":"vim列重排","slug":"vim列重排","permalink":"https://vim.ink/tags/vim列重排/"}]},{"title":"Vim处理文本之奇偶行删除-Vim使用技巧(17)","slug":"vim-extract-odd-or-even-line","date":"2016-04-14T16:00:00.000Z","updated":"2019-04-27T15:35:46.042Z","comments":true,"path":"vim-extract-odd-or-even-line.html","link":"","permalink":"https://vim.ink/vim-extract-odd-or-even-line.html","excerpt":"","text":"对于一些简单的文本处理需求，使用Vim命令便可以快速实现。在使用Vim提取文本内容一文中，已经介绍了通过 :vglobal 命令来获取特定文本行以及使用 :global 命令将 CSS 文件中所有规则的属性按字母排序。 本文继续介绍使用Vim的 :global 命令来提取所有奇数行或所有偶数行文本，达到奇偶行删除的目的。使用 :normal 命令实现奇偶行删除的内容，推荐阅读Vim处理文本之使用normal命令实现奇偶行删除。 假设有一段如下的《泰坦尼克号》电影对白，需要分别提取出ROSE和JACK的所有台词，并分别保存到两个文件中。 123456789ROSE: I love you Jack.JACK: No... don&apos;t say your good-byes, Rose. Don&apos;t you give up. Don&apos;t do it.ROSE: I&apos;m so cold.JACK: You&apos;re going to get out of this... you&apos;re going to go on and you&apos;re going to make babies and watch them grow and you&apos;re going to die an old lady, warm in your bed. Not here. Not this night. Do you understand me?ROSE: I can&apos;t feel my body.JACK: You must do me this honor... promise me you will survive... that you will never give up... no matter what happens... no matter how hopeless... promise me now, and never let go of that promise.ROSE: I promise.JACK: Never let go.ROSE: I promise. I will never let go, Jack. I&apos;ll never let go. 分析上面待处理的文本内容可以发现，ROSE的台词总是在 1、3、5、7等奇数行，而JACK的台词总在2、4、6、8等偶数行，两人的台词是奇偶行交替出现。 因此，若想单独获取某个人的全部台词，实际上就是要提取出所有奇数行或者偶数行的台词。 Vim命令 :g/^/+d 可以用来删除所有偶数行，而命令 :g/^/d|m. 可以用来删除所有奇数行。 1. :g/^/+d 删除偶数行下面，请跟我一起来分析上述两个简单的Vim命令行命令是如何实现奇偶行删除的功能的。 从Vim教程网上的文章Vim global命令和重复操作可知，global 命令的基本格式为 :[range]g[lobal][!]/{pattern}/[cmd]。 其中，range 表示操作范围，global命令缺省操作范围是整个文件；pattern 用于指定 global 命令要匹配的目标模式；cmd 则表示除 global 命令外的任何 Ex 命令。 global 命令实现的效果是：在指定的 range 范围内，标记所有匹配 pattern 的文本行，并对匹配的行逐行执行 cmd 命令。 对于命令 :g/^/+d 来说，range 是使用缺省值 (整个文档)；pattern 是 ^，表示查找所有行的开头；而待执行的 Ex 命令为 +d，是Vim命令 delete 的缩写形式。 :delete 命令的完整格式为 :[range]d[elete] [x]，表示将 [range] 范围内的所有行删除到寄存器 x 中，缺省的 range 是当前行，+d 表示删除当前行的下一行。具体介绍可参考Vim操作范围和文件范围。 注：在Vim中，除 global 命令缺省操作范围为全文档外，其他 Ex 命令的缺省操作范围都是当前行。 因此，当在Vim中执行 :g/^/+d 命令时，global 命令会从第一行开始执行，从而删除掉第二行。这时候，原本的第三行就会变成新的第二行，global 命令在新的第二行继续执行 +d，原本的第四行也会被删除掉……最终所有的偶数行都会被删除。 2. :g/^/d|m. 删除奇数行接下来分析 :g/^/d|m. 是如何删除掉文件中的所有奇数行。 Vim在实际执行 global 命令时，会先查找所有匹配 {pattern} 的行，并对匹配结果进行标记，最后对每一个标记的行执行 Ex 命令。 但是，如果被标记的行被删除、移动或者合并，这个标记就会被移除，对于标记被移除的行，就不会执行 ex 命令。 :g/^/d 可以理解为 在当前整个文档中执行 d 命令；而 | 用来分割命令，用于在一个行中同时输入多个命令；m 是Vim命令行命令 :move 的缩写形式，完整格式为 :[range]move{address}，表示将 range 范围内的行文本移动到 address 指定的位置，m. 表示移动当前行(缺省range)到当前行(.)，实际上不会造成任何文本变化。参考Vim复制命令copy和移动命令move。 这个操作看起来很怪，其实是为了在执行完 d 操作后，移除下一行被global命令的 pattern 打上的标记，从而避免该行被执行 d 操作。 因此，:g/^/+d 命令首先对匹配的第一行执行删除操作，继续执行下一处匹配(即第二行)时，由于执行了 move 操作，global命令就会跳过这个新的 第一行，而是从 下下一行 再次执行 d命令，如此类推。最终删除掉原始文件中的所有奇数行。 3. 小结介绍了使用Vim :global 命令来实现奇偶行删除或奇偶行分离，重点需要理解 global 命令的执行原理和执行流程：global 命令会在指定的 range 范围内，标记所有匹配 pattern 的文本行，并对匹配的行逐行执行 Ex 命令。 此外，除 global 命令缺省操作范围为全文档外，Vim 其他 Ex 命令的缺省操作范围都是当前行。 这篇文章的主题基于知乎网友zecy写的一篇专栏文章而进行创作，特在此表示感谢。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim奇偶行分离","slug":"Vim奇偶行分离","permalink":"https://vim.ink/tags/Vim奇偶行分离/"},{"name":"vim-global","slug":"vim-global","permalink":"https://vim.ink/tags/vim-global/"},{"name":"global命令原理","slug":"global命令原理","permalink":"https://vim.ink/tags/global命令原理/"},{"name":"g/^/+d","slug":"g-d","permalink":"https://vim.ink/tags/g-d/"},{"name":"g/^/d|m.","slug":"g-d-m","permalink":"https://vim.ink/tags/g-d-m/"}]},{"title":"Vim查找偏移-Vim使用技巧(16)","slug":"vim-search-offset","date":"2015-12-31T16:00:00.000Z","updated":"2019-04-27T15:35:46.144Z","comments":true,"path":"vim-search-offset.html","link":"","permalink":"https://vim.ink/vim-search-offset.html","excerpt":"","text":"默认情况下，每当执行Vim查找命令时，光标总会被定位于匹配的首字母上。 虽然这种缺省操作看起来比较合理，但可能有时候需要将光标定位于查找匹配的结尾或其他相对位置，然后执行某些操作。 Vim 的查找偏移功能用来指定光标相对于找到的匹配的位置，可以灵活指定搜索到目标单词后光标所在的具体位置，使用Vim命令 :h search-offset 可查看官方的Vim查找偏移介绍。 例如，在下面这段文本中，需要将所有出现 lang 的地方扩展为完整的单词 language。 123Aim to learn a new programming lang each year.Which lang did you pick up last year?Which langs would you like to learn? 这是一个典型的使用Vim替换命令 substitute 就可以完成的操作，使用Vim命令 :%s/lang/language/g 即可达到目的。 下面考虑使用Vim点范式和查找偏移实现另外一种方案。 2. 使用Vim查找偏移进行单词替换首先需要明确，在上面这段文字中，有一个单词 langs，按要求应该是将 langs 扩展成 languages。 如果通过某种方式能将光标移动到每个匹配项 lang的结尾字符处，就可以使用Vim插入命令 a 在当前光标后面插入需要增加的内容。 Vim查找偏移命令 /lang/e 会从当前位置往后进行查找，并且将光标置于查找匹配的结尾，然后执行 auage 在当前匹配的结尾处增加字符 uage，将第一个 lang 替换为 language。 此后，使用Vim命令 n. 找到下一处匹配并重复执行上一次的修改命令，最终可完成将当前文档所有 lang 扩展为 language 的任务。 3. Vim查找偏移Vim查找偏移用来指定光标相对于找到的匹配的位置。Vim支持的查找偏移类型包括： Vim查找偏移 光标位置 +[num] 相对于找到的匹配的 [num] 行向下，第一列 -[num] 相对于找到的匹配的 [num] 行向上，第一列 e[+num] 从匹配结束 (end) 处算起，[num] 字符向右 e[-num] 从匹配结束 (end) 处算起，[num] 字符向左 s[+num] 从匹配开始 (start) 处算起，[num] 字符向右 s[-num] 从匹配开始 (start) 处算起，[num] 字符向左 b[+num] 等价于 s[+num] (b 表示 begin) b[-num] 等价于 s[-num] 注：在上面的Vim查找偏移命令中，如果给出了 - 或 + 但省略了 [num]，会使用缺省的值 1。 例如，/test/+1 会将光标移动到查找目标 test 所在行的下一行第一列位置，test/s+2 会将光标移动到目标词 test 中的 s 上，而 /test/b-4 则会将光标移动到 test 前的第 4 个字符。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-search-offset","slug":"Vim-search-offset","permalink":"https://vim.ink/tags/Vim-search-offset/"},{"name":"vim搜索偏移","slug":"vim搜索偏移","permalink":"https://vim.ink/tags/vim搜索偏移/"},{"name":"vim查找偏移","slug":"vim查找偏移","permalink":"https://vim.ink/tags/vim查找偏移/"},{"name":"vim正则表达式查找","slug":"vim正则表达式查找","permalink":"https://vim.ink/tags/vim正则表达式查找/"}]},{"title":"Vim增量查找与incsearch实时查找预览-Vim入门教程(43)","slug":"vim-incsearch","date":"2015-11-10T16:00:00.000Z","updated":"2019-04-27T15:35:46.087Z","comments":true,"path":"vim-incsearch.html","link":"","permalink":"https://vim.ink/vim-incsearch.html","excerpt":"","text":"缺省情况下，在输入查找模式时，Vim 不会进行查找，只有当按下回车键后才会立即进行目标模式搜索。 1. incsearch即时搜索预览incsearch 选项会让 Vim 根据已经在查找域中输入的文本，预览第一处匹配目标；每当新输入一个字符时，Vim 会即时更新预览内容。 在上面的Vim教程示例中，当在查找域中输入 car 之后，Vim 会把第一处匹配高亮起来，即本例中的单词 car。 一旦继续输入字符 r，由于当前的高亮单词不再匹配这一模式，因此，Vim 将跳转到下一个匹配的单词，这一次是 carrot。如果此时按下 Esc 键，查找提示符将会消失，光标也将回退到位于行首的起始位置。但如果按回车键执行这条Vim查找命令的话，光标会跳转到单词 carrot 的首字母上。 2. 检查是否存在目标匹配Vim 这种即时的反馈可以在真正执行查找前预览第一处匹配，且不用移动光标，这在某些场景下是非常有用的功能。 试想一下，单词 car 与 carrot 可能在文件中相隔几十或上百行，一旦在查找域中将 car 更新为 carr，Vim 将不得不对文档进行滚动才将单词 carrot 显示出来。假设我只想确认单词 carrot 是否在当前文档中出现，却不想移动光标，该怎么办呢？ 当 incsearch 选项被启用时，只需简单地调出查找提示符，并尽可能多地输入组成单词 carrot 的字符，直到该单词首次出现在当前屏幕。一旦找到该单词，只需按下 Esc，即可马上结束查找并返回原位，从而避免移动当前鼠标位置，脱离当前工作的上下文环境。 3. 根据预览结果自动补全查找域通过Vim选项 incsearch 打开实时查找预览的功能后，可以使用快键键 &lt;Ctrl-r&gt;&lt;Ctrl-w&gt; 来根据预览结果对查找域自动补全。 在30个Vim常用命令和使用技巧整理曾有介绍，&lt;Ctrl-r&gt;&lt;Ctrl-w&gt; 可以把光标所在当前单词插入Vim命令行。 因此，如果想完整查找某个单词，但是在输入前面几个字符后，基于Vim的即时查找预览功能已经找到了第一处匹配目标，此时，&lt;Ctrl-r&gt;&lt;Ctrl-w&gt; 便可将找到的第一处目标填充到查找模式，减少使用键盘输入字母的次数。 关于Vim查找和搜索，可以参考Vim教程网上的文章Vim搜索命令使用方法和技巧、Vim搜索字符转义与very magic搜索模式。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-incsearch","slug":"Vim-incsearch","permalink":"https://vim.ink/tags/Vim-incsearch/"},{"name":"vim实时搜索","slug":"vim实时搜索","permalink":"https://vim.ink/tags/vim实时搜索/"},{"name":"vim查找预览","slug":"vim查找预览","permalink":"https://vim.ink/tags/vim查找预览/"}]},{"title":"怎么删除Vim文件中显示的^M字符-Vim技巧(15)","slug":"vim-delete_m","date":"2015-09-25T16:00:00.000Z","updated":"2019-04-27T15:36:41.651Z","comments":true,"path":"vim-delete_m.html","link":"","permalink":"https://vim.ink/vim-delete_m.html","excerpt":"","text":"使用Vim打开在Windows系统下编辑过的文件时，常常会在文件的行尾看到一个 ^M 符号。怎么删除Vim文件中显式的 ^M 符号呢？ Windows操作系统下保存的文件行尾是 回车 加 换行，即 \\r\\n，而linux下的文件行尾只有换行，即 \\n。 两种操作系统行尾符号的差异导致了 ^M 的出现。但是需要注意，^M 只是Vim显示出来的字符样式， 在Vim中，使用组合键 &lt;ctrl&gt;-v &lt;ctrl&gt;-m 才能打出表示行尾的 ^M。 可以使用Vim替换命令substitute来删除行尾的 ^M。 如果需要全文档删除，可以使用Vim命令 :%s/^M$//g 来实现。 若对上述命令存在不理解，建议阅读Vim教程网上关于Vim替换命令substitute的语法和实例说明。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim-M行尾","slug":"Vim-M行尾","permalink":"https://vim.ink/tags/Vim-M行尾/"},{"name":"vim结束符","slug":"vim结束符","permalink":"https://vim.ink/tags/vim结束符/"},{"name":"vim文件乱码","slug":"vim文件乱码","permalink":"https://vim.ink/tags/vim文件乱码/"},{"name":"vim-substitute","slug":"vim-substitute","permalink":"https://vim.ink/tags/vim-substitute/"},{"name":"Vim实用技巧","slug":"Vim实用技巧","permalink":"https://vim.ink/tags/Vim实用技巧/"}]},{"title":"Vim搜索字符转义与very magic搜索模式-Vim使用技巧(14)","slug":"vim-very-magic","date":"2015-05-31T16:00:00.000Z","updated":"2019-04-27T15:34:36.607Z","comments":true,"path":"vim-very-magic.html","link":"","permalink":"https://vim.ink/vim-very-magic.html","excerpt":"","text":"假设需要在一个CSS样式文件中查找所有的颜色代码，部分查找目标如下所示。 123a &#123; color: #0000EE; &#125;body &#123; color: #3c3c3c; &#125;strong &#123; color: #000; &#125; 为此，需要构造一个正则表达式，用于匹配 1个 # 字符以及紧随其后的 3 个或 6 个十六进制字符的目标串 (包括所有数字以及大写或小写的字母 A 到 F)。 1. 使用 magic 搜索模式查找Vim默认设置下，/#\\([0-9a-fA-F]\\{6}\\|[0-9a-fA-F]\\{3}\\) 可以查找到所有的目标颜色代码。 在上面的Vim正则表达式搜索命令中，一共用到了 3 类括号：[]、() 和 {}，而这 3 类括号都是正则表达式中的特殊字符 (有特殊含义的字符)，若要匹配这些特殊字符，必须首先使 \\ 进行转义。 正则表达式中，方括号 [] 用于定义待匹配的字符范围，原括号 () 用于标记一个子表达式的开始和结束位置，而花括号 {} 用于指定匹配的长度。 对于Vim的正则表达式引擎来说，方括号 [] 缺省具有特殊含义，不需要转义；圆括号 () 默认会按原义匹配字符，因此需要使用 \\ 转义，使其具有特殊含义；花括号 {} 也一样需要使用 \\ 转义，但与之对应的闭括号则不用，因为 Vim 会自动推测我们的意图。这就是Vim的 magic 搜索模式。 magic 搜索模式会自动为某些额外的符号赋予特殊含义，例如 . 、*、[ 等。magic 模式的初衷是想能在Vim中更容易地构造简单的正则表达式，但它却没能为诸如 +、?、(、)、{ 等符号赋予特殊含义，这些符号还必须经过转义才具有特殊含义。 这种”半成品”性质的实现，使得在Vim下构建正则表达式搜索模式，仍然十分麻烦，从上面查找颜色代码的命令就可感受一二。 2. 使用 very magic 搜索模式查找如上所述，magic 搜索模式下，字符转义的规则制定得比较混乱，容易混淆。 可以使用 \\v 开关激活 very magic 搜索模式，统一所有特殊符号的规则： very magic 搜索模式下，除下划线 _、大小写字母以及数字 0 到 9 之外的所有字符都具有特殊含义。 例如，使用 \\v 模式开关查找上述匹配十六进制颜色代码的正则表达式可简化为：/\\v#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})。 由于出现在起始位置的 \\v 开关，位于它后面的所有字符都具有特殊含义，用于转义的反斜杠字符就可以去掉，正则表达式的可读性更强了。 3. 使用 very nomagic 搜索模式查找上面介绍的正则表达式中保留使用的特殊字符，在按模式查找时用起来很方便，但如果想按原义查找对应字符时，又该如何操作呢？ 例如，如果想在下面的一段文字中查找 a.k.a，使用Vim命令 /a.k.a. 并不能立马精确地找到目标字符串，因为符号 . 在正则表达式中具有特殊含义，它会匹配任意字符，因此单词 backward 也会被搜索到。 12The N key searches backward......the \\v pattern switch (a.k.a. very magic search)... 当然，可以使用转义的方法消除 . 字符的特殊含义，即 /a\\.k\\.a\\.。 一种更简单的使用方法是使用原义开关 \\V 激活Vim的very nomagic 搜索模式。 \\V 选项会使得其后的模式中有且只有反斜杠 \\ 具有特殊意义，即消除了附加在 .、* 以及 ? 等大多数字符上的特殊含义。 使用 \\V 原义开关精确搜索 a.k.a 的命令可以简化为：/\\Va.k.a.。 介绍完上面提到的 Vim magic 搜索模式、very magic 搜索模式和 very nomagic 搜索模式后，是不是反而会觉得规则太多，没法快速地选择所需要的模式。 其实，very magic 和 very nomagic 搜索模式分别是Vim对正则表达式特殊字符的两种极端处理方式。 对于Vim的正则表达式搜索，一个通用的原则是：如果想按正则表达式查找，就用模式开关 \\v，如果想按原义查找文本，就用原义开关 \\V。 4. 界定单词的边界有些单词，尤其是短词，常常会出现在其他单词内部，比如，the 就会在 these、they、their 等单词中出现。如果想精确匹配 the 这个完整的单词而不是其他词的组成部分，可以使用单词定界符。 在 very magic 搜索模式下，用 &lt; 与 &gt; 符号表示单词定界符。 因此，如果将查找命令改为 /\\v&lt;the&gt;，就会精确查找到 the 这个单词。 其实，用单词定界符构造精确查找模式的方式早就已经介绍并使用过了。在Vim搜索命令使用方法和技巧一文中已经介绍过，Vim普通模式下使用 * 和 # 可以用于正向或反向精确查找当前光标所在单词。 当然，在 magic、以及 very nomagic 搜索模式下，&lt; 与 &gt; 都必须使用 \\ 进行转义才能将其作为单词定界符，而如果想在 very magic 搜索模式下匹配尖括号本身的话，也必须将其转义才有单词定界符的含义。如果你还没理解这两句话，建议再细读下上面关于magic、以及 very nomagic 搜索模式的规则介绍。 5. 界定匹配的边界在使用Vim的某些场景下，可能想指定一个范围较广的模式，但只对匹配结果的一部分内容感兴趣。 应该明确，当我们谈论一个模式的时候，指的是在查找域输入的正则表达式 (或按原义匹配的文本)；而匹配，是指在文档中被高亮显示的文本内容。 一个匹配的边界通常对应一个模式的起始与结尾。但可以使用元字符 \\zs 与 \\ze 对匹配进行裁剪，使其成为这个完整模式的一个子集。 元字符 \\zs 标志着一个匹配的起始，而元字符 \\ze 则用来界定匹配的结束。将二者相结合，可以让我们先定义一个模式来匹配一个较大的文本范围，然后再收窄匹配范围。例如： 如果使用Vim查找命令 /Practical Vim，则文档中所有出现 Practical Vim 的地方都会被搜索出来。一旦将查找模式改为 /Practical \\zsVim，则只有单词 Vim 会被高亮选中，而单词 Practical 会被排除于匹配之外，但它仍是模式的一部分。 如此一来，只有紧跟着单词 Practical 的 Vim 才会被查找到，而其他前面不是 Practical 的 Vim 则不会被匹配。这与通过 /Vim 命令进行简单查找的结果有很大不同。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim正则表达式","slug":"vim正则表达式","permalink":"https://vim.ink/tags/vim正则表达式/"},{"name":"Vim-very-magic","slug":"Vim-very-magic","permalink":"https://vim.ink/tags/Vim-very-magic/"},{"name":"vim-nomagic","slug":"vim-nomagic","permalink":"https://vim.ink/tags/vim-nomagic/"},{"name":"vim搜索模式","slug":"vim搜索模式","permalink":"https://vim.ink/tags/vim搜索模式/"},{"name":"vim搜索转义","slug":"vim搜索转义","permalink":"https://vim.ink/tags/vim搜索转义/"}]},{"title":"怎么合适地使用Vim保存文件？-Vim使用技巧(13)","slug":"vim-write-file","date":"2015-04-20T16:00:00.000Z","updated":"2019-04-27T15:35:46.181Z","comments":true,"path":"vim-write-file.html","link":"","permalink":"https://vim.ink/vim-write-file.html","excerpt":"","text":"Vim使用最频繁的命令之一应该是 :w。 Vim命令行命令 :w 是 :write 的缩写形式，用于将当前Vim缓冲区的内容写到磁盘文件中，即完成保存文件的操作。 别小看了这么一个简单又常见的写文件操作，合理地使用Vim命令保存文件也是一个值得深入研究的话题。Vim教程网总结了多种保存文件的Vim命令及其使用场景，供大家各取所需。 (1) 保存文件，即把当前缓冲区内容写入文件：:w (2) 强制保存文件，即便是只读文件： :w! (3) 保存文件并退出：:wq (4) 保存文件并退出：:x 注 :x 命令是程序员最应该使用的命令，因为如果文件没有修改，:x 保存文件时并不会修改文件的时间戳，因此不会触发重新编译；而 :wq 命令不管文件有没有被修改，都会修改时间戳，也即会触发重新编译，而这是毫无意义的。 (5) 不保存文件，丢失所有的修改而强制退出：:q! (6) 将打开的所有缓冲区分别写入对应文件，即保存所有打开的文件：:wall 或缩写形式 :wa。没有文件名的缓冲区会报错，只读的缓冲区不会被写入。 (7) 将打开的所有缓冲区分别写入对应文件，即保存所有打开的文件：:xall 或缩写形式 :xa :xa 命令与 :wa 的区别等价于 :x 与 :wq 命令的区别 (8) 将当前缓冲区内容另存为 new.txt：:w new.txt (9) 将当前缓冲区内容另存为 new.txt：:saveas new.txt 或缩写形式 :sav new.txt，如果写操作成功，则复位 ‘readonly’ 标记 (10) 将当前缓冲区的指定范围(range)内的内容另存为 new.txt：:[range] w new.txt，关于文件范围，可以参考Vim操作范围和文件范围 (11) 将当前缓冲区的指定范围(range)内的内容追加到另一个文件 another.txt：:[range] w &gt;&gt; another.txt :w 命令缺省的 [range] 是整个缓冲区，即 1,$ (12) 当且仅当缓冲区内容被修改时才写入文件：:update 或缩写形式 :up :update 命令和 :w 类似，也支持指定范围和强制保存，其完整形式为：:[range]up[date][!] [++opt] [&gt;&gt;] [file] 注：Vim命令的表达形式中，[] 内的内容表示可以缺省。关于 :write 命令的更多内容，推荐阅读Vim打开和保存文件。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-write-command","slug":"Vim-write-command","permalink":"https://vim.ink/tags/Vim-write-command/"},{"name":"vim-update","slug":"vim-update","permalink":"https://vim.ink/tags/vim-update/"},{"name":"vim-saveas","slug":"vim-saveas","permalink":"https://vim.ink/tags/vim-saveas/"},{"name":"Vim另存为","slug":"Vim另存为","permalink":"https://vim.ink/tags/Vim另存为/"},{"name":"vim保存命令","slug":"vim保存命令","permalink":"https://vim.ink/tags/vim保存命令/"}]},{"title":"Vim使用位置标记实现打开文件自动恢复上次的光标位置-Vim使用技巧(12)","slug":"vim-recovery-cusor-position","date":"2015-04-14T16:00:00.000Z","updated":"2019-04-27T15:36:41.687Z","comments":true,"path":"vim-recovery-cusor-position.html","link":"","permalink":"https://vim.ink/vim-recovery-cusor-position.html","excerpt":"","text":"使用Vim工作时往往需要退出Vim处理一些其他的事情后再重新打开Vim继续工作。 这种情况下，大家都会希望 Vim 重新打开刚刚关闭的文件时能将光标恢复到上次关闭文件时所停留的位置。 在Vim位置标记mark详解介绍过，Vim 自带的标记 `&quot; 表示上一次关闭当前缓冲区时的光标位置。 由于Vim位置标记是 Vim 普通模式下的命令，因此为了在Vim配置文件中使用位置标记，需要用到Vim normal命令来在命令行模式下执行普通模式命令(不使用任何按键映射)。 为了在Vim打开文件时自动执行命令，使用Vim autocmd命令监听 BufReadPost 事件 (开始编辑新缓冲区，读入文件后)。 基于上述分析，可以使用命令 autocmd BufReadPost * normal! g`&quot; 实现打开文件时自动恢复上次退出文件时的光标位置。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim-autocmd","slug":"vim-autocmd","permalink":"https://vim.ink/tags/vim-autocmd/"},{"name":"vim位置标记","slug":"vim位置标记","permalink":"https://vim.ink/tags/vim位置标记/"},{"name":"Vim-mark","slug":"Vim-mark","permalink":"https://vim.ink/tags/Vim-mark/"},{"name":"vim恢复光标位置","slug":"vim恢复光标位置","permalink":"https://vim.ink/tags/vim恢复光标位置/"},{"name":"vim自动执行","slug":"vim自动执行","permalink":"https://vim.ink/tags/vim自动执行/"}]},{"title":"Vim可视化模式与面向列编辑文本-Vim使用技巧(11)","slug":"vim-column-edit","date":"2015-02-22T16:00:00.000Z","updated":"2019-04-27T15:36:41.628Z","comments":true,"path":"vim-column-edit.html","link":"","permalink":"https://vim.ink/vim-column-edit.html","excerpt":"","text":"任何编辑器都可以操作以行为单位的文本，但可以以列为单位进行文本操作的编辑器并不多。 Vim面向列块的可视模式模式允许直接对文件中的列块进行操作，可以在Vim可视化模式下选中的区域执行相同的操作，从而达到同时往任意行或任意列插入或修改文本的目的。 1. Vim可视化模式简介如Vim可视化模式-Vim入门教程所介绍，Vi/Vim可视化模式(Visual Mode)下可以选择一块编辑区域，然后对选中的文件内容执行插入、删除、替换、改变大小写等操作。 具体来说，在Vim普通模式下按 v 进入字符选择模式，按 V 进入行选择模式，按 &lt;Ctrl&gt; + v 块选择模式。 2. 使用Vim生成markdown表格例如，Vim教程网在写博客内容时，需要把下面的纯文本表格修改为markdown语法格式。 1234Chapter PageNormal mode 15Insert mode 31Visual mode 44 为了实现上述目的： (1) 首先, 需要新增一行 “-“ 用于分割表头和表内容 将光标移动到表的第一行执行 yyp 快速复制顶行并粘贴一份副本，使用按 V 进入行选择可视模式后执行 r- 将整行内容替换为 - (2) 其次，需要在每一行增加多列 “|“，用于分割表格各列内容 先使用 normal 命令在目标行的行首新增 |，:1,5 normal I| 命令可以实现这一目的，关于这条 normal 命令的具体介绍，可以参考Vim normal命令和重复操作 再按 &lt;Ctrl&gt;-v 进入Vim列块可视模式，然后按 j 往下移动光标到最后一个目标行，最后使用Vim替换命令 r| 在选中的各列空格字符替换为 “|“ 按 gv 重选上一次由可视化模式 &lt;Ctrl&gt;-v 选择的文本范围，再按 $ 跳转到行尾后按 A 进入行尾插入模式，输出 | 后即可 完成上述两个步骤后，原始的纯文本表格已经被修改为以下内容。 如果不使用Vim而改用其他编辑器，不知道要花多少步骤才能完成上述操作？欢迎留言进行分享。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim可视化模式","slug":"Vim可视化模式","permalink":"https://vim.ink/tags/Vim可视化模式/"},{"name":"vim-markdwon","slug":"vim-markdwon","permalink":"https://vim.ink/tags/vim-markdwon/"},{"name":"列编辑","slug":"列编辑","permalink":"https://vim.ink/tags/列编辑/"},{"name":"vim表格","slug":"vim表格","permalink":"https://vim.ink/tags/vim表格/"}]},{"title":"Vim命令行模式与Ex命令-Vim入门教程(42)","slug":"vim-ex-command","date":"2015-02-13T16:00:00.000Z","updated":"2019-04-27T15:35:46.039Z","comments":true,"path":"vim-ex-command.html","link":"","permalink":"https://vim.ink/vim-ex-command.html","excerpt":"","text":"在 Vim 普通模式下按下 : 键会切换到命令行模式。Vim 命令行模式和 shell 下的命令行有些类似，可以输入一条命令后按回车键执行。按 &lt;Esc&gt; 键可从命令行模式切换回普通模式。 Vim 的先祖是开创了区分模式编辑范例的 vi，而 vi 又奉一个名为 ex 的行编辑器为祖先。 1. Vim Ex命令介绍出于历史原因，在 Vim 命令行模式中执行的命令又被称做 Ex 命令。Ex 命令都需要先输入 : 后按回车才能执行，按 / 调出查找提示符或用 &lt;Ctrl-r&gt;= 访问表达式寄存器时，命令行模式也会被激活，但这两个并不是 Ex 命令。 可以用 Ex 命令读写文件 (:edit 和 :write)、创建新标签页 (:tabnew)、分割窗口 (:split)、操作参数列表 (:prev 和 :next) 及缓冲区列表 (:bprev 和 :bnext)。事实上，Vim 为几乎所有功能都提供了相应的 Ex 命令，通过命令 :h ex-cmd-index 可获得完整的Vim Ex命令列表。 Vim 普通模式命令一般只操作当前字符或当前行，而很多 Ex 命令可以用行号、位置标记或查找模式指定要操作的范围，这意味着无需移动光标就可以使用 Ex 命令在任意位置、对多个行同时执行某种操作。 因此，相比于普通模式下的 Vim 命令，Ex 命令作用范围更广，操作距离更远。 2. Ex命令操作范围Ex 命令的优点之一是可以在某一范围内的所有行上执行，可以通过以下几种方式指定操作范围。 2.1 用行号作为地址输入一条只包含数字的 Ex 命令，Vim 会把这个数字解析成一个地址，并把光标移动到该数字所指定的行上。例如，Vim命令 :3p 会把光标移到第 3 行，然后显示该行的内容。 2.2 用地址指定一个范围可以用行号来指定一个范围 ({start},{end})，如 :2,5p 会打印从第 2 行到第 5 行之间的每一行的内容，且运行完这条命令后光标将停留在第 5 行。 2.3 用高亮选区指定范围使用Vim可视化模式选择待操作目标范围后按下 : 键，命令行上会预先填充一个范围 :&#39;&lt;,&#39;&gt;，用于代表高亮选区的范围，例如，:&#39;&lt;,&#39;&gt;p 用于打印高亮选择的文档内容。 2.4 用模式指定范围Vim 接受以搜索模式作为一条 Ex 命令的地址，例如，:/&lt;html&gt;/,/&lt;\\/html&gt;/p 指定的操作范围是由 html 开标签所在的行开始，到对应闭标签 /html 所在的行结束。 2.5 用偏移对地址进行修正假设只想对位于 之间的每一行都运行一条 Ex 命令，但不包括 及 标签所在的行，那么可以为之加上偏移。例如，:/&lt;html&gt;/+1,/&lt;\\/html&gt;/-1p 可以实现该目的。 地址偏移的一般形式为 :{address}+n，如果 n 被省略，缺省偏移量为 1。{address} 可以是一个行号、一个位置标记、或是一个查找模式。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-ex-command","slug":"Vim-ex-command","permalink":"https://vim.ink/tags/Vim-ex-command/"},{"name":"vim命令行模式","slug":"vim命令行模式","permalink":"https://vim.ink/tags/vim命令行模式/"},{"name":"vim操作范围","slug":"vim操作范围","permalink":"https://vim.ink/tags/vim操作范围/"},{"name":"vim地址偏移","slug":"vim地址偏移","permalink":"https://vim.ink/tags/vim地址偏移/"},{"name":"vim-print","slug":"vim-print","permalink":"https://vim.ink/tags/vim-print/"}]},{"title":"Vim中的重复操作与高效率-Vim使用技巧(10)","slug":"vim-repeat-operation","date":"2015-02-10T16:00:00.000Z","updated":"2019-04-27T15:36:41.699Z","comments":true,"path":"vim-repeat-operation.html","link":"","permalink":"https://vim.ink/vim-repeat-operation.html","excerpt":"","text":"本质上讲，我们需要完成的工作大部分都是重复性的。凡是可以简化重复性操作的方式，都会成倍地提供工作效率。 Vim 会记录最近执行的操作，对重复性操作进行了优化，让我们用一次按键就能重复上次的工作，这是我认为Vim被称为高效率编辑器的重要原因之一 (Edit Text at the speed of thought)。 如vim重复操作命令所介绍，Vim普通模式下的 . 命令可以用于重复上次的修改，这里提到的修改对象可以是字符、整行，甚至是整个文件，按 u 回退操作。 . 命令不会重复由 Vim 命令行中做出的修改，若需要重复执行上次的 Ex 命令只需按 @: 即可。@: 命令其实是用到了 : 寄存器，: 寄存器总是保存着最后执行的命令行命令 (参见 :h quote_:)。 在运行过一次 @: 后可以用 @@ 命令来重复执行上次的 Ex 命令，但无直接的回退方式。 普通模式下可以使用命令 &amp; 重新执行上次的Vim替换操作 :substitute，按 u 回退操作。 Vim普通模式下的 ; 命令会正向重复查找上次 f 命令所查找字符，按 , 回退光标位置。 Vim普通模式下的 n 命令在Vim缓冲区中重复查找下一处匹配项，按 N 回退光标位置。 Vim宏可通过录制操作序列到某个Vim寄存器 a 中，然后使用命令 @a 回放录制的宏，实现重复操作一系列修改，用 @@ 重复最近调用过的宏，按 u 回退操作。 gv 命令可以用于重选上一次由可视化模式选择的文本范围，按 Esc 退出可视化模式。 很多Vim Ex 命令(即Vim命令行命令)可以用行号、位置标记或是查找模式来指定要执行操作的开始位置及结束位置，实现一条命令同时操作多行。 Vim命令行命令 global 允许在某个指定模式的所有匹配行上运行 Ex 命令，而 normal 命令允许在Vim命令行模式下对指定范围内的每行执行普通模式下的操作，均可用于高效完成Vim下的重复操作，更多内容可以参看Vim global命令和重复操作 以及 Vim normal命令。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim宏","slug":"vim宏","permalink":"https://vim.ink/tags/vim宏/"},{"name":"vim-normal","slug":"vim-normal","permalink":"https://vim.ink/tags/vim-normal/"},{"name":"vim-global","slug":"vim-global","permalink":"https://vim.ink/tags/vim-global/"},{"name":"Vim重复操作","slug":"Vim重复操作","permalink":"https://vim.ink/tags/Vim重复操作/"},{"name":"vim重复查找","slug":"vim重复查找","permalink":"https://vim.ink/tags/vim重复查找/"}]},{"title":"Vim文件类型检测原理及应用-Vim入门教程(41)","slug":"vim-filetype","date":"2015-01-21T16:00:00.000Z","updated":"2019-04-27T15:35:46.054Z","comments":true,"path":"vim-filetype.html","link":"","permalink":"https://vim.ink/vim-filetype.html","excerpt":"","text":"在vimrc配置入门一文介绍过，配置项 filetype plugin indent on 可打开Vim的文件类型检测功能。每当一个新的或已经存在的文件被编辑时，Vim 都会试图识别该文件的类型，并设置 filetype 选项，同时也触发 FileType 事件 (该事件可以设置语法高亮、特定选项等)。 其实，上面这条命令可以分解成三条基本命令：filetype on、filetype plugin on 和 filetype indent on。可通过命令 :filetype 查看当前Vim的文件类型检测功能有没有打开。 filetype onfiletype on 配置项是 Vim 文件类型检测功能的开关。执行该命令时，Vim 实际上执行的是 $VIMRUNTIME/filetype.vim 脚本。filetype.vim 脚本使用了autocmd命令自动根据文件名判断文件的类型，若无法根据文件名检测到文件类型，则会继续调用 $VIMRUNTIME/scripts.vim 脚本来根据文件的内容判断文件类型。 若通过上述步骤 Vim 仍然没能正确检测到文件的类型，则需要通过命令 :set filetype 来手工指定文件类型。例如，假设 main.cpp.bak 文件是一个C++的源文件，可以用命令 :set filetype=cpp 指定该文件的类型。 除此之外，还可以在文件中加入模式行来指明文件的类型。所谓Vim模式行，是指 Vim 在打开文件时，会自动在该文件首、尾的若干行 (具体行数由 modelines 选项决定，默认为5)检测是否具有 Vim 特殊标记的行。如果有检测到模式行，Vim 就会使用模式行中定义的选项值来修改该缓冲区的选项。 例如，Vim 所有的帮助文档源文件的最后一行都是类似 vim:tw=78:ts=8:ft=help:norl: 这样的模式行。 因此，针对上面举例的 main.cpp.bak 文件，我们可以在该文件的第一行或最后一行加上 /* vim: set fc=cpp */，要显式指定这个文件的类型。 注：/* 与 vim: 间必须有空格，*/ 与 set ft=c 间也需要有至少一个空格，这是Vim模式行格式的要求。 filetype plugin onfiletype plugin on 用于 Vim 打开加载文件类型插件功能。当这个选项打开时，Vim 会根据检测到的文件类型，在runtimepath中搜索该文件类型的所有插件并执行它们。 Vim 执行 filetype plugin on 命令时实际上是在执行 $VIMRUNTIME/ftplugin.vim 脚本。ftplugin.vim 脚本中设置了autocmd自动命令，指定在runtimepath中搜索对应文件类型的插件。runtimepath的定义在不同的系统上不一样，对UNIX系统来说，这些路径包括：$HOME/.vim、$vim/vimfiles、$VIMRUNTIME、$vim/vimfiles/after、$HOME/.vim/after。 例如，当对一个c类型的文件设置 filetype plugin on 时，Vim 会在上述这几个目录的ftplugin子目录中搜索所有名为 c.vim、c_*.vim 和 c/*.vim 的脚本并执行它们。在搜索时，Vim 按目录在runtimepath中出现的顺序进行搜索。默认情况下，Vim 会执行 $vimRUNTIME/ftplugin/c.vim 脚本，设置c语言的注释格式、智能补全函数等等。 filetype indent onfiletype indent on 用于指定 Vim 为不同类型的文件定义不同的缩进格式。 Vim 执行该命令时实际上也是通过脚本 $VIMRUNTIME/indent.vim 来完成加载。与上面介绍的 filetype plugin on 选项类似，indent.vim脚本也通过设置autocmd自动命令在 runtimepath 的 indent 子目录中搜索缩进设置。对于c类型的文件来说，该脚本只是打开了 cindent 选项。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim-filetype","slug":"vim-filetype","permalink":"https://vim.ink/tags/vim-filetype/"},{"name":"vim-filetype-indent","slug":"vim-filetype-indent","permalink":"https://vim.ink/tags/vim-filetype-indent/"},{"name":"vim文件类型检测","slug":"vim文件类型检测","permalink":"https://vim.ink/tags/vim文件类型检测/"},{"name":"vim-autocmd","slug":"vim-autocmd","permalink":"https://vim.ink/tags/vim-autocmd/"},{"name":"vim模式行","slug":"vim模式行","permalink":"https://vim.ink/tags/vim模式行/"}]},{"title":"Vim模糊搜索插件ctrlp使用方法-Vim插件(12)","slug":"vim-ctrlp-plugin","date":"2014-12-04T16:00:00.000Z","updated":"2019-04-27T15:36:41.646Z","comments":true,"path":"vim-ctrlp-plugin.html","link":"","permalink":"https://vim.ink/vim-ctrlp-plugin.html","excerpt":"","text":"ctrlp是一款支持对文件、缓冲区( :CtrlPBuffer )、MRU(Most Recently Used)文件( :CtrlPMRU )和标签进行模糊搜索/查找的Vim插件，也支持通过正则表达式搜索 ( &lt;Ctrl&gt;-r 进行切换)，同类软件还有模糊搜索插件fzf等。 ctrlp使用纯vimscript语言实现，依赖少且配置简单，是一款使用量非常大的Vim插件。 1. ctrlp安装可以使用Vim插件管理器Vundle或vim-plug安装ctrlp插件。 若使用Vundle安装ctrlp，需要在Vim配置文件 ~/.vimrc 中新增 Plugin &#39;ctrlpvim/ctrlp.vim&#39;；若使用vim-plug安装ctrlp，需要在Vim配置文件中新增 Plug &#39;ctrlpvim/ctrlp.vim&#39;，具体安装方法可以参考Vim教程网上对应插件管理器的使用方法介绍。 完整完ctrlp插件后，可以在Vim命令行模式下使用命令 :help ctrlp.txt 获取ctrlp的官方说明文档，这是个非常详细的文档，建议细读。 2. ctrlp命令介绍在Vim命令行模式下，可通过以下几种方式启动ctrlp： Vim命令行模式下使用命令 :CtrlP 或 :CtrlP 路径 可以调用ctrlp并进入查找文件模式，可通过设置 let g:ctrlp_cmd = &#39;CtrlP&#39; 来指定打开ctrlp的Vim命令行命令 Vim命令行模式下使用命令 :CtrlPBuffer 或 :CtrlPMRU 可以调用ctrlp并分别进入查找缓冲区 和 查找 MRU文件模式 Vim命令行模式下使用命令 :CtrlPMixed 可同时搜索 文件、缓冲区 和 MRU文件 此外，在Vim 普通模式下，默认按下 &lt;Ctrl&gt;+p 即可打开ctrlp搜索窗口。可通过设置 let g:ctrlp_map = &#39;&lt;c-p&gt;&#39; 来修改Vim普通模式下默认打开ctrlp的Vim按键映射(change the mapping to invoke CtrlP in Normal mode)。 默认设置下，ctrlp的窗口显示在Vim窗口的底端(bottom)，可以通过 g:ctrlp_match_window 选项设置窗口的位置，例如，let g:ctrlp_match_window = &#39;top,order:ttb,min:1,max:10,results:20&#39; 设置ctrlp窗口显示在顶端(top)，模糊搜索结果按从上到下(ttb, top to bottom)的顺序显示，高度最小为1行，最大为10行，搜索结果最多显示20行。 一旦打开ctrlp，即可输入要寻找的文件名使用ctrlp进行模糊搜索，可以使用以下命令进行操作： 按下 Esc 或 &lt;Ctrl-c&gt; 可退出ctrlp，返回到Vim窗口中 按下 F5 用于刷新当前操作路径下的文件缓存，可以使用命令 let g:ctrlp_cache_dir = $HOME.&#39;/.cache/ctrlp&#39; 设置缓存文件存放路径 使用 &lt;Ctrl-k&gt; 和 &lt;Ctrl-j&gt; 在模糊搜索结果列表中上下移动 (当然也可以使用键盘上的上下方向键) 使用 &lt;Ctrl-f&gt; 和 &lt;Ctrl-b&gt; 在查找文件模式、查找缓冲区模式、查找MRU文件几种模式间进行切换 (cycle between modes) 使用 &lt;Ctrl-d&gt; 在 路径匹配 和 文件名匹配 之间切换 (switch to filename search instead of full path) ，可以通过设置 let g:ctrlp_by_filename = 1 来设置默认使用 文件名匹配 模式进行模糊搜索 使用 &lt;Ctrl-r&gt; 在 字符串模式 和 正则表达式模式 之间切换 (switch to regexp mode) 使用 &lt;Ctrl-t&gt; 在新的Vim标签页中打开文件 (open the selected entry in a new tab) 使用 &lt;Ctrl-v&gt; 垂直分割窗口打开文件 使用 &lt;Ctrl-x&gt; 水平分割窗口打开文件 使用 &lt;Ctrl-p&gt; 或` 选择前或后一条历史记录 &lt;Ctrl-y&gt; 用于当搜索的目标文件不存在时创建文件及父目录 (create a new file and its parent directories) 使用 &lt;Ctrl-z&gt; 标记或取消标记多个文件， 标记多个文件后可以使用 &lt;Ctrl-o&gt; 同时打开多个文件 (mark/unmark multiple files and to open them)","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-ctrlp","slug":"Vim-ctrlp","permalink":"https://vim.ink/tags/Vim-ctrlp/"},{"name":"vim模糊搜索","slug":"vim模糊搜索","permalink":"https://vim.ink/tags/vim模糊搜索/"},{"name":"vim-fzf","slug":"vim-fzf","permalink":"https://vim.ink/tags/vim-fzf/"},{"name":"vim插件推荐","slug":"vim插件推荐","permalink":"https://vim.ink/tags/vim插件推荐/"}]},{"title":"Vim执行shell命令及使用Vim批量更改文件名-Vim入门教程(40)","slug":"vim-shell","date":"2014-11-10T16:00:00.000Z","updated":"2019-04-27T15:35:46.153Z","comments":true,"path":"vim-shell.html","link":"","permalink":"https://vim.ink/vim-shell.html","excerpt":"","text":"可以在 Vim 内部调用外部程序(shell命令)，还可以把缓冲区的内容作为标准输入传递给外部命令，或是把外部命令的标准输出导入到Vim缓冲区。 1. 在Vim内部执行shell命令在 Vim 的命令行模式中，在命令前加一个 ! 前缀 (参见 :h :!) 就可以调用外部的shell程序。 例如，如果想在Vim内部查看当前目录下的所有文件，可以在Vim命令行模式下运行命令 :!ls 注：:!ls 和 :ls 是两个不同的Vim命令，前者是在Vim中调用shell命令 ls，用于列出目录下的所有文件，后者调用的是 Vim内置命令 ls，用来显示当前缓冲区列表的内容，可以参考Vim文件缓冲区列表介绍。 如Vim打开和保存文件所介绍，在 Vim 的命令行模式下，符号 % 代表当前文件的完整路径(参见 :h cmdline-special)。如果我们正在通过Vim编辑某个 python 文件，则可以用命令 :!python % 直接执行该文件。 2. 启动一个可交互的shell进程执行命令上面介绍的 :!{cmd} 这种语法适用于执行一次性命令，如果想在 shell 中连续执行多条命令，可以执行 Vim 的 :shell 命令启动一个可交互的 shell 会话，在执行完所需要的命令后用 exit 命令退出此 shell 并返回到原始的 Vim 进程。 3. Vim缓冲区内容作为标准输入/标准输出在用 :!{cmd} 时，Vim 会回显 {cmd} 命令的输出，可以用 :read !{cmd} 命令把 {cmd} 命令的输出重定向当前Vim缓冲区中，或使用 :write !{cmd} 把当前Vim的缓冲区内容作为指定 {cmd} 的标准输入。 例如，在Vim命令行模式下执行命令 :write !sh 后会在 shell 中执行当前缓冲区中的每行内容。 假如当前所在目录包含如下的文件：12341.cc2.cc3.cc... 我希望把 .cc 后缀更名为 .cpp，可以在Vim中通过 :read !ls *.cc 命令将shell命令 ls *.cc 的输出重定向到Vim缓冲区中，再使用Vim替换命令 :%s/\\(.*\\).cc/mv &amp; \\1.cpp 生成shell重命名命令mv，最后使用 :write !sh 执行当前缓存区中的每一行，从而达到对所有 .cc 文件重命名为 .cpp 的目的。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim-write","slug":"vim-write","permalink":"https://vim.ink/tags/vim-write/"},{"name":"Vim-shell","slug":"Vim-shell","permalink":"https://vim.ink/tags/Vim-shell/"},{"name":"vim批量改名","slug":"vim批量改名","permalink":"https://vim.ink/tags/vim批量改名/"},{"name":"vim外部命令","slug":"vim外部命令","permalink":"https://vim.ink/tags/vim外部命令/"},{"name":"vim-read","slug":"vim-read","permalink":"https://vim.ink/tags/vim-read/"}]},{"title":"Vim命令autocmd及新文件自动生成注释-Vim入门教程(39)","slug":"vim-autocmd","date":"2014-10-20T16:00:00.000Z","updated":"2019-04-27T15:35:45.962Z","comments":true,"path":"vim-autocmd.html","link":"","permalink":"https://vim.ink/vim-autocmd.html","excerpt":"","text":"Vim命令行命令 autocmd 用于指示 Vim 监听某一类事件，一旦该事件发生，Vim 将执行指定的命令。 在文件读写，缓冲区或窗口进出，甚至 Vim 退出等事件发生时，都可以指定要自动执行的命令。autocmd 语句的这种检测机制可用于设置用户感兴趣的事件发生时自动执行某些操作。 例如，可以对匹配 .c 的文件自动置位 ‘cindent’ 选项，可以通过 autocmd 命令监听 FileType 事件，它会在 Vim 检测出当前文件类型时被触发；还可以通过 autocmd 命令监听 BufNewFile 事件，它将在通过Vim新建文件时被触发对应操作。 可以将以下Vim配置添加到Vim配置文件 ~/.vimrc 中，实现新建后缀名为 .cpp时自动在新文件中添加文件作者注释信息并自动将光标定位到文件末尾。 1234567891011121314autocmd BufNewFile *.cpp exec \":call SetTitle()\" func SetTitle() call setline(1,\"/**\") call append(line(\".\"), \" * Copyright (C) \".strftime(\"%Y\").\" All rights reserved.\") call append(line(\".\")+1, \" *\") call append(line(\".\")+2, \" * FileName ：\".expand(\"%:t\")) call append(line(\".\")+3, \" * Author ：vim.ink\") call append(line(\".\")+4, \" * Email ：admin@vim.ink\") call append(line(\".\")+5, \" * Date ：\".strftime(\"%Y年%m月%d日\")) call append(line(\".\")+6, \" * Description ：\") call append(line(\".\")+7, \" */\") endfunc\"自动将光标定位到末尾\"autocmd BufNewFile * normal G Vim autocmd 命令常用的事件类型如下表所示，更多内容可以在Vim命令行模式下使用命令 h :autocmd 查看官方完整文档。 autocmd事件 含义 BufNewFile 开始编辑尚不存在的文件 BufReadPre 开始编辑新缓冲区，读入文件前 BufRead 开始编辑新缓冲区，读入文件后 BufReadPost 开始编辑新缓冲区，读入文件后 BufReadCmd 开始编辑新缓冲区前 FileReadPre 用 :read 命令读入文件前 FileReadPost 用 :read 命令读入文件后 FileReadCmd 用 :read 命令读入文件前 BufWrite 开始把整个缓冲区写回到文件 BufWritePre 开始把整个缓冲区写回到文件 BufWritePost 把整个缓冲区写回到文件后 BufWriteCmd 把整个缓冲区写回到文件前 FileWritePre 开始把缓冲区部分内容写回到文件 FileWritePost 把缓冲区部分内容写回到文件后 FileWriteCmd 把缓冲区部分内容写回到文件前 BufAdd 刚把缓冲区附加到缓冲区列表后 BufCreate 刚把缓冲区附加到缓冲区列表后 BufDelete 从缓冲区列表删除缓冲区前 BufWipeout 从缓冲区列表完全删除缓冲区前 BufFilePre 改变当前缓冲区名字前 BufFilePost 改变当前缓冲区名字后 BufEnter 进入缓冲区后 BufLeave 转到其它缓冲区前 BufWinEnter 在窗口显示缓冲区前 BufWinLeave 从窗口删除缓冲区前 BufNew 刚建立新缓冲区后 FileType 设置 filetype 选项时 Syntax 设置 syntax 选项时 EncodingChanged encoding 选项改变后 VimEnter 完成所有的初始化步骤后 GUIEnter 成功启动 GUI 后 GUIFailed 启动 GUI 失败之后 QuitPre 用 :quit 时，决定是否退出之前 VimLeavePre 退出 Vim 前，在写入 viminfo 文件之前 VimLeave 退出 Vim 前，在写入 viminfo 文件之后 FileChangedShellPost 对在编辑开始后被改变的文件的处理完成后 FileChangedRO 对只读文件进行第一次修改前 ShellCmdPost 执行shell命令后 SourcePre 执行 Vim 脚本之前 VimResized Vim 窗口大小改变后","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-autocmd","slug":"Vim-autocmd","permalink":"https://vim.ink/tags/Vim-autocmd/"},{"name":"vim自动注释","slug":"vim自动注释","permalink":"https://vim.ink/tags/vim自动注释/"},{"name":"vim事件监听","slug":"vim事件监听","permalink":"https://vim.ink/tags/vim事件监听/"},{"name":"vim-BufNewFile","slug":"vim-BufNewFile","permalink":"https://vim.ink/tags/vim-BufNewFile/"},{"name":"vim-FileType","slug":"vim-FileType","permalink":"https://vim.ink/tags/vim-FileType/"}]},{"title":"Vim参数列表args和argdo命令-Vim入门教程(38)","slug":"vim-args-argdo","date":"2014-08-01T16:00:00.000Z","updated":"2019-04-27T15:36:41.584Z","comments":true,"path":"vim-args-argdo.html","link":"","permalink":"https://vim.ink/vim-args-argdo.html","excerpt":"","text":"1. Vim args命令与参数列表Vim参数列表记录了在启动时作为参数传递给 Vim 的文件列表，在Vim命令行模式下执行 :args 命令可以打印出当前参数列表的内容。可以用 :next 及 :prev 命令遍历参数列表中的所有文件。 注意：:args 列表反映的并不一定是启动 Vim 时所传的参数，可以在任意时刻通过命令 :args arglist 改变参数列表的内容，arglist 包括文件名、通配符、或shell命令的输出结果。 1.1 用文件名指定文件填充参数列表最简单的方式是在 :args 命令中逐一指定文件的名字，如 :args 1.txt 2.txt 3.txt。 在上图中，:args 命令输出中的 [] 字符表示参数列表中的哪个文件是活动文件。 1.2 用通配符指定文件通配符 * 符号用于匹配文件或目录名称 0 个或多个字符，但范围仅局限于指定的目录而不会递归其子目录 (参见 :h wildcard)；通配符 ** 也匹配 0 个或多个字符，但可以递归进入指定目录的子目录 (参见 :h starstar-wildcard)。 例如，:args **/*.js **/*.css 递归包含后缀为 .js 和 .css 文件， 而 :args **/*.* 递归包含当前目录下所有文件。 1.3 用反引号结构指定文件Vim 会在 shell 中执行反撇号括起来的命令，例如，:args `cat 1.txt` 会把 cat 命令的输出作为 :args 命令的参数。 2. Vim argdo命令:argdo 命令可以在参数列表中的每个文件上执行一条 Ex 命令(注意：不能是普通模式的命令)。 因此，:argdo 命令结合 :args 指定参数列表可以对任意个文件执行多种操作。 假设想把当前Vim参数列表中所有文件中的 test 替换为 Test，可以在Vim命令行参数下执行命令 :argdo %s/\\&lt;test\\&gt;/Test/ge | update。 Vim替换命令 s 的标志 g 使得每行中的全部 test 都被替换，标志 e 则用于避免某些文件中一个 test 都找不到时终止整个操作。 | 用来分隔两个命令，update 命令会在文件有改变时进行保存。 关于Vim替换命令的更多介绍，可以参考Vim教程网上的文章Vim替换命令substitute介绍。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim参数列表","slug":"Vim参数列表","permalink":"https://vim.ink/tags/Vim参数列表/"},{"name":"vim-args","slug":"vim-args","permalink":"https://vim.ink/tags/vim-args/"},{"name":"vim-argdo","slug":"vim-argdo","permalink":"https://vim.ink/tags/vim-argdo/"},{"name":"vim批量操作文件","slug":"vim批量操作文件","permalink":"https://vim.ink/tags/vim批量操作文件/"},{"name":"vim通配符","slug":"vim通配符","permalink":"https://vim.ink/tags/vim通配符/"}]},{"title":"Vim标签页介绍及用标签页将窗口分组-Vim入门教程(37)","slug":"vim-tabpage","date":"2014-07-10T16:00:00.000Z","updated":"2019-04-27T15:36:41.715Z","comments":true,"path":"vim-tabpage.html","link":"","permalink":"https://vim.ink/vim-tabpage.html","excerpt":"","text":"Vim标签页是可以容纳一系列Vim窗口的容器，可通过Vim帮助命令 h: tabpage 查看官方为Vim标签页的介绍。可以通过vim中文帮助文档Vimcdoc安装方法安装Vim中文帮助文档查看对应中文介绍。 Vim标签页与缓冲区并非一一对应的关系，下图显示了一个带有 3 个标签页的工作区，每个标签页都包含一个或多个窗口。图中灰色的方块代表了当前的活动窗口及活动标签页。 1. 新建Vim标签页Vim命令行模式下使用命令 :tabedit 文件名 或 tabe 文件名 可以在新标签页中打开指定的文件。也可以使用 :tabnew 文件名 在新标签页中编辑新的文件。 Vim命令行命令 :tab split 会在新的Vim标签页中打开当前活动缓冲区对应的文件。 Vim默认最多只能打开 10 个标签页，可以用 set tabpagemax=20 设置最大标签页上限为20。 2. 切换标签页Vim普通模式下使用命令 gt 或命令行命令 :tabnext (缩写形式 :tabn) 可以移动到下一个标签页。 相反地，gT 或 :tabprevious (缩写形式 :tabp) 可以移动到上一个标签页。 注：上述命令在到达第一个或最后一个标签页时会自动循环遍历所有标签页。 特别地，快速移动到第一个标签页，可以使用 :tabfirst 或 :tabr 命令，而命令 :tablast 可用来快速移动到最后一个标签页。 3. 显示所有标签页Vim命令行命令 :tabs 可以列出所有的标签页和它们包含的窗口，当前窗口用 &gt; 表示，修改过的缓冲区用 + 表示。 4. 关闭标签页Vim命令行命令 :tabclose (缩写形式为 :tabc) 可以关闭当前标签页及其中的所有窗口，而命令 :tabonly (缩写形式为 :tabo) 将关闭所有其他标签页，只保留当前活动标签页。 5. 移动标签页Vim命令行命令 :tabmove n (缩写形式为 :tabm) 用于将当前标签页移到第 n 个标签页之后。如果没有为 :tabm 命令指定参数n，那么会将当前标签页移动到最后位置。 例如，命令 :tabm 1 将把当前标签页移动到第2的位置。 注: 标签页编号是从 0 开始计数的。 6. 多标签页命令Vim命令行命令 :tabdo 可以同时在多个标签页中执行命令。 假如当前一共打开了多个标签页，若想把这些文件中的 food 都替换成 drink，可以使用Vim命令 :tabdo %s/food/drink/g ，一次完成对所有文件的替换操作，而不用针对每个文件重复操作。 7. 配置标签页默认情况下，只有用户新建了标签页才会在窗口上方显示标签栏，如果希望总是显示标签栏，那么可以用 set showtabline=2 进行设置。更多内容，可以参考Vim入门级配置 和 使用Powerline插件强化Vim状态栏。 如果希望完全不显示标签栏，可以使用 set showtabline=0 进行设置。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"vim中文教程","slug":"vim中文教程","permalink":"https://vim.ink/tags/vim中文教程/"},{"name":"Vim标签页","slug":"Vim标签页","permalink":"https://vim.ink/tags/Vim标签页/"},{"name":"vim-tabpage","slug":"vim-tabpage","permalink":"https://vim.ink/tags/vim-tabpage/"},{"name":"Vim分屏","slug":"Vim分屏","permalink":"https://vim.ink/tags/Vim分屏/"},{"name":"vim-tabedit","slug":"vim-tabedit","permalink":"https://vim.ink/tags/vim-tabedit/"},{"name":"vim-tabdo","slug":"vim-tabdo","permalink":"https://vim.ink/tags/vim-tabdo/"}]},{"title":"使用Vim处理文本-Vim使用技巧(9)","slug":"vim-process-file","date":"2014-06-10T16:00:00.000Z","updated":"2019-04-27T15:36:41.683Z","comments":true,"path":"vim-process-file.html","link":"","permalink":"https://vim.ink/vim-process-file.html","excerpt":"","text":"1. 使用Vim提取文本内容考虑以下场景：Vim教程网为了增加在百度上的收录量，需要调用百度站长平台提供的主动推送接口实时推送链接。为此，需要将准备提交的链接按照每行一条的格式写入一个文本文件中。 而Vim教程网是有提供https://vim.ink/sitemap.xml文件的，里面包含了教程网上所有的Vim教程文章，因此，只需要对sitemap.xml文件进行必要的处理，提取出所有文章的url即可。 为了提取出sitemap.xml中的所有文章url，可以使用Vim进行如下操作。 首先，在Vim命令行模式下使用命令 :v/loc/d 删除掉sitemap.xml文件中不包含 loc 的行 其次，使用Vim搜索命令 /\\v *\\&lt;\\/?\\w+\\&gt; 选中 &lt;loc&gt; 或 &lt;/loc&gt; 标记 最后，使用Vim替换命令 :%s///g 删除选中的loc标记和空格 :v/loc/d 命令是使用 :vglobal 命令的缩写形式执行与 :global 命令完全相反的操作，用于实现删除所有不包含 loc 的行，更多内容可以参考文章Vim global命令和重复操作。 /\\v *\\&lt;\\/?\\w+\\&gt; 用Vim的very magic正则匹配模式依次匹配零个或任意个空格、再匹配左尖括号 (\\&lt;)、匹配可选的正斜杠 (\\/?)、匹配一个或多个单词型字符 (\\w+)、匹配右尖括号 (>)。从而搜索出所有包含尖括号的目标字符。 :%s///g 命令是使用Vim的替换命令 :s (全称为 :substitute) 将源字符串串替换为目标串(空格)，由于substitute命令没有显式指定源串，所以substitute命令会沿用上次的查找模式 (即/\\v *\\&lt;\\/?\\w+\\&gt;)，更多内容可以参考文章substitute重用上次的查找模式 2. 将 CSS 文件中所有规则的属性按字母排序假设我们想把某个CSS文件中每一组样式规则内的属性都按照字母顺序排序。可以借助 Vim 的内置命令 :sort 配合 :global 命令实现这一功能。 :g/{/ .+1,/}/-1 sort 命令是使用 :global 命令在指定的文件范围内执行 sort 命令。为了分析这个Vim命令的含义，将其拆分成以下几个部分。 .+1,/}/-1 的基本形式为 .,/}/，其含义是 从当前行开始，直到匹配到模式 /}/ 的那一行为止。偏移值 +1 与 —1 用于缩小操作范围，把操作对象集中在 {} 之间的内容上面。 /{/ 命令令会将光标置于某个 {} 块的起始位置。 所以，参考Vim global命令格式可分析出，:g/{/ .+1,/}/-1 sort 命令指定的模式 { 会匹配每个 {} 块的起始行。而对于每个匹配行，:sort 会从匹配行到 {} 块的结尾这个范围内执行。 最终，每一条规则的 CSS 属性都会按照字母顺序排列整齐。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim-substitute","slug":"vim-substitute","permalink":"https://vim.ink/tags/vim-substitute/"},{"name":"vim-global","slug":"vim-global","permalink":"https://vim.ink/tags/vim-global/"},{"name":"Vim使用技巧","slug":"Vim使用技巧","permalink":"https://vim.ink/tags/Vim使用技巧/"},{"name":"vim处理文本","slug":"vim处理文本","permalink":"https://vim.ink/tags/vim处理文本/"},{"name":"vim处理sitemap","slug":"vim处理sitemap","permalink":"https://vim.ink/tags/vim处理sitemap/"}]},{"title":"30个Vim常用命令和使用技巧整理 (长期更新)","slug":"vim-tips","date":"2014-05-27T16:00:00.000Z","updated":"2019-04-27T15:34:36.604Z","comments":true,"path":"vim-tips.html","link":"","permalink":"https://vim.ink/vim-tips.html","excerpt":"","text":"vim教程网总结了30个非常实用的Vim使用技巧，以便大家使用Vim时更加得心应手。 删除从光标位置到单词结尾之间的字符并进入插入模式：cw 删除光标所在单词并进入插入模式：ciw，删除光标所在位置的单词及空格：daw 高亮选中标签内部的内容：vit 正向移动到下一单词的开头：w，反向移动到当前单词/上一单词的开头：b 移动到当前行的第n列：n| Vim快速跳转任意行、任意列详细介绍了 | 命令。 重绘屏幕并把当前行显示在窗口正中：zz 将光标所在行移到窗口的顶端：zt，将光标所在行移到窗口的底部：zb Vim跳转位置前进：&lt;Ctrl-i&gt;，跳转位置后退：&lt;Ctrl-0&gt;，类似浏览器的前进后退功能 回到上次跳转的位置：&#39;&#39;，回到上次编辑的位置：&#39;. Vim位置标记介绍 重复执行上次的Vim命令行模式命令：@: 查看Vim当前打开文件的文件名、位置信息和状态等：&lt;Ctrl-g&gt; (同时按下Ctrl键和g键) Vim命令行模式下，% 表示当前活动缓冲区对应文件的完整文件路径 更多内容，可以查看Vim教程网上的文章Vim打开文件命令edit和保存文件命令write 不离开插入模式，粘贴寄存器中的文本：&lt;C-r&gt;{register} ({register}是我们想要插入的寄存器的名字) 重选上一次由可视模式所选择的文本范围：gv 在Vim可视化模式下高亮选中区域后按下 : 键，命令行上会预先填充一个范围 :&#39;&lt;,&#39;&gt; 代表高亮选区的范围 把任意寄存器的内容插入到命令行：:&lt;Ctrl-r&gt;{register} 插入模式下同时按下 &lt;Ctrl-r&gt;，再输入=后，输入任意算数式(如333*2)，回车，即可看到运算结果 (这是使用了Vim表达式寄存器 &quot;=) 只读寄存器 &quot;% 表示Vim当前活动文件缓冲区的文件名，在Vim插入模式下，按 &lt;Ctrl-r&gt;% 可将当前文件名输入到文件中 关于Vim寄存器的更多内容，可以参考Vim教程网上的文章《vim寄存器介绍》 把光标所在当前单词插入Vim命令行：&lt;Ctrl-r&gt;&lt;Ctrl-w&gt; 光标所在行用 . 表示，文件的最后一行用 $ 表示，% 整个文件 (:1,$ 的简写形式) 删除当前光标到本行行尾的所有内容：d$，删除当前光标到本行行首的所有内容：d0 删除所有行：dG 或 :%d 调换Vim当前光标之后的两个字符的顺序：xp 当前行自动缩进对齐 (又称自动格式化)：==，当前文件所有行自动缩进对齐：gg=G 正向移动到下一个 {char} 所在之处的字符上：f{char}，正向移动到下一个 {char} 所在之处的前一个字符上：t{char} Vim普通模式下 ; 命令会重复查找上次 f 命令所查找的字符 关于 t 命令的介绍，可以查看文章Vim字符查找与光标快速移动 Vim分屏后增加某个屏幕的高度：&lt;Ctrl-w&gt;+ (先同时按下Ctrl键和w键，再按下+键) 把多个标签页中的所有文件中的单词 food 都替换成 drink，可以使用 tabdo 命令：:tabdo %s/food/drink/g 临时退出插入模式，执行单条命令又返回插入模式：&lt;Ctrl-o&gt; 修改当前光标所在字符为a：ra 将单词转成大写：gUiw，将当前单词转成小写：guiw 另存为文件：:saveas &lt;filename&gt; 读取文件并将内容插入到光标后：:r &lt;filename&gt; 回退到15分钟前的文件内容：:earlier 15m 本文内容长期更新，最后整理出来的常用Vim实用技巧可能会超过30条，各位不用见怪哈！","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"vimtutor","slug":"vimtutor","permalink":"https://vim.ink/tags/vimtutor/"},{"name":"vim命令","slug":"vim命令","permalink":"https://vim.ink/tags/vim命令/"},{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/tags/Vim技巧/"},{"name":"Vim中文教程","slug":"Vim中文教程","permalink":"https://vim.ink/tags/Vim中文教程/"},{"name":"vim使用方法","slug":"vim使用方法","permalink":"https://vim.ink/tags/vim使用方法/"}]},{"title":"Vim复制命令copy和移动命令move-Vim入门教程(36)","slug":"vim-copy-move-command","date":"2014-05-10T16:00:00.000Z","updated":"2019-04-27T15:35:46.018Z","comments":true,"path":"vim-copy-move-command.html","link":"","permalink":"https://vim.ink/vim-copy-move-command.html","excerpt":"","text":"Vim :copy 命令 (缩写形式 :co，或 :t) 可以把一行或多行从文档的某个位置复制到另一个位置，而 :move 命令则可以把一行或多行移到文档的其他地方。 整行拷贝可以在Vim普通模式下用 yank (或缩写形式 y ) 命令解决，但有一个缺点就是必须把光标移到要拷贝的行上才能执行该操作。 而 :copy 和 :move 命令可以在命令中直接显式指定要操作的行范围和目标位置，从而可实现在任何地方拷贝或移动任意一行或者多行。 1. Vim行复制命令copycopy 命令的格式为 :[range]copy {address}。 [range] 表示要复制的行范围，{address} 表示复制的目标位置，这两个参数都可以缺省，用于表示Vim光标所在当前行。 例如，5copy. 表示复制Vim当前打开的文件的第 5 行到当前行 (用 . 表示)，即为第 5 行创建一份副本，并放到当前行下方。 下标列出了使用 copy 命令的缩写形式 t 进行文件复制的一些实例及用途，用于理解复制命令 copy 的用途。 命令 用途 :3,5t. 把第 3 行到第 5 行的内容复制到当前行下方 :t5 把当前行复制到第 5 行下方 :t. 复制当前行到当前行下方 (等价于普通模式下的 yyp) :t$ 把当前行复制到文本结尾 :&#39;&lt;,&#39;&gt;t0 把高亮选中的行复制到文件开头 2. Vim行移动命令moveVim行移动命令 :move (缩写形式为 :m) 的命令格式和 :copy 命令很相似，格式为 :[range]move{address}。 [range] 表示要移动的行范围，{address} 表示移动的目标位置，这两个参数都可以缺省，用于表示Vim光标所在当前行。 例如，在Vim命令行模式下执行命令 :&#39;&lt;,&#39;&gt;m$ 可以把当前高亮选中的所有行移动到文件末尾处，而 :8,10m2 可以把当前打开文件的第8~10行内容移动到第 2 行下方。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim-copy-command","slug":"vim-copy-command","permalink":"https://vim.ink/tags/vim-copy-command/"},{"name":"vim-move-command","slug":"vim-move-command","permalink":"https://vim.ink/tags/vim-move-command/"},{"name":"Vim行复制","slug":"Vim行复制","permalink":"https://vim.ink/tags/Vim行复制/"},{"name":"Vim行移动","slug":"Vim行移动","permalink":"https://vim.ink/tags/Vim行移动/"}]},{"title":"模糊搜索神器fzf介绍及在Vim中的使用-Vim插件(11)","slug":"vim-fzf-plugin","date":"2014-04-29T16:00:00.000Z","updated":"2019-04-27T15:35:46.066Z","comments":true,"path":"vim-fzf-plugin.html","link":"","permalink":"https://vim.ink/vim-fzf-plugin.html","excerpt":"","text":"fzf (FuZzy Finder)是一个使用go语言开发的模糊搜索工具，可以在bash、tmux等环境使用，也可以作为一种Vim插件来增强Vim的功能。 fzf本身并不是一个Vim 插件，作者在github上的fzf项目中只提供了基本的wrapper函数(比如fzf#run)，直接在Vim中使用fzf只能使用基本的命令，如 :FZF，:FZF!。但后来作者发现很多人并不熟悉VIMScript, 所以创建了一个新的github项目fzf.vim，提供了一系列默认的Vim插件配置和按键映射，如 :Files、:Colors 等命令。原文如下： fzf in itself is not a Vim plugin, and the official repository only provides the basic wrapper function for Vim and it’s up to the users to write their own Vim commands with it. However, I’ve learned that many users of fzf are not familiar with Vimscript and are looking for the “default” implementation of the features they can find in the alternative Vim plugins 所以，如果希望在Vim下使用更加强大的fzf，建议你同时安装 fzf 和 fzf.vim 两个项目。 1. fzf安装方法fzf支持多种安装方式，本文只介绍其作为Vim插件时使用Vundle或vim-plug等Vim插件管理器的安装方法。fzf官方推荐使用vim-plug来安装 fzf 和 fzf.vim。 如果使用vim-plug安装，需要在 ~/.vimrc 中增加以下两项配置，并在Vim命令行模式下执行 :PlugInstall。12Plug 'junegunn/fzf', &#123; 'dir': '~/.fzf', 'do': './install --all' &#125;,Plug 'junegunn/fzf.vim', 当然，上面通过dir指定的路径可以自行指定。 如果使用Vundle安装，需要在 ~/.vimrc 中增加以下两项配置，并在Vim命令行模式执行 :PluginInstall 或在bash命令行执行命令 vim +PluginInstall +qall。12Plugin 'junegunn/fzf',Plugin 'junegunn/fzf.vim', 注：使用Vundle安装fzf后，第一次在Vim中执行 :FZF 命令时可能会提示 ‘fzf executable not found. Download binary? (y/n)’，选y进行下载即可。 关于使用vim-plug和Vundle安装Vim插件的具体方法，在这里不再赘述，具体可参考Vim教程网上的文章Vim插件管理vim-plug以及Vim插件管理器Vundle。 2. fzf配置fzf 提供了环境变量 配置参数 FZF_DEFAULT_COMMAND 用来设置默认的调用命令，以及 FZF_DEFAULT_OPTS 参数用来设置 fzf 的界面展示样式。 如果是使用 fzf 来查找文件，其底层实际是调用的Linux操作系统 find 命令，可通过设置 FZF_DEFAULT_COMMAND 变量来修改使用的程序，例如，可以使用 fd 来替换 find 作为fzf查找文件时调用的程序，export FZF_DEFAULT_COMMAND=&quot;fd --type f&quot;。 fzf的展示窗口样式可通过 FZF_DEFAULT_OPTS 变量进行设置，例如，export FZF_DEFAULT_OPTS=&quot;--height 40% --layout=reverse --preview &#39;cat {} 2&gt; /dev/null | head -500&#39;&quot; 用于指定在屏幕右侧调用cat命令显示文件的前500行内容作为预览界面，关于界面展示的更多参数介绍，使用通过 fzf --help 进行获取。 3. Vim fzf使用方法系统中安装完 fzf 后便可以在Vim命令行模式使用 :FZF 来列出当前目录下所有的文件，可以通过 Ctrl-k 或 Ctrl-j 来上下移动选择目标文件。 类似于 ctrlp，可以使用 Ctrl-T 在当前窗口打开选中的文件, 使用 Ctrl-X 在一个新的tab标签页打开选中的文件，或使用 Ctrl-V 在垂直分屏窗口打开选中的文件。 而如果系统中还安装了 fzf.vim 插件，则可以使用针对Vim进行过特定配置的升级版 fzf 命令 (这些命令大都是 fzf 调用某个工具，如git、ctags等产生对应文件)，如：查找当前 Buffer、Tag、标记，切换Vim窗口，更换vim 主题配色等。 fzf.vim 支持的命令及对应命令功能列表如下： 命令 列出 :Files [path] 列出path路径下的所有文件 (功能等价于 :FZF 命令) :Buffers 文件缓冲区切换 :Colors 选择Vim配色方案 :Tags [QUERY] 当前项目中的Tag (等价于：ctags -R) :BTags [QUERY] 当前活动缓冲区的标记 :Marks 所有Vin标记 :Windows 窗口 :Lines [QUERY] 在所有加载的文件缓冲区里包含目标词的所有行 BLines [QUERY] 在当前文件缓冲区里包含目标词的行 Locate PATTERN locate command output History v:oldfiles and open buffers History: 命令行命令历史 History/ 搜索历史 Commands Vim命令列表 Maps 普通模式下的按键映射 Snippets Snippets ([UltiSnips][us]) Commits Git commits (requires [fugitive.vim][f]) BCommits Git commits for the current buffer GFiles [OPTS] Git files (git ls-files) GFiles? Git files (git status) Ag [PATTERN] [ag][ag] search result (ALT-A to select all, ALT-D to deselect all) Rg [PATTERN] [rg][rg] search result (ALT-A to select all, ALT-D to deselect all) Filetypes File types 例如，:Files 命令与 :FZF 命令具有相同的作用：列出指定路径下的所有文件，选中后vim会打开选中的文件。 :Buffers 命令用于在存在于buffer中的文件间切换，功能等价于 :bnext 等命令，更多内容可参考Vim文件缓冲区列表介绍。 Lines &lt;keyword&gt; 命令用于在所有加载的文件缓冲区中查找含有某个关键词的行，而 :BLines 命令只在当前缓冲区里查找。 :Colors 用来修改当前Vim窗口使用的配色方案。","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim插件","slug":"vim插件","permalink":"https://vim.ink/tags/vim插件/"},{"name":"Vim-fzf","slug":"Vim-fzf","permalink":"https://vim.ink/tags/Vim-fzf/"},{"name":"fuZzy-finder","slug":"fuZzy-finder","permalink":"https://vim.ink/tags/fuZzy-finder/"},{"name":"FZF","slug":"FZF","permalink":"https://vim.ink/tags/FZF/"},{"name":"vim-Files","slug":"vim-Files","permalink":"https://vim.ink/tags/vim-Files/"}]},{"title":"Vim打开和保存文件-Vim使用技巧(7)","slug":"vim-edit-and-wrie-file","date":"2014-04-27T16:00:00.000Z","updated":"2019-04-27T15:35:46.035Z","comments":true,"path":"vim-edit-and-wrie-file.html","link":"","permalink":"https://vim.ink/vim-edit-and-wrie-file.html","excerpt":"","text":"使用Vim打开和保存文件是最常用的操作，介绍使用edit命令通过文件路径来打开文件，使用write命令保存文件，当文件路径不存在或用户权限不匹配时，使用write命令调用外部shell程序完成操作。 1. edit命令打开文件Vim命令 :edit (缩写形式为 :e) 可以通过文件的绝对路径或相对路径来打开文件。 如果想打开的文件和当前活动文件缓冲区中的文件在同一个目录里，可以使用 :edit %:h&lt;Tab&gt;命令。 % 符号代表活动缓冲区的完整文件路径，:h 修饰符会去除路径中的文件名，但保留路径中的其他部分。因此，输入的 %:h&lt;Tab&gt; 会被展开为当前文件所在目录的路径。 Vim命令 % 和 :h 在命令行模式下具有特殊含义，可用于高效操作与Vim文件路径相关的功能。 2. 把文件保存到不存在的目录如果使用 :edit {file} 命令指定了一个不存在的文件路径，Vim 会创建一个新的空白缓冲区。在新建的空白缓冲区中按 &lt;Ctrl-g&gt; 时可以看到该缓冲区被标识为新文件。然后，当执行 :write (缩写形式为 :w) 命令保存该缓冲区时，Vim 会尝试将此缓冲区的内容写到创建该缓冲区时所指定的文件路径中。 如果指定的文件路径不存在时，Vim会因为找不到对应目录而显示出错信息 “无法打开并写入文件”。 此时，一个常用的Vim使用技巧是调用外部的 mkdir 程序新建目录。在Vim命令行模式下执行 :!mkdir -p %:h 命令后可以执行 :write 命令保存新建的文件。 :!mkdir 表示调用外部的 mkdir 命令，-p 参数使 mkdir 创建任何不存在的中间目录，而 %:h 表示当前活动缓冲区对应文件所在目录。 注：&lt;Ctrl-g&gt; 命令用于显示当前文件的文件名及状态， 3. 以超级用户权限保存文件在使用Vim工作时，有时会遇到需要以root身份保存文件的场景。 例如，假设当前用户为 vim，打开 /etc/hosts 文件查看当前host配置后需要新增一个域名解析 vim.ink 127.0.0.1。 首先，使用 Go 命令在hosts文件末尾新建内容后，使用 :write 命令尝试保存结果，此时Vim会报错 “E45:已设定选项 ‘readonly’ (请加 ! 强制执行)”。按照提示，使用命令 :write! 强制执行write命令时，Vim仍然报错 “ E212: 无法打开并写入文件”。 这说明现在的问题是当前用户没有写 /etc/hosts 文件的权限。 为了不退出Vim而保留已有修改，可以使用Vim命令 :write !sudo tee % &gt; /dev/null，然后按Vim的提示输入vim用户的密码并按 L 键重新将该文件加载到缓冲区即可。 这条命令是如何工作的？ 首先，:write !{cmd} 命令会把当前文件缓冲区的内容作为标准输入传给指定的{cmd}，{cmd} 可以是任何外部程序 (vim命令行模式下执行命令 :h :write_c 可查看更多内容，Vim执行shell命令)。 其次，在 Vim 命令行中，% 符号会展开成当前文件的完整路径，因此上面的命令可以展开为 :write !sudo tee /etc/hosts &gt; /dev/null 所以，上面这条命令会把当前文件缓冲区的内容当作标准输入传递给linux的 tee 命令，以超级用户权限运行 tee 命令重定向到文件 /etc/hosts 中，从而实现了不重启Vim而以超级用户权限保存文件的需求。 注：linux命令tee表示将内容重定向到指定的文件并重定向内容副本到标准输出。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim-edit","slug":"vim-edit","permalink":"https://vim.ink/tags/vim-edit/"},{"name":"vim-write","slug":"vim-write","permalink":"https://vim.ink/tags/vim-write/"},{"name":"vim-%:h","slug":"vim-h","permalink":"https://vim.ink/tags/vim-h/"},{"name":"vimtutor","slug":"vimtutor","permalink":"https://vim.ink/tags/vimtutor/"}]},{"title":"viminfo文件介绍与使用-Vim入门教程(35)","slug":"viminfo","date":"2014-04-19T16:00:00.000Z","updated":"2018-09-22T23:33:23.551Z","comments":true,"path":"viminfo.html","link":"","permalink":"https://vim.ink/viminfo.html","excerpt":"","text":"~/.viminfo 文件由Vim系统自动生成，用于记录和保存一些Vim的操作记录和状态信息，便于重启Vim进程后能恢复之前的各种历史操作行为。 一、viminfo文件简介viminfo文件用于保存命令行(command line history) 和 搜索模式的历史记录(search string history)、输入记录(input-line history)、非空寄存器内文本内容(Contents of non-empty registers)、各种文件的标记(Marks for several files)、文件缓存列表(The buffer list)和全局变量(Global variables)等内容。 每次退出Vim都会把上述类信息存放在一个viminfo文件中，当Vim重新启动时会读取这个信息文件。 使用 :wviminfo file_name命令，可以手动创建一个viminfo文件。 可以在Vim命令行模式下通过命令 :help viminfo 获取关于viminfo文件的官方说明。 注：如果 +viminfo 特性在编译时被关闭，则编译出来的Vim不支持 viminfo 文件 二、viminfo配置viminfo保存哪些内容，以及保存的数量和viminfo文件保存的位置等信息由 viminfo 选项决定，这个选项的值在windows上和在linux上的缺省值不同，可以通过 :help &#39;viminfo&#39; 查看手册说明， viminfo 选项的值是由逗号分隔的字符串，每个参数由单个字符组成，标识特定的参数名，后面跟着标识该参数的值的一个数值或字符串。如果某个字符没有列出，则使用该参数的缺省值。可以在Vim配置文件 ~/.vimrc 中设置 set viminfo= 来定制viminfo的配置。 例如: :set viminfo=&#39;50,&lt;1000,s100,:0,n~/vim/viminfo。 下表是Vim能识别的viminfo参数选项和它们值对应的效果介绍。 option (选项) 值 ! 如果包含 ! 则表示保存和恢复大写字母开头、且不包含小写字母的Vim全局变量。例如，保存 “KEEPTHIS” 和 “K_L_M”，但不保存 “KeepThis” 和”_K_L_M”。不能正确读回嵌套的列表和字典值，它们变成空值。 &quot; 设置每个寄存器最大保存的行数。是 &lt; 选项的旧名，缺点是你需要在 &quot; 之前加上反斜杠，不然它被识别为注释的开始！ % 如果包含，表示保存和恢复文件缓冲区列表，如果后跟数值，该数值指定保存的缓冲区的最大个数，如果没有此数，保存所有的缓冲区。如果 Vim 启动时指定文件名参数，缓冲区列表不予恢复。如果 Vim 启动时没有指定文件名参数，缓冲区列表从 viminfo 文件里恢复。没有文件名的缓冲区和帮助文件的缓冲区不会写入 viminfo 文件。不保存 quickfix (‘buftype’)、未列出 (‘buflisted’)、无名和在可移动媒介上 (viminfo-r) 的缓冲区。 &#39; 编辑过的文件的最大数目，为它们记住位置标记。如果 ‘viminfo’ 非空，必须包含本参数。包含本项目意味着 jumplist 和 changelist 也保存在 viminfo文件里。 / 保存的搜索模式历史的最大项目数目。如果非零，那么也保存前次搜索和替代模式。如果不包含，使用 history 选项设置的值。 : 保存的命令行历史的最大项目数目。如果不包含，使用 history 选项的值。 &lt; 每个寄存器最大保存的行数。如果为零，不保存寄存器。如果不包含，所有的行都被保存。&quot; 是本项目的旧名,另见下面的 s 选项：千字节指定的限制。 @ 保存的输入行历史的最大项目数目。如果不包含，使用 history 选项的值。 c 如果包含，把 viminfo 里的文本从写入时使用的 ‘encoding’ 转换为当前的 ‘encoding’。可参考 :help viminfo-encoding。 f 是否保存文件位置标记。如果为零，不保存文件位置标记 (0~9，A~Z)。如果不存在或者非零，它们都被保存。0 记住光标的当前位置 (退出或者执行 :wviminfo 时)。 h 载入 viminfo 文件时，关闭 hlsearch 设置的高亮效果。如果不包含，取决于在最近的搜索命令之后是否使用过 :nohlsearch。 n viminfo 文件的名字。该名字必须立即跟随在 n之后，且必须为最后一个选项！如果启动 Vim 时指定 -i 参数，那个文件名覆盖’viminfo’ 在这里设置的文件名。环境变量在文件打开时被扩展，而不是设置选项时。 r 可移动的媒介。参数是字符串 (直到下一个 ‘,’ 为止)，本参数可以多次给出。每个参数指定路径的开始部分，符合者不保存位置标记。这被用于避免可移动的媒介。MS-DOS 上你可以用 “ra:,rb:”，Amiga 则可用 “rdf0:,rdf1:,rdf2:”。你也可用于指定临时文件的路径，比如Unix 上: “r/tmp”。大小写忽略。每个 r 参数的最大长度是 50 个字符。 s 每个项目千字节计的最大长度。如果为零，不保存寄存器。目前只适用于寄存器。缺省的 s10 会忽略包含超过 10 千字节文本的寄存器。另见上面的 &lt; 选项: 行数限制。 现在，可以根据上表的viminfo选项含义来分析 :set viminfo=&#39;50,&lt;1000,s100,:0,n~/vim/viminfo 设置的含义。 首先，&#39;50 表示记住最近 50 个你编辑的文件的位置标记；&lt;1000 设置记住寄存器的内容，且每个不超过 1000 行；s100 表示不保存超过 100 千字节文本的寄存器；:0 表示不保存命令行历史；n~/vim/viminfo 表示viminfo使用的文件名为 “~/vim/viminfo”。此外，因为没有指定 / 选项，使用缺省设置：保存所有的搜索历史和前次搜索和替代模式；没有指定 %，表示不保存也不读入文件缓冲区列表，没有设置 h，所以会恢复 hlsearch 高亮。 当 `viminfo 选项从空值改设为非空值以后，可以用 :rviminfo 读入viminfo文件的内容，但这不是自动进行的。 注：history 参数表示 : 命令行模式下执行的命令历史和最近的搜索模式的历史会被记住，最大值为10000，可使用命令 :help &#39;history&#39; 获取更多介绍。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vimtutor","slug":"vimtutor","permalink":"https://vim.ink/tags/vimtutor/"},{"name":"viminfo","slug":"viminfo","permalink":"https://vim.ink/tags/viminfo/"},{"name":"viminfo配置","slug":"viminfo配置","permalink":"https://vim.ink/tags/viminfo配置/"},{"name":"vim恢复上次打开","slug":"vim恢复上次打开","permalink":"https://vim.ink/tags/vim恢复上次打开/"}]},{"title":"Vim位置标记mark详解-Vim入门教程(34)","slug":"vim-mark","date":"2014-04-04T16:00:00.000Z","updated":"2019-01-05T06:27:56.168Z","comments":true,"path":"vim-mark.html","link":"","permalink":"https://vim.ink/vim-mark.html","excerpt":"","text":"Vim的位置标记可以实现在文档中的快速跳转。可以通过命令 mark 或缩写形式 m 手动设置位置标记，Vim也会自动记录某些自身感兴趣的位置点，辅助实现某些快速跳转功能。 Vim标记简介Vim允许在打开的文件中放置自定义的标记。命令 ma 表示用 a 标记当前的光标位置。 可以在文本中使用 26 个标记 (a~z后A~Z)。这些标记是不可见的，只是一个由 Vim 记住的位置。 小写标记值在每个缓冲区(即Vim打开文件)局部可见，而大写标记则全局可见。 标注 设置者 使用 a-z 用户 仅对当前的一个文件生效，也就意味着只可以在当前文件中跳转 A-Z 用户 全局标注，可以作用于不同文件。大写标注也称为「文件标注」。跳转时有可能会切换到另一个缓冲区 0-9 viminfo 0 代表 viminfo 最后一次被写入的位置。实际使用中，就代表 Vim 进程最后一次结束的位置。1 代表 Vim 进程倒数第二次结束的位置，以此类推 要跳到一个你定义的标记，可以使用命令 `{mark}，这里 {mark} 是指定义标记的那个字母。所以，移到标记a的命令是：`a。 命令 &#39;{mark} (单引号加一个标记) 会移到标记所在行的行首。这与 `mark 命令是不同的， 因为后者是移到标记所在行上被标记的列位置，即同时恢复行、列的位置。 可以在Vim命令行模式下用命令 :marks 获得所有Vim标记的列表。命令行模式下使用命令 :h mark-motions 可以获取关于标注的更多帮助。 Vim自带一些特殊的标记，包括： 命令 跳转至 &#39;[ 与 `[ 上一次修改或复制的第一行或第一个字符 &#39;] 与 `] 上一次修改或复制的最后一行或最后一个字符 &#39;&lt; 与 `&lt; 上一次在可视模式下选取的第一行或第一个字符 &#39;&gt; 与 `&gt; 上一次在可视模式下选取的最后一行或最后一个字符 &#39;&#39; 与 `&#39; 上一次跳转之前的光标位置 &#39;&quot; 与 `&quot; 上一次关闭当前缓冲区时的光标位置 &#39;^ 与 `^ 上一次插入字符后的光标位置 &#39;. 与 `. 上一次修改文本后的光标位置 &#39;( 与 `( 当前句子的开头 &#39;) 与 `) 当前句子的结尾 &#39;{ 与 `{ 当前段落的开头 &#39;} 与 `} 当前段落的结尾 Vim标记示例Vim标记在需要处理一个文件的两个相关地方的时候非常有用。 假设你在处理文末的时候需要查看文首的一些内容，先移动到行首，设置一个标记 s (start)：ms。 然后移动到你需要处理的地方，再设置一个标记 e (end)：me。 现在你可以随意移动，当需要看开头的地方，可以使用这个命令移到那里：`s 或 &#39;s。 然后使用 &#39;&#39; 跳回来，或者用 `e 跳到你正在处理的文尾的地方。当然，这里使用 s 和 e 作标记名没有特别的含义，只是为了好记而已。 关于Vim标记的应用，推荐阅读使用位置标记实现Vim打开文件自动恢复上次的光标位置。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim标记","slug":"Vim标记","permalink":"https://vim.ink/tags/Vim标记/"},{"name":"vim标注","slug":"vim标注","permalink":"https://vim.ink/tags/vim标注/"},{"name":"vim-mark","slug":"vim-mark","permalink":"https://vim.ink/tags/vim-mark/"},{"name":"vim位置标记","slug":"vim位置标记","permalink":"https://vim.ink/tags/vim位置标记/"},{"name":"vim文档跳转","slug":"vim文档跳转","permalink":"https://vim.ink/tags/vim文档跳转/"}]},{"title":"7种提高工作效率的Vim操作-Vim使用技巧(6)","slug":"vim-seven-effective-ways","date":"2014-04-01T16:00:00.000Z","updated":"2019-04-27T15:36:41.706Z","comments":true,"path":"vim-seven-effective-ways.html","link":"","permalink":"https://vim.ink/vim-seven-effective-ways.html","excerpt":"","text":"Vim一直被认为是一种非常高效的文本编辑器，但是对于普通用户来说，很难在入门的时候就体会到Vim的所谓高效性。 本文介绍7种提高你工作效率和生产力的Vim使用技巧，主要集中在对某个文件范围内的特定目标执行相同的重复性操作。抛砖引玉，作为你体验使用Vim进行高效操作的入门级教程。 1. Vim重复操作命令.在vim重复操作命令. (英文句点)介绍过，. 命令可以用于重复上次修改。在《Vim实用技巧》一书中花了大量篇幅介绍” . 范式”：一次按键移动，一次按键执行。 假设想在以下的JavaScript代码里的 + 前后加上空格以使代码更加美观，可以执行以下Vim操作：f+s␣+␣&lt;Esc&gt;;.;.;. 1var foo = \"method(\"+argument1+\",\"+argument2+\")\"; 在上面的Vim操作中，首先使用字符查找命令 f 查找到第一个出现 + 的位置，然后使用 s 命令删除光标下的字符后再进入插入模式，在输入完 ␣+␣ 后退出插入模式，完成了第一个 + 前后增加空格的操作。 使用Vim命令 ; 会在当前行重复查找上次 f 命令所查找的目标字符，而 . 命令则重复上次的修改。因此，可以连续输入 3 次 ;. 来完成全部修改操作。 注：Vim命令 s 是 cl 的复合命令形式，表示删除一个字符并进入插入模式，更多内容可参考Vim删除并进入插入模式命令c。 2. Vim宏使用Vim . 命令重复执行一些比较简单的任务时非常高效，但是当需要执行的操作比较复杂时，Vim宏是更理想的选择。 Vim宏很适合针对一系列相似的行、段落，甚至是文件，进行重复性的修改。用宏把任意数目的按键操作录制到寄存器，用于之后的回放，可以非常高效地实现重复操作。 假如有很多宏定义的常量123456#define CONST_A 1 #define CONST_B 2#define CONST_C 3#define CONST_D 4#define CONST_E 5... 现在想替换成const常量的形式123456const int CONST_A = 1;const int CONST_B = 2;const int CONST_C = 3;const int CONST_D = 4;const int CONST_E = 5;... 可以录制这样的一个宏： 按 qa 键开始录制宏，将宏存到 a 寄存器 按 0 将光标移到行首，按 ce 删除 #define 并进入插入模式，输入 const int 并按ESC回到普通模式 按 e 来到变量名的最后一个字母，按 a 进入插入模式，输入 = ，按ESC回到普通模式 按 A 将光标移动到最后并进入插入模式，输入 ; 并按ESC回到普通模式 按 j 将光标移到下一行，按 q 结束宏录制 录完这个宏之后，就可以按 @a 回放录制的宏操作。每执行一次宏就会把当前行替换成const的形式并自动将光标移到下一行。 因此，只需要按9次 @a 或者一次性执行 9@a 就可以替换完所有要编辑的行。 3. Vim可视化模式Vim可视化模式下可以选择一块编辑区域，然后对选中的文件内容执行插入、删除、替换、改变大小写等操作。 可视化模式能高效地对一块目标区域执行相同的操作，是在Vim场景下执行重复操作的一种高效方法。 比如，如果想一次性注释多行文本，可以如下操作： (1) 普通模式下按 Ctrl + v 进入块选择模式(2) 向上或向下移动光标选择多行(3) 移动光标到行的起始位置(4) 然后按大写的I进入行首插入模式(5) 插入注释符(6) 按Esc回到命令模式 需要注意的是：Vim同时编辑多行时，只有在当前的插入动作 结束后 (按 Esc 退为命令模式)，之前选中的其它行才会显示执行后的结果。 4. Vim normal命令Vim normal 命令可以在命令行模式执行普通模式下的命令，当normal命令与Vim可视化模式结合时，只需很少的操作就能完成大量重复性工作。 比如在编辑Markdown文件时想在某些行前面都加上 - 让普通文本行变成无序列表，可以先用 V 选中这些行，然后按 :&#39;&lt;,&#39;&gt;normal I- 并回车即可实现。 5. Vim替换命令sVim命令行模式下使用 :substitute 命令 (缩写形式 s ) 可以将指定范围内的字符替换成其他目标字符，实现同时处理多个目标行的操作效果。 例如，假设希望将Vim当前打开文件的所有行尾多余的空格删除，可以使用Vim命令 :%s= *$==。 其中，% 表示整个文件范围，*$ 表示以0个或多个 * 结尾的文本行，更多关于 :substitute 命令的使用，可以参考Vim替换命令substitute小结。 6. Vim寄存器Vim中很多东西都是通过寄存器来传递，比如复制剪切一段文本、访问系统的剪贴板，录制的宏等，都是将对应的操作结果保存在寄存器内。使用 :reg 寄存器名 命令可以查看对应寄存器中的内容。 关于Vim寄存器的更多内容可以参考Vim教程网上的内容：Vim寄存器介绍、Vim剪切、复制、粘贴和删除操作与Vim无名寄存器。 在插入模式下或者命令行模式下，使用 &lt;C-r&gt;+寄存器名 可以输入寄存器里的内容。例如，在插入模式下，可以通过输入 &lt;C-r&gt;&quot; 来插入无名寄存器的内容，或输入 &lt;C-r&gt;0 来插入复制专用寄存器中的内容。 举个例子，想使用 :s 命令替换一个很长的单词而又不想手动输入它，可以先在普通模模式下使用命令 piw 或 piW 将其复制下来，默认会包存到无名寄存器 &quot; 里，然后使用 &lt;C-r&gt;&quot; 就可以将复制的单词输入到 :s 命令中。 7. Vim光标快速移动关于Vim光标移动的内容，可以查看Vim光标移动命令汇总，在此先不做赘述。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim操作范围","slug":"vim操作范围","permalink":"https://vim.ink/tags/vim操作范围/"},{"name":"vim重复操作","slug":"vim重复操作","permalink":"https://vim.ink/tags/vim重复操作/"},{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/tags/Vim技巧/"},{"name":"vim高效方法","slug":"vim高效方法","permalink":"https://vim.ink/tags/vim高效方法/"}]},{"title":"Vim normal命令和重复操作-Vim入门教程(33)","slug":"vim-normal-command","date":"2014-03-27T16:00:00.000Z","updated":"2019-04-27T15:36:41.673Z","comments":true,"path":"vim-normal-command.html","link":"","permalink":"https://vim.ink/vim-normal-command.html","excerpt":"","text":"如果想在一系列连续行上执行一条普通模式命令，可以用Vim :normal 命令 (缩写形式 :norm)。此命令在与 . 命令 或 vim宏结合使用时，只需花费很少的努力就能完成大量重复性任务。 一、Vim normal命令介绍Vim normal命令的使用形式为 :{range}norm[al][!] {commands}，表示在 {range} 指定的范围内的每行执行若干 普通模式命令 {commands}。{commands} 不能以空格开始，除非在空格前面加个计数 1。 例如，vim命令 :normal ggdd 会将光标移动到文件的第一行( gg) 并删除它( dd )。 Vim normal命令使得在命令行模式执行普通模式命令成为可能。撤销操作会撤销所有的命令。 如果某行执行命令时发生错误，不会影响其他行的命令执行，即vim normal命令是在所有目标行上 并行 执行。 注意：在执行 {commands} 之前，会先将光标定位在每一行的第一列; 因此，vim命令 :%normal i// 可以注释掉整个文件，而不用担心当前光标所在的位置。但是，当vim :normal命令还在工作的时候，整个屏幕显示不会被刷新。 二、避免vim映射normal命令中的可选参数 ! 用于指示vim在当前命令中不使用任何vim映射；如果没有显式使用 ! 选项，即便是执行一个非递归映射 (noremap) 命令，它的参数仍有可能被重新映射。 例如，假设已经设置了vim映射 :nnoremap G dd，则在vim普通模式按下 G 将执行命令 dd，即会删除一整行；此时，若在vim命令行模式下执行命令 :normal G 同样将删除当前行而不会跳转到当前文件的末行。 为了在即便 G 命令已经被设置了映射的条件下也能在vim normal命令中不改变 G 命令原始的含义，需要使用 :normal! G。通过 ! 选项显式指示Vim在当前命令中不使用任何vim映射。 所以，在任何时候写Vim脚本时，都建议总是使用 normal!，永远不要使用 normal 而给自己埋下不确定性的问题。 三、normal命令与vim重复命令虽然用 :normal 命令可以执行任意的普通模式命令，但当它和Vim的重复命令结合在一起时最为强大。当需要重复的操作比较简单时，可以配合使用 :normal . 命令，而如果需要执行的重复操作比较复杂时，可以使用 :normal @q 命令来发挥vim宏强大的操作记录功能。 四、normal命令使用示例4.1 行尾批量加分号假设想在某个文件的一系列行尾添加一个分号 ;，使用vim重复操作命令 . 当然可以完成这一任务。但是如果想对100行内容执行末尾加分号的操作，如果使用 . 命令，则需要按100次 j.，这显然不是一个好的方法。 为了完成上述任务，vim教程网介绍一种使用 normal 命令执行 . 命令的新方法。 首先使用命令 A; 在光标所在当前行末尾增加 ; 然后按 j 跳到下一行末尾后按 V 进入vim块选择可视化模式，然后按 G 跳转到文件尾行，从而完成目标行的选择 最后，在vim命令行模式下执行命令 :&#39;&lt;,&#39;&gt;normal . :&#39;&lt;,&#39;&gt;normal . 命令可以解读为 对高亮选区中的每一行 执行普通模式下的 . 命令。无论是操作 100 行还是 1000 行文本，这种方法都能高效地完成任务，而且在可视模式中选中这些行可以摆脱计数的负担。 注：&#39;&lt;,&#39;&gt; 代表高亮选区的范围。在可视化模式下选择完范围后，如果按下 : 键，vim命令行上就会自动填充 :&#39;&lt;,&#39;&gt;。 4.2 文件每行结尾加分号更特别一点，如果想在当前vim打开文件的每行的结尾都添加一个分号，可以使用命令 :normal A; 。 符号 % 代表整个文件范围，因此 :%normal A; 告诉 Vim 在文件每行的结尾都执行vim普通模式下的命令 A;。在做此修改时会切换到插入模式，但是在修改完后 Vim 会自动返回到普通模式。 4.3 修改数字编号为单括号假设希望将以下文本内容的每个行编号修改为单括号，并将首个单词首字母大小。 转换成vim下的操作就是：需要将每行首个 . 字符修改成 )，再将下一个单词的首字母变为大写。 1234566. six7. seven8. eight// break up the monotony9. nine10. ten 为了高效地实现上述文本转换，首先，在vim普通模式下录制宏 qa0f.r)w~q，然后按键 jVG 选择操作区域后，再执行命令 :&#39;&lt;,&#39;&gt;normal @a 即可完成任务。 :normal @a 命令指示 Vim 在高亮选区中的每一行上执行保存在寄存器a中的宏内容。虽然宏操作在第 4 行会被中断 (f.没有在该行找到目标字符 .)，但并不会影响后续行上宏的执行。 因为前面已经提到过，normal 命令在目标行上是并行执行操作。 注意：本文提到的 并行 意在类比并联电路的健壮性，从本质上来说，vim仍然是顺序地执行宏，而不会真正地并发执行多处修改。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim视频教程","slug":"vim视频教程","permalink":"https://vim.ink/tags/vim视频教程/"},{"name":"vim重复操作","slug":"vim重复操作","permalink":"https://vim.ink/tags/vim重复操作/"},{"name":"Vim-normal","slug":"Vim-normal","permalink":"https://vim.ink/tags/Vim-normal/"},{"name":"vim-norm","slug":"vim-norm","permalink":"https://vim.ink/tags/vim-norm/"},{"name":"vim-normal-command","slug":"vim-normal-command","permalink":"https://vim.ink/tags/vim-normal-command/"}]},{"title":"谈谈Vim中的操作符和动作命令-Vim入门教程(32)","slug":"vim-operator-and-motion","date":"2014-03-19T16:00:00.000Z","updated":"2019-03-04T16:35:54.005Z","comments":true,"path":"vim-operator-and-motion.html","link":"","permalink":"https://vim.ink/vim-operator-and-motion.html","excerpt":"","text":"1. 简介Vim中有两个比较基础的概念：操作符(operator)和动作(motion)。 操作符是用于对文本进行删除或修改操作的命令。例如，d、~、gU 和 &gt; 等都是 Vim 操作符。Vim支持的所有操作符含义如下： 命令 含义 c 修改 d 删除 y 复制到寄存器 g~ 反转大小写 gu 转换为小写 gU 转换为大写 &gt; 增加缩进 &lt; 减小缩进 = 自动缩进 ! 使用外部程序过滤{motion}所跨越的行 gq 文本排版 g? ROT13 编码 zf 定义折叠 g@ 调用 &apos;operatorfunc&apos; 选项定义的函数 动作 (用{motion}表示) 是指移动光标的命令或动作。如经常使用的 h、j、k 和 l；/ 和 ? 也是动作命令，如 2?the 可以将光标移动到倒数第二个 “the” 出现的位置；此外，w 表示移动至下一个单词的首部，b 表示移动至当前单词的首部，4j 表示下移四行，这些都是 Vim 动作命令。 2. 操作符与动作命令语法vim操作符与动作命令的结合形成了一种语法。 这种语法的第一条规则很简单：一个操作由一个操作符，后面跟一个动作命令组成。 动作命令出现在操作符之后，从而使得操作符作用于被该动作 所标识的文本 (在该动作之前和之后的光标位置之间的文本)之上。 即：一个动作可通过动作前和动作后的两个位置标识出一个文本区域，而标识出来的文本区域会用于执行操作符命令。 例如，由操作符和动作命令组成的 d{motion} 命令可以完成对一个字符 ( dl ) 或 一个完整单词 ( dw ) 的删除操作，删除操作作用的范围由具体的动作命令 motion 决定。同理，y2j 会复制光标当前所在位置下两行 (2j) 的内容到 Vim 无名寄存器中。 操作符和动作命令都可以搭配数字使用，用于完成多次相同的操作。如果动作命令包括一个次数而操作符之前也有一个的话，则两者相乘。例如，2d3w 命令会删除6个单词，等价于 6dw 命令 或 d6w 命令。 学习新的动作命令及操作符，就像是在学习 Vim 的词汇一样。如果掌握了这一简单的语法规则，在词汇量增长时，就能表达更多的想法。 假如我们已经知道如何用 daw 删除一个单词，然后又学到 gU 命令也是个操作符 (转成大写形式)，所以我们可以用 gUaw 把当前单词转换成大写形式。 如果我们的词汇进一步扩充，学会了作用于段落的 ap 动作命令，就会发现我们可以进行两个新的操作：用 dap 删除整个段落，或者用 gUap 把整段文字转换为大写。 Vim的语法有一条额外规则：当一个操作符命令被连续调用两次时，它会作用于当前行。 所以 dd 删除当前行，而 &gt;&gt; 缩进当前行。 gU 命令是一种特殊情况，我们既可以用 gUgU ，也可以用简化版的 gUU 来使转换大写操作完整作用于当前行。 3. vim操作符待决模式基于上述语法，引出了一种新的vim模式：操作符待决模式 (operator pending mode)，如果键入了操作符命令但还没有键入动作命令，则Vim正处于操作符待决模式下。 例如，在执行命令 dw 时就会激活该模式。这一模式只在按 d 及 w 键之间的短暂时间间隔内存在。 如果把 Vim 想象成有限状态机，那么操作符待决模式就是一个只接受动作命令的状态。这个状态在调用操作符时被激活，然后什么也不做，直到输入一个动作命令，完成整个操作。 当操作符待决模式被激活时，我们可以像平常一样按 中止该操作，返回到普通模式。 命令 :omap 可以在待决模式时对字符进行映射，允许我们创建自定义的操作符及动作命令，从而扩充 Vim 的”词汇”。 只有Vim操作符才会激活操作符待决模式。 注：很多vim命令都通过两个或更多的按键来调用 (例如：zF、g&amp;、[&#39;、CTRL-W b)，但在多数情况下，第一个按键只是第二个按键的前缀。这些命令不会激活操作符待决模式，相反，可以把它们当成命名空间，用来扩充可用命令的数目。 4. 动作命令的作用范围 大多数情况下，光标在应用操作符后停在被操作的文本的 起始处。所以，yfe 不移动光标，而 yFe 则向左移动光标到标识的文本的起始的那个 e 上。 操作符会影响开始和结束位置之间的整行或者字符区间。一般说来，在行间移动的动作影响整行 (或者说面向行的)，而在行内移动的动作影响字符区间 或者说面向字符的)。 面向字符的动作可以是闭区间的，也可以是开区间的。闭区间动作的开始和结束位置包含在操作范围里，开区间动作中，靠近缓冲区尾端的最后一个字符不被包含在内。例如，Vim字符查找与光标快速移动提到的命令 t。 面向行的动作总包含开始和结尾的位置，即整行。 5. 操作符与可视化模式除了先给出操作符再给出动作的方式以外，还可以用Vim可视模式：先用 “v” 标记文本的开始处，移动光标到文本的末尾，然后再输入操作符。 不同之处在于：Vim 普通模式下是先按操作符再按动作指令，而可视模式中，选中区域后直接按操作符就可以执行命令 开始和当前光标位置之间的文本以高亮显示，从而你可以直观地看到要操作的文本。 https://github.com/wsdjeg/vim-galore-zh_cn/blob/master/README.md#%E5%8A%A8%E4%BD%9C%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%96%87%E6%9C%AC%E5%AF%B9%E8%B1%A1","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim操作符","slug":"Vim操作符","permalink":"https://vim.ink/tags/Vim操作符/"},{"name":"vim动作命令","slug":"vim动作命令","permalink":"https://vim.ink/tags/vim动作命令/"},{"name":"vim-operator","slug":"vim-operator","permalink":"https://vim.ink/tags/vim-operator/"},{"name":"vim-motion","slug":"vim-motion","permalink":"https://vim.ink/tags/vim-motion/"},{"name":"vim语法","slug":"vim语法","permalink":"https://vim.ink/tags/vim语法/"}]},{"title":"Vim字符查找与光标快速移动-Vim入门教程(32)","slug":"vim-find-char","date":"2014-02-28T16:00:00.000Z","updated":"2019-04-27T15:35:46.057Z","comments":true,"path":"vim-find-char.html","link":"","permalink":"https://vim.ink/vim-find-char.html","excerpt":"","text":"在Vim搜索命令一文介绍了使用 /、? 来查找特定 字符串 的方法。 当需要查找某个 字符 时，除了使用常规的vim搜索命令外，还可以在vim普通模式下使用 f 命令。 1. 移动光标到目标字符vim字符查找命令 f{char} 表示在光标所在当前行搜索目标字符 char (char表示某个字母)。 而命令 F{char} 表示在当前行 反向 搜索目标字符。两者的具体含义描述如下： f{char} 命令用于在光标所在位置与当前行行尾之间查找指定字符第一次出现的位置，若找到，则将光标移动到该字符上，若没找到，则保持光标不动 F{char} 命令用于在光标所在位置与当前行行首之间反向查找指定字符第一次出现的位置，若找到，则将光标移动到该字符上，若未找到，则保持光标不动 vim会记录上次执行的 f{char} 命令，可以用 ; 重复执行该命令，从而将光标移动到某个特定的目标字符。字符查找命令 f{char} 结合 ; 可以让vim使用者用很少的按键实现光标快速移动。 如果按 ; 的次数过多，导致光标越过了要查找的目标，可以用 , 命令反向移动光标。, 命令也会重复上次执行的 f{char} 命令，不过是按反方向进行查找。 2. 移动光标到目标字符的前一个字符vim命令 t{char} 用于在当前行查找目标字符，并将光标移动到目标字符第一次出现位置的 前一个字符 上。同样地，vim命令 T{char} 反向移动 到 上一个 目标字符所在位置的后一个字符上。 注意：; 命令和 , 命令同样适用于上述的 t{char} 命令和 T{char} 命令，且含义与上文描述的一致。 vim命令 用途 f{char} 正向 移动到 下 一个 {char} 所在之处 F{char} 反向 移动到 上 一个 {char} 所在之处 t{char} 正向 移动到 下 一个 {char} 所在之处的前一个字符上 T{char} 反向 移动到 上 一个 {char} 所在之处的后一个字符上 ; 重复上次的字符查找命令 , 反方向 重复上次的字符查找命令 3. vim字符查找视频教程f{char} 命令和 t{char} 命令标识出了vim中的一段操作范围，可以和其他vim操作符联动，例如 dt. 表示在光标所在位置到当前行末尾的范围内，删除光标所在位置到首次出现 . 的前一个字符所在位置的所有字符。 一个简单的vim视频教程如下所示，使用了文中描述的所有命令。 注：上面的vim视频教程里的按键顺序依次为：fo;;,to;,,f,dt.。在教程后半部分，首先使用 f, 查找了的 , 出现的位置，再使用命令 dt. 删除了从 , 到 . 这段范围内的内容。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim-f","slug":"vim-f","permalink":"https://vim.ink/tags/vim-f/"},{"name":"vim字符查找","slug":"vim字符查找","permalink":"https://vim.ink/tags/vim字符查找/"},{"name":"vim-T","slug":"vim-T","permalink":"https://vim.ink/tags/vim-T/"},{"name":"vim视频教程","slug":"vim视频教程","permalink":"https://vim.ink/tags/vim视频教程/"}]},{"title":"Vim自动生成tags插件vim-gutentags安装和自动跳转方法-Vim插件(10)","slug":"vim-gutentags","date":"2014-02-24T16:00:00.000Z","updated":"2019-04-27T15:35:46.081Z","comments":true,"path":"vim-gutentags.html","link":"","permalink":"https://vim.ink/vim-gutentags.html","excerpt":"","text":"在常规的使用ctags生成tag标签文件实现跳转的方式下，每次需要更新tags文件时都需要手工运行 ctags -R 生成当前项目所有源文件对应的tag标签文件。 当工程文件多、文件更新频繁时，上述生成tags文件的方法显得笨拙、低效。 得益于 Vim 8 提供的异步机制，vim插件vim-gutentags能够自动异步生成 tags 文件，当检测到同一个工程下面的文件有修改时，gutentags能自动增量更新对应工程的 tags 文件，而不用全部重新生成tags文件，是一个非常高效的tags生成工具。 1.1 软件依赖vim-gutentags的本质仍然是使用ctags生成tag标签来实现函数跳转等功能，只是在ctags的基础上进行了封装和简化(具体封装方式在后文有简单分析)，方便用户在vim中使用。 由于vim-gutentags依赖ctags工具，因此在使用vim-gutentags插件的系统中必须安装ctags软件，否则会报错”Excutable ‘ctags’ can’t be found.”。 关于ctags的介绍和安装方法，可以参考vim教程网上的文章Vim使用ctags实现函数跳转。 其次，vim-gutentags需要在vim8.0以上版本才能正常工作，因为vim-gutentags实现的是增量更新tags的方式，依赖于vim8提供的异步机制。 在低于vim8.0的版本是运行vim-gutentags插件，会报错”this plugin requires the job API from Vim8 or Neovim”。 关于vim8的编译和安装，可以参考vim教程网上的文章vim安装教程。 1.2 gutentags安装方法本文介绍使用插件管理器vim-plug安装vim-gutentags插件。 在配置文件 ~/.vimrc 中增加配置项 Plug &#39;ludovicchabant/vim-gutentags&#39; 后再在vim命令行模式下执行命令 :PlugInstall 即可完成vim-gutentags插件的安装。 二、vim-gutentags配置介绍和原理分析vim-gutentags插件的基本工作原理可以这么理解：首先确定vim当前打开的文件是否需要自动生成tags标签，若需要则通过某种方式确定tag文件的路径，再基于tag标签文件完成函数跳转、结构体定义跳转等功能。 因此，vim-gutentags需要确定是否需要生成tags标签文件，又需要告诉ctags软件自身生成的tags文件的具体路径信息 (因为从Vim使用ctags实现函数跳转一文已知，默认情况下，生成的tags文件必须在vim运行的当前目录才能在vim里面正确跳转)。 2.1 gutentags配置为了提供上述信息给vim-gutentags，安装完gutentags后，需要在vim配置文件中增加以下必要的配置项。 123456789101112131415161718\" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 \"let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']\" 所生成的数据文件的名称 \"let g:gutentags_ctags_tagfile = '.tags'\" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录 \"let s:vim_tags = expand('~/.cache/tags')let g:gutentags_cache_dir = s:vim_tags\" 检测 ~/.cache/tags 不存在就新建 \"if !isdirectory(s:vim_tags) silent! call mkdir(s:vim_tags, 'p')endif\" 配置 ctags 的参数 \"let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']let g:gutentags_ctags_extra_args += ['--c-kinds=+px'] 变量 gutentags_project_root 是vim-gutentags提供的用于搜索工程目录的标志，gutentags插件启动后，会从文件当前路径递归往上查找 gutentags_project_root 中指定的文件或目录名，直到第一次找到对应目标文件或目录名停止。若没有找到 gutentags_project_root 变量指定的文件或目录名，则gutentags不会生成tag文件。 变量 gutentags_ctags_tagfile 和 gutentags_cache_dir 分别用于告诉ctags要使用的tag文件目录和tag文件名后缀，tag文件名的生成规则默认是根据生成tag文件的工程绝对路径按 - 分割而成。 变量 gutentags_ctags_extra_args 用于配置ctags生成tag标签的参数，具体参数含义可参考文章ctags参数介绍 所以，上面的gutentags配置指定了从当前路径向上递归查找是否有 .root、.svn、 .git、.project 等标志性文件来确定当前文档所属的工程目录；而ctags要使用的tag标签文件的路径为 ~/.cache/tags，文件后缀为 .tags。 ctags 软件需要使用命令 :set tags+=tags文件路径 显式地指定tag文件路径，从文件 ~/plugged/vim-gutentags/autoload/gutentags/ctags.vim 可以看出，gutentags执行了命令 setlocal tags+= 来添加变量 gutentags_ctags_tagfile 指定的tag文件到局部 tags 搜索列表中。 2.2 gutentags示例安装了gutentags并且进行了上面的设置后，平时打开vim编辑文件基本感觉不到 tags 文件的生成过程了，只要文件修改过，gutentags 都在后台默默分析是否需要更新数据文件，还会帮你：setlocal tags+=… 添加到局部 tags 搜索列表中。得益于 Vim 8 的异步机制，你可以任意随时使用 ctags 相关功能，并且数据库都是最新的。 就像下面的vim视频教程一样，假设已经在vim配置文件中添加了上面的配置项，在当前目录新建文件 .project 后再打开当前目录下的任意文件，再退出vim后可以看到，gutentags已经为当前目录生成了tags文件 ~/.cache/tags/home-vim-vim.ink-libevent-.tags。 需要注意的是，gutentags 需要靠上面定义的 gutentags_project_root 判断文件所在的工程，如果一个文件没有保存在包含 .git、.svn、.root等 定义在 gutentags_project_root 中的文件，gutentags就不会为该野文件生成 tags。 想要避免的话，你可以在你的野文件目录中放一个名字为 .root 的空白文件，主动告诉 gutentags 这里就是工程目录。 2.3 基于gutentags实现跳转在为当前目录生成tags文件后，可以通过按键 Ctrl + ] 跳转到对应的定义位置，再使用命令 Ctrl + o 回退到原来的位置。关于跳转的具体应用，可以参考Vim使用ctags实现函数跳转 另外，建议多使用 Ctrl + W + ] 用新窗口打开并查看光标下符号的定义，或者 Ctrl -W } 使用 preview 窗口预览光标下符号的定义。","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim-gutentags","slug":"vim-gutentags","permalink":"https://vim.ink/tags/vim-gutentags/"},{"name":"vim-tag生成工具","slug":"vim-tag生成工具","permalink":"https://vim.ink/tags/vim-tag生成工具/"},{"name":"vim自动tag","slug":"vim自动tag","permalink":"https://vim.ink/tags/vim自动tag/"},{"name":"vim增量更新tags","slug":"vim增量更新tags","permalink":"https://vim.ink/tags/vim增量更新tags/"},{"name":"vim函数跳转","slug":"vim函数跳转","permalink":"https://vim.ink/tags/vim函数跳转/"}]},{"title":"vim8安装教程和vim中文帮助文档Vimcdoc安装方法-Vim使用技巧(5)","slug":"install-vim-and-vimcdoc","date":"2014-02-14T16:00:00.000Z","updated":"2019-04-27T15:35:45.936Z","comments":true,"path":"install-vim-and-vimcdoc.html","link":"","permalink":"https://vim.ink/install-vim-and-vimcdoc.html","excerpt":"","text":"Vim8.0是近十年来的一次大更新，支持任务、异步I/O、Channels和JSON以及异步计时器、Lambdas 和 Closures等，还包括对GTK + 3的支持。由于ubuntu默认安装的Vim版本一般都是7.4.52，该版本不满足许多vim插件的需求(如YouCompleteMe)，因此需要升级Vim到新版本。 1. 源码编译安装vim8Ubuntu下源码编译安装Vim8的方法如下：1234git clone https://github.com/vim/vim.gicd vim./configure --enable-pythoninterp=yes --with-python-config-dir=/usr/lib/python2.7/configmake &amp;&amp; make install 若在执行configure时报错 “no terminal library found checking for tgetent()… configure: error: NOT FOUND! You need to install a terminal library; for example ncurses. Or specify the name of the library with –with-tlib”，是因为系统缺少ncurses库，可通过安装libncurses5-dev解决。 12\" 安装libncurses5-dev \"sudo apt-get install libncurses5-dev 通过上述方式安装的vim二进制文件在默认在 /usr/local/bin/vim，如果系统自带vim并未被删除且你希望同时使用两个版本的vim，可以在 ~/.bashrc 中为vim8设置别名，然后执行 source ~/.bashrc 让配置立即生效。 1alias vim='/usr/local/bin/vim' 此后，在vim终端输入vim命令时将默认使用Vim8源码编译的二进制文件 /usr/local/bin/vim。 2. 安装vim中文帮助文档Vimcdoc默认在vim命令行模式下输入 :help 获得的vim帮助文档内容为英文。Vimcdoc是对vim帮助文档的中文翻译 (Vimcdoc is an attempt to translate the wonderful Vim online documentation into Chinese)，托管在sourceforge，路径为：http://vimcdoc.sourceforge.net/。 安装vim中文帮助文档Vimcdoc的方法如下： 123wget https://sourceforge.net/projects/vimcdoc/files/vimcdoc/vimcdoc-2.1.0.tar.gz/download -o vimcdoc-2.1.0.tar.gztar -zxvf vimcdoc-2.1.0.tar.gzcd vimcdoc-2.1.0 &amp;&amp; ./vimcdoc.sh -i 当以普通用户执行 vimcdoc.sh 脚本安装时，所有中文帮助文件均会被拷贝至 ~/.vim/doc 目录下，安装的vim中文帮助文档仅对该用户有效。 若想卸装当前用户安装的Vimcdoc，只需执行脚本命令 ./vimcdoc.sh -u 即可。 vim中文帮助文件的文本是以utf-8进行编码的, 如果想用vim直接查看, 需要在配置文件 ~/.vimrc中 增加配置项 set encoding=utf-8。 注：使用-i选项安装Vimcdoc时，缺省会安装 vimcdoc.vim 全局插件，该插件会在 .vim 下生成一个plugin目录。如果不想安装vimcdoc插件，可以使用命令 ./vimcdoc.sh -I。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"vim安装方法","slug":"vim安装方法","permalink":"https://vim.ink/tags/vim安装方法/"},{"name":"vim8编译","slug":"vim8编译","permalink":"https://vim.ink/tags/vim8编译/"},{"name":"vimcdoc","slug":"vimcdoc","permalink":"https://vim.ink/tags/vimcdoc/"},{"name":"vim中文帮助","slug":"vim中文帮助","permalink":"https://vim.ink/tags/vim中文帮助/"},{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"}]},{"title":"Vim轻量高效插件管理神器vim-plug介绍-Vim插件(9)","slug":"vim-plug","date":"2014-02-01T16:00:00.000Z","updated":"2019-04-27T15:34:36.576Z","comments":true,"path":"vim-plug.html","link":"","permalink":"https://vim.ink/vim-plug.html","excerpt":"","text":"Vundle是一款非常出名且历史悠久的Vim插件管理工具。但随着安装的vim插件越来越多，使用Vundle来管理这些插件时效率变得越来越低，vim启动耗时也越来越大。 而vim-plug是一款非常轻量又高效的vim插件管理工具。它支持全异步、多线程并行安装插件，支持git分支、标签等，可以对插件进行回滚更新、还支持按需加载插件(On-demand loading)，可以指定对特定文件类型加载对应vim插件，大大加快了vim启动时间。 1.1 安装vim-plug插件管理器vim-plug使用github进行托管和维护，只需要下载对应的 plug.vim 文件并保存到 autoload 目录即可完成安装。 ubuntu系统下可使用以下命令快速安装vim-plug。 123mkdir ~/.vim/autoload/cd ~/.vim/autoload/wget https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 或使用curl工具来简化下载过程。 12curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 1.2 vim-plug配置介绍使用vim-plug安装vim插件的方法与另外一个著名的vim插件管理器Vundle非常相似，只需要在vim配置文件 ~/.vimrc 增加以 call plug#begin(PLUGIN_DIRECTORY) 开始，并以 plug#end() 结束的配置段即可。 下面是一个典型的vim-plug的配置实例，使用了多种vim-plug相关的配置形式。 1234567891011call plug#begin('~/.vim/plugged')Plug 'junegunn/vim-easy-align'Plug 'https://github.com/junegunn/vim-github-dashboard.git'Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'Plug 'scrooloose/nerdtree', &#123; 'on': 'NERDTreeToggle' &#125;Plug 'tpope/vim-fireplace', &#123; 'for': 'clojure' &#125;Plug 'rdnetto/YCM-Generator', &#123; 'branch': 'stable' &#125;Plug 'nsf/gocode', &#123; 'tag': 'v.20150303', 'rtp': 'vim' &#125;Plug 'junegunn/fzf', &#123; 'dir': '~/.fzf', 'do': './install --all' &#125;Plug '~/my-prototype-plugin'call plug#end() 在上面的vim-plug配置中，以 call plug#begin(&#39;~/.vim/plugged&#39;) 标识vim-plug配置的开始并显式指定vim插件的存放路径为 ~/.vim/plugged； Plug &#39;junegunn/vim-easy-align&#39; 使用缩写形式指定了插件在github的地址 (https://github.com/junegunn/vim-easy-align)； Plug &#39;https://github.com/junegunn/vim-github-dashboard.git&#39; 则用完整的URL指定插件在github的位置； Plug &#39;SirVer/ultisnips&#39; | Plug &#39;honza/vim-snippets&#39; 用 | 将两个vim插件写在同一行配置中； Plug &#39;scrooloose/nerdtree&#39;, { &#39;on&#39;: &#39;NERDTreeToggle&#39; } 使用 按需加载，表明只有在 NERDTreeToggle 命令被调用时, 对应的插件才会被加载； Plug &#39;tpope/vim-fireplace&#39;, { &#39;for&#39;: &#39;clojure&#39; } 使用 按需加载，表明只有编辑 clojure 类型的文件时该插件才会被打开； Plug &#39;rdnetto/YCM-Generator&#39;, { &#39;branch&#39;: &#39;stable&#39; } 显式指定使用YCM-Generator插件的 stable 分支； Plug &#39;nsf/gocode&#39;, { &#39;tag&#39;: &#39;v.20150303&#39;, &#39;rtp&#39;: &#39;vim&#39; } 指定插件所用git标签，rtp描述了包含vim插件的子目录； Plug &#39;junegunn/fzf&#39;, { &#39;dir&#39;: &#39;~/.fzf&#39;, &#39;do&#39;: &#39;./install --all&#39; } 用 dir 选项单独指定了该插件存放的目录，do选项用于 Post-update hook，指定在安装或者更新完插件后所需要执行的额外操作； Plug &#39;~/my-prototype-plugin&#39; 表示不用github托管的本地vim插件； call plug#end() 用于标识vim-plug配置的结束。 总结上面的vim-plug配置，可以发现vim-plug支持以下配置项： 选项 功能描述 branch/tag/commit 所用插件git仓库的Branch/tag/commit rtp 包含vim插件的子目录 dir 该vim插件的定制化目录 (Custom directory) as 给vim插件取别名 do Post-update hook，某些vim插件在完成安装或更新后，需要执行额外的操作，可以使用 do 选项指定具体的操作或函数 on 按需加载: vim命令或&lt;Plug&gt;-mappings for 按需加载: 文件类型 frozen Do not update unless explicitly specified 注：do 选项的操作如果是以 : 开头，则表示其为vim命令，例如: Plug &#39;fatih/vim-go&#39;, { &#39;do&#39;: &#39;:GoInstallBinaries&#39; } 1.3 使用vim-plug安装vim插件在Vim命令行模式下，使用命令 :PlugInstall 可安装vim配置文件中所有配置的vim插件；也可以使用 PlugInstall [name ...] 来指定安装某一个或某几个vim插件。 :PlugStatus 可查看vim插件的当前状态，:PlugUpdate [name ...] 用于安装或更新对应vim插件，而vim-plug本身的更新则使用命令 :PlugUpgrade。 vim-plug的命令列表如下所示。 命令 功能描述 PlugInstall [name ...] [#threads] 安装插件 PlugUpdate [name ...] [#threads] 安装或更新vim插件 PlugClean[!] 卸装未使用的目录 (bang version will clean without prompt) PlugUpgrade 更新vim-plug自身 PlugStatus 查看vim插件的状态 PlugDiff 对比上次PlugUpdate的更改 (Examine changes from the previous update and the pending changes) PlugSnapshot[!] [output path] 保存当前插件的镜像副本到指定目录 (Generate script for restoring the current snapshot of the plugins)","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim插件管理","slug":"Vim插件管理","permalink":"https://vim.ink/tags/Vim插件管理/"},{"name":"vim-plug","slug":"vim-plug","permalink":"https://vim.ink/tags/vim-plug/"},{"name":"vim按需加载","slug":"vim按需加载","permalink":"https://vim.ink/tags/vim按需加载/"},{"name":"vim-on-demand-loading","slug":"vim-on-demand-loading","permalink":"https://vim.ink/tags/vim-on-demand-loading/"},{"name":"vim-plugdiff","slug":"vim-plugdiff","permalink":"https://vim.ink/tags/vim-plugdiff/"}]},{"title":"Vim global命令和重复操作-Vim入门教程(31)","slug":"vim-global-command","date":"2014-01-27T16:00:00.000Z","updated":"2019-04-27T15:35:46.071Z","comments":true,"path":"vim-global-command.html","link":"","permalink":"https://vim.ink/vim-global-command.html","excerpt":"","text":"Vim global命令允许我们在某个指定模式的所有匹配行上运行可执行的 Ex 命令，缩写形式为 :g，其处理重复工作的效率极高。 global 命令的执行原理和执行流程是：global 命令会在指定的 range 范围内，标记所有匹配 pattern 的文本行，并对匹配的行逐行执行 Ex 命令。理解透这句话，可以使用global命令解决大多数问题，推荐阅读Vim处理文本之奇偶行删除。 一、Vim global命令介绍Vim global命令形式为 :[range]g[lobal][!]/{pattern}/[cmd]，用于指示Vim在 [range] 界定范围内对 (不) 匹配模式 {pattern} 的文本行执行 Ex 命令 [cmd]。 range&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示操作范围，Vim :global 命令的默认作用范围是整个文件 (用%表示) !&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示反转 :global 命令的行为，将在没有匹配到指定模式的行上执行 [cmd] pattern &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指定 :global 命令要匹配的目标模式，若将该域留空，Vim会自动使用当前(最近一次)的查找模式 cmd &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;除 :global 命令之外的任何 Ex 命令，Vim缺省使用 :print 命令 (缩写 :p) 二、Vim global命令使用技巧2.1 删除所有包含模式的文本行假设有以下一段html代码，每列表项均由主题的标题及其URL两部分数据构成，我们将利用一条 :global 命令分别取出这两组数据。 1234567891011121314151617&lt;ol&gt; &lt;li&gt; &lt;a href=\"/episodes/show-invisibles/\" &gt; Show invisibles &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/episodes/tabs-and-spaces/\" &gt; Tabs and Spaces &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"/episodes/whitespace-preferences-and-filetypes/\" &gt; Whitespace preferences and filetypes &lt;/a&gt; &lt;/li&gt;&lt;/ol&gt; 如果想保留 &lt;a&gt; 标签内的标题内容而把其他行删掉，该怎么做? 首先，使用vim的搜索命令 /\\v\\&lt;\\/?\\w+&gt; 先匹配左尖括号 (\\&lt;)，再匹配可选的正斜杠 (\\/?)，再匹配一个或多个单词型字符(\\w+)，最后匹配分隔符 (&gt;)，从而匹配到所有html标签。\\v 表示使用正则表达式的 very magic 模式。 然后，在Vim命令行模式下使用global命令 :g//d 删除所有包含html标签的行。由于 :g//d 命令没有指定命令要匹配的目标模式，因此将默认使用上一次用到的搜索目标 /\\v\\&lt;\\/?\\w+&gt;。 最后，为了删除剩余行所有行首的多余空格，可以使用Vim替换命令 :%s/^ *//。 上述的Vim教程视频如下图所示。 如果想只包含 URL 的文本行，该如何操作？ 在vim命令行模式下使用Vim命令 :v/href/d 可实现只保存包含 URL的所有文本行。 如前面所介绍，:vglobal 或简写的 :v命令用于执行与 :g 命令完全相反的操作，:v/href/d 表示在指定模式 href 的非匹配行上执行 d操作。 同样地，为了删除行首的多余空格，可以用vim替换命令 :%s/^ *// 实现。对应vim视频教程如下图所示。 彩蛋：如果想删除vim当前打开文件中的所有空白行，可使用vim命令 :g/^\\s*$/d 实现。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim-global","slug":"vim-global","permalink":"https://vim.ink/tags/vim-global/"},{"name":"vim视频教程","slug":"vim视频教程","permalink":"https://vim.ink/tags/vim视频教程/"},{"name":"vim-g","slug":"vim-g","permalink":"https://vim.ink/tags/vim-g/"},{"name":"vim重复操作","slug":"vim重复操作","permalink":"https://vim.ink/tags/vim重复操作/"}]},{"title":"Vim自动缩进配置、原理和tab键替换空格-Vim使用技巧(4)","slug":"vim-indent","date":"2014-01-22T16:00:00.000Z","updated":"2019-04-27T15:36:41.664Z","comments":true,"path":"vim-indent.html","link":"","permalink":"https://vim.ink/vim-indent.html","excerpt":"","text":"一、Vim缩进介绍在没有设置Vim自动缩进的条件下，可以手动使用Vim命令对特定行进行缩进处理。在Vim插入模式下，按下 Tab 键时默认会输入一个制表符，可通过Vim配置项将 Tab 替换为空格，以便支持文件移植和多操作系统打开。 1.1 Vim缩进方法在Vim普通模式下，&gt;&gt; 会对当前行增加缩进，&lt;&lt; 则将对当前行减少缩进。 在命令前可使用数字来指定命令作用的范围。例如 10&gt;&gt; 将对包括光标所在行的连续10行增加缩进，而执行Vim缩进操作 ( &lt;&lt; 和 &gt;&gt; )时缩进的列数，可使用 shiftwidth 选项； 12\"To change the number of space characters inserted for indentation\"set shiftwidth=4 上述配置指定了在vim普通模式下，使用 &lt;&lt; 和 &gt;&gt; 进行缩进时缩进的列数为4个空格。 1.2 Vim插入模式下Tab键缩进设置如果希望在Vim插入模式下按下 Tab 键时，输入到Vim中的都是空格，可通过设置 expandtab 选项实现： 12\"set expandtab option to insert space characters whenever the tab key is pressed \"set expandtab 在Vim设置了 expandtab 后，如果在某些情况下需要输入真正的 Tab ，可以使用组合按键 Ctrl-V&lt;Tab&gt; 1.3 使用空格替代Tab键如果需要设置按下 Tab 键时输入的空格个数，可以使用 tabstop 选项，以下Vim设置使用4个空格替代 Tab 键 12\"insert 4 spaces for a tab\"set tabstop=4 Vim设置了 expandtab 选项后所有新输入的 Tab 键都会被替换为对应个数的空格，如果需要修改设置 expandtab 之前已经存在的所有 Tab 键，可以在Vim命令行模式使用命令 :retab。 二、Vim自动缩进Vim自带的自动缩进类型包括cindent、autoindent和smartindent三种。 cindent采用C语言的标准缩进方式来处理Vim文件的缩进结构，使用以下Vim配置可启动cindent缩进类型。 1set cindent Vim autoindent缩进模式下，新增加的行和前一行具有相同的缩进形式，可以使用以下配置启用autoindent缩进形式。 1set autoindent 在Vim smartindent缩进模式下，每一行都有相同的缩进量，直到遇到右大括号 (}) 取消缩进形式。 如果某一行以 # 开头，那么该行不会采用上述缩进格式规则。可以认为smartindent是autoindent的升级版缩进方法。 以下设置可以启用vim的smartindent缩进方式： 1set smartindent 注：上述配置项可以直接在Vim命令模式下执行并立即生效。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-autoindent","slug":"Vim-autoindent","permalink":"https://vim.ink/tags/Vim-autoindent/"},{"name":"vim自动缩进","slug":"vim自动缩进","permalink":"https://vim.ink/tags/vim自动缩进/"},{"name":"vim-tab键替换","slug":"vim-tab键替换","permalink":"https://vim.ink/tags/vim-tab键替换/"},{"name":"vim-shiftwidth","slug":"vim-shiftwidth","permalink":"https://vim.ink/tags/vim-shiftwidth/"},{"name":"vim-expandtab","slug":"vim-expandtab","permalink":"https://vim.ink/tags/vim-expandtab/"}]},{"title":"Vim快速跳转任意行、任意列以及高亮显示当前行、当前列方法-Vim使用技巧(3)","slug":"vim-cursorline-column","date":"2014-01-20T16:00:00.000Z","updated":"2019-04-27T15:35:46.023Z","comments":true,"path":"vim-cursorline-column.html","link":"","permalink":"https://vim.ink/vim-cursorline-column.html","excerpt":"","text":"vim提供了丰富的快速跳转任意行、任意列的方法，方便高效地移动光标，定位文件位置。 一、Vim行跳转使用vim查看文件时，使用以下命令可以快速跳转文件首、尾行，方便对整个文件有个全局把握。 1.1 跳转文件首行vim普通模式下，使用 gg 跳转到当前文件的第一行； vim命令行模式下，使用 :0 或 :1 跳转光标到当前文件的首行。 1.2 跳转文件尾行vim普通模式下，使用 G 跳转光标到当前文件的最后一行 (尾行)；vim命令行模式下，使用 :$ 跳转光标到当前文件的尾行。 1.3 跳转文件任意行vim命令行模式下，使用命令 :n 跳转光标到当前文件的第 n 行。 注：文件行号可以在命令行模式下使用 set nu 或 set number 进行显示，更多vim配置可参考vim配置文件入门 二、Vim列跳转跳转到vim当前行的任意列是使用vim时一个比较常见的需求， 例如，在Vim可视化模式下就可能需要快速跳转到某一列。 2.1 跳转到行首vim普通模式下，使用命令 0 或 | 可跳转光标到当前行的行首。 注：| 英文名叫 bar，是vim普通模式下用于跳转到当前行某一列的一个命令 (To screen column [count] in the current line)，| 表示当前行的第0列 (行首) 2.2 跳转到行尾vim普通模式下，使用命令 $ 跳转光标到当前行的行尾 2.3 跳转任意列vim普通模式下，可使用以下vim命令 0nl 或 n| 跳转到当前行的第 n 列。 注： 0nl 表示先用命令 0 将光标移动到行首，nl 表示执行 n 次向右移动光标操作n| 表示使用 | 命令跳转到当前行的第 n 列 三、vim突出显示当前行、当前列在vim配置文件.vimrc或vim命令行模式下使用命令 set cursorline 或 set cul 可高亮显示鼠标当前所在行，set nocursorline 或 set nocul 可关闭高亮显示鼠标当前所在行； 命令 set cursorcolumn 或 set cuc 可高亮显示鼠标当前所在列，set nocursorcolumn 或 set nocuc 可关闭高亮显示鼠标当前所在列。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim行跳转","slug":"Vim行跳转","permalink":"https://vim.ink/tags/Vim行跳转/"},{"name":"vim列跳转","slug":"vim列跳转","permalink":"https://vim.ink/tags/vim列跳转/"},{"name":"vim文件首行","slug":"vim文件首行","permalink":"https://vim.ink/tags/vim文件首行/"},{"name":"vim-gg","slug":"vim-gg","permalink":"https://vim.ink/tags/vim-gg/"}]},{"title":"使用Powerline插件强化Vim状态栏及Powerline配置介绍-Vim插件(8)","slug":"vim-powerline","date":"2014-01-14T16:00:00.000Z","updated":"2019-04-27T15:36:41.680Z","comments":true,"path":"vim-powerline.html","link":"","permalink":"https://vim.ink/vim-powerline.html","excerpt":"","text":"Powerline可用来强化状态栏的显示信息，可作用于bash、vim、tmux等多种软件，基于python实现，使用json配置文件进行管理，具有很强的扩展性。 一、linux安装Powerline强化Vim状态栏方法1.1 安装PowerlinePowerline与其它linux项目之间存在命名冲突，因此常将Powerline放在 PyPI (Python Package Index) 中的 powerline-status 包下。 为了从PyPI中安装powerline-status包，首先需要安装专用于Python包的管理pip工具和git，然后使用 pip insall 命令在线安装Powerline。 在Debian、Ubuntu和Linux Mint中安装Powerline的命令如下： 12apt-get install python-pip git '安装pip和git'pip install git+git://github.com/powerline/powerline '从github安装Powerline' 1.2 安装Powerline的字体Powerline显示的一些特殊箭头效果和符号内容要求操作系统有对应符号字体，因此需要安装Powerline所需字体。 首先，通过下面的wget命令下载最新的系统字体和字体配置文件： 12wget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf '下载字体文件'wget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf '下载字体配置文件' 然后，将下载的字体放到字体目录 /usr/share/fonts 或者 /usr/local/share/fonts, 通过如下命令更新系统的字体缓存： 1fc-cache -vf /usr/share/fonts/ '更新字体缓存' 最后，将下载的字体配置文件 10-powerline-symbols.conf 移动到目录 /etc/fonts/conf.d/，完成字体配置文件的安装。 1mv 10-powerline-symbols.conf /etc/fonts/conf.d/ 1.3 Vim使用Powerline在Vim配置文件.vimrc中添加如下配置可打开Powerline插件在Vim中的使用。 12345set rtp+=/usr/local/lib/python2.7/dist-packages/powerline/bindings/vim/ 'powerline的安装路径，可能需要自行调整'set laststatus=2 '设置vim状态栏数量为2，用于显示powerline的内容'set showtabline=2 '始终显示窗口上头的tabline'set noshowmode 'Hide the default mode text (e.g. -- INSERT -- below the statusline)'set t_Co=256 二、Powerline配置介绍Powerline的配置文件包括主配置文件 config.json 以及各主题(如shell、tmux、vim等)和颜色方案的配置文件，其目录结构如下所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748.├── colorschemes│ ├── default.json│ ├── ......│ ├── shell│ │ ├── default.json│ │ ├── __main__.json│ │ └── solarized.json│ ├── solarized.json│ ├── tmux│ │ ├── default.json│ │ └── solarized.json│ └── vim│ ├── default.json│ ├── __main__.json│ ├── solarized.json│ └── solarizedlight.json├── colors.json├── config.json└── themes ├── ascii.json ├── ...... ├── powerline.json ├── powerline_terminus.json ├── powerline_unicode7.json ├── shell │ ├── continuation.json │ ├── default.json │ ├── default_leftonly.json │ ├── __main__.json │ └── select.json ├── tmux │ └── default.json ├── unicode.json ├── unicode_terminus_condensed.json ├── unicode_terminus.json ├── vim │ ├── cmdwin.json │ ├── default.json │ ├── help.json │ ├── __main__.json │ ├── plugin_commandt.json │ ├── plugin_gundo.json │ ├── plugin_gundo-preview.json │ ├── plugin_nerdtree.json │ ├── quickfix.json │ └── tabline.json └── ...... Powerline在状态栏显示的每一个栏目项称之为一个 segment，对应配置文件 *.json 描述了各segment的位置和外观等信息。 例如，Vim下的Powerline配置文件内容如下所示，从中可以看出左右两侧各 segment 所配置展示的具体信息，如mode (Vim当前所处模式)、paste_indicator (Vim粘贴模式指示器)等。 配置文件中的 priority 选项表明该segment在状态栏长度不够显示所有内容时被展示出来的优先级，值越大，优先级越小，该segment越容易被从状态栏中移除。 三、Vim状态栏显示git信息介绍Vim插件 powerline-gitstatus 来扩展Powerline的状态栏展示能力。 powerline-gitstatus 是一个用来展示git工作状态信息的Powerline segment ( A Powerline segment for showing the status of a Git working copy)，可在Vim的状态栏实时显示git仓库的各种状态信息，可通过以下命令安装： 1pip install powerline-gitstatus 然后在Vim下的Powerline配置文件 themes/vim/default.json 中增加以下的segment配置信息就可以打开powerline-gitstatus。 1234&#123; \"function\": \"powerline_gitstatus.gitstatus\", \"priority\": 40&#125; powerline-gitstatus在Vim中的显示效果如下图所示。","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-powerline","slug":"Vim-powerline","permalink":"https://vim.ink/tags/Vim-powerline/"},{"name":"vim状态栏强化","slug":"vim状态栏强化","permalink":"https://vim.ink/tags/vim状态栏强化/"},{"name":"vim显示git状态","slug":"vim显示git状态","permalink":"https://vim.ink/tags/vim显示git状态/"},{"name":"powerline-segment","slug":"powerline-segment","permalink":"https://vim.ink/tags/powerline-segment/"},{"name":"powerline配置","slug":"powerline配置","permalink":"https://vim.ink/tags/powerline配置/"}]},{"title":"Vim快速注释/取消注释多行的几种方法-Vim使用技巧(2)","slug":"vim-comment-uncomment-lines","date":"2014-01-02T16:00:00.000Z","updated":"2019-04-27T15:36:41.635Z","comments":true,"path":"vim-comment-uncomment-lines.html","link":"","permalink":"https://vim.ink/vim-comment-uncomment-lines.html","excerpt":"","text":"在使用Vim进行编程时，经常遇到需要快速注释或取消注释多行代码的场景，Vim教程网根据已有的教程介绍，总结了三种快速注释/取消注释多行代码的方法。 一、使用Vim可视化模式快速注释/取消注释多行在Vim可视化模式下可以通过 块选择模式 对选中的多行文本执行相同的操作。 使用Vim可视化模式快速注释多行的操作顺序如下： (1) 按 Ctrl + v 进入块选择模式(2) 向上或向下移动光标选择多行(3) 按0移动光标到行的起始位置(4) 按大写的 I 跳转光标到选中的整个矩形框的左上角(5) 插入注释符(6) 按Esc回到命令模式 二、使用Vim宏快速注释/取消注释多行Vim宏可以把指定的一系列操作命令缓存到某个Vim寄存器中，然后在需要的时候将缓存的指令进行回放，达到重复操作的目的。 使用Vim宏快速注释多行的操作顺序如下: (1) Vim命令模式下，按下 qa 后开始进入宏录制状态(2) 按大写的 I 跳转到行首并进入到插入模式，输入注释符号(3) 按 j 跳转到下一行后按 Esc 结束宏录制(4) 按 2@a 回放录制的宏两次，完成快速注释3行 三、使用Vim替换命令substitute快速注释/取消注释多行Vim可以在尾行模式下使用 :substitute 或 :s 命令将指定的字符替换成其他目标字符。 因此，为了在15~17行的 行首4个空格 后加上注释符号，可以使用vim替换命令：15,17s/^ / \\/\\/ 注意：上述命令对 / 进行了转义，替换完成后使用 :noh 取消了高亮结果，方便展示操作结果。 关于 noh 命令，可以参考vim教程网上的博文Vim清除上次的搜索高亮结果。","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim可视化模式","slug":"Vim可视化模式","permalink":"https://vim.ink/tags/Vim可视化模式/"},{"name":"Vim注释多行","slug":"Vim注释多行","permalink":"https://vim.ink/tags/Vim注释多行/"},{"name":"vim取消注释","slug":"vim取消注释","permalink":"https://vim.ink/tags/vim取消注释/"},{"name":"vim宏","slug":"vim宏","permalink":"https://vim.ink/tags/vim宏/"}]},{"title":"Vim清除上次的搜索高亮结果-Vim使用技巧(1)","slug":"vim-clear-last-search-hightlight","date":"2013-12-31T16:00:00.000Z","updated":"2019-04-27T15:36:41.621Z","comments":true,"path":"vim-clear-last-search-hightlight.html","link":"","permalink":"https://vim.ink/vim-clear-last-search-hightlight.html","excerpt":"","text":"在打开文件中使用Vim搜索功能并开启高亮显示后怎么取消当前高亮显示的目标词？ 最简单的方法是再使用Vim搜索一串文档中不存在的目标词来覆盖当前高亮的搜索结果。 其实，可以在Vim尾行模式下使用 :noh 或 :nohlsearch 来关闭当前的高亮结果，但是在下次进行Vim搜索时仍然会有高亮显示效果 为了方便，可以使用Vim教程网介绍的Vim快捷键来简化操作。 定义在vim命令模式(normal)下非递归键盘映射: nnoremap &lt;esc&gt; :noh&lt;return&gt;&lt;esc&gt; 来关闭当前高亮搜索结果 这样，在Vim搜索结束后可以按下快捷键 Esc 来清除上次的搜索高亮效果。 注意：上面的动态Vim教程结尾处是直接按下 Esc 键来取消高亮的","categories":[{"name":"Vim技巧","slug":"Vim技巧","permalink":"https://vim.ink/categories/Vim技巧/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim搜索高亮","slug":"Vim搜索高亮","permalink":"https://vim.ink/tags/Vim搜索高亮/"},{"name":"vim关闭高亮","slug":"vim关闭高亮","permalink":"https://vim.ink/tags/vim关闭高亮/"},{"name":"vim-noh","slug":"vim-noh","permalink":"https://vim.ink/tags/vim-noh/"},{"name":"vim-nohlsearch","slug":"vim-nohlsearch","permalink":"https://vim.ink/tags/vim-nohlsearch/"}]},{"title":"Vim快捷键和键盘映射-Vim入门教程(30)","slug":"vim-map","date":"2013-12-26T16:00:00.000Z","updated":"2018-07-15T10:28:57.543Z","comments":true,"path":"vim-map.html","link":"","permalink":"https://vim.ink/vim-map.html","excerpt":"","text":"vim快捷键是某种vim命令或命令串的别名，有点类似Vim中的宏。 使用Vim命令 :map 可以将键盘上的某个按键与Vim的命令映射起来，完成Vim快捷键的绑定。例如 :map a b 在map生效的情况下，按下a就等同于按下了b。 一、vim map命令前缀在map命令前加上前缀可以组合成几种不同的命令，表示在不同的Vim模式下生效。 n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在普通模式 (normal) 下生效i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在插入模式 (insert) 下生效v&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在可视化模式 (visual) 下生效c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在命令模式 (command-line) 下生效o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在命令等待时 (operator pending) 生效，比如输入d之后会等待输入下一个字符，可能是d或者数字un&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除键的映射nore&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;非递归 (non-recursive)，意思是将a 映射为b，b映射为c，输入a的时候不会被映射为c，而只会映射为b 以上前缀可以组合使用，比如 nnoremap，nunmap，vnoremap 等。不带前缀的map命令默认对 normal 模式和 visual 模式生效 Vim :map 默认是递归映射模式。 1.1 括号自动补全映射12345\" 在插入模式下非递归映射(为 )&lt;Esc&gt;i\"inoremap ( ()&lt;Esc&gt;iinoremap [ []&lt;Esc&gt;iinoremap &#123; &#123;&#125;&lt;Esc&gt;iinoremap \" \"\"&lt;Esc&gt;i 这样输入(, [, {, “的时候都会自动补全，并且把光标移到括号的内部 1.2 Backspace的映射Backspace的功能是向前删除，而x键是向后删除，在normal模式下z键没有什么作用。所以用z键实现backspace的功能是个不错的选择 1nnoremap z i&lt;BS&gt;&lt;Esc&gt;l 这样子，normal模式用 z 删除就可以实现Backspace的功能 二、Vim快捷键与Leader键Vim的 mapleader 变量对所有map映射命令起效，它的作用是将参数 &lt;leader&gt; 替换成 mapleader 变量的值 如果 mapleader 变量没有设置，则用默认的反斜杠 \\代替，因此Vim映射 :map &lt;Leader&gt;A oanother line&lt;Esc&gt; 等效于：:map \\A oanother line&lt;Esc&gt; 如果设置了 mapleader 变量，例如 :let mapleader = &quot;,&quot;，那么 :map &lt;Leader&gt;A oanother line&lt;Esc&gt; 就等效于： :map ,A oanother line&lt;Esc&gt;","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim-map","slug":"vim-map","permalink":"https://vim.ink/tags/vim-map/"},{"name":"Vim键盘映射","slug":"Vim键盘映射","permalink":"https://vim.ink/tags/Vim键盘映射/"},{"name":"vim快捷键","slug":"vim快捷键","permalink":"https://vim.ink/tags/vim快捷键/"},{"name":"vim-nnoremap","slug":"vim-nnoremap","permalink":"https://vim.ink/tags/vim-nnoremap/"},{"name":"vim-leader","slug":"vim-leader","permalink":"https://vim.ink/tags/vim-leader/"},{"name":"vim中文教程","slug":"vim中文教程","permalink":"https://vim.ink/tags/vim中文教程/"}]},{"title":"Vim快捷键和前缀键Leader-Vim入门教程(29)","slug":"vim-leader","date":"2013-12-10T16:00:00.000Z","updated":"2019-04-27T15:35:46.104Z","comments":true,"path":"vim-leader.html","link":"","permalink":"https://vim.ink/vim-leader.html","excerpt":"","text":"Vim自带很多快捷键，再加上各类插件的快捷键，大量快捷键出现在单层空间中难免引起冲突，为缓解该问题，引入了前缀键 。 Vim中的前缀键 &lt;Leader&gt; 类似于C++中的命名空间，可以理解为是某个Vim命令开始执行(前缀)的标识。 默认的Vim &lt;Leader&gt; 是 \\，在Vim命令模式下，可以使用命令 :let mapleader=&quot;,&quot; 设置Vim的Leader键为 , 这样子，通过Vim命令 :map ,A oanother line &lt;Esc&gt; 可以设置Vim快捷键 ,A 用于实现在当前行新增一行，插入another line并退到命令模式 上述命令的含义是将Vim命令串 oanother line &lt;Esc&gt; 映射为快捷键 ,A，这样输入 ,A 就可以快速地在当前行插入新的一行，实现的效果如下图所示 Vim快捷键的具体介绍可以参考Vim教程网上的文章Vim快捷键和键盘映射 注：oanother line &lt;Esc&gt; 表示先输入 o 进入插入模式，然后输出 another line，再按下 Esc 退出插入模式，进入命令模式","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim-leader","slug":"Vim-leader","permalink":"https://vim.ink/tags/Vim-leader/"},{"name":"vim-map","slug":"vim-map","permalink":"https://vim.ink/tags/vim-map/"},{"name":"vim前缀键","slug":"vim前缀键","permalink":"https://vim.ink/tags/vim前缀键/"},{"name":"Vim快捷键","slug":"Vim快捷键","permalink":"https://vim.ink/tags/Vim快捷键/"},{"name":"Vim中文教程","slug":"Vim中文教程","permalink":"https://vim.ink/tags/Vim中文教程/"}]},{"title":"Vim宏录制与重复操作-Vim入门教程(28)","slug":"vim-recording","date":"2013-11-30T16:00:00.000Z","updated":"2019-04-27T15:35:46.133Z","comments":true,"path":"vim-recording.html","link":"","permalink":"https://vim.ink/vim-recording.html","excerpt":"","text":"Vim中的宏可以理解为把你指定的一系列操作命令缓存到某个Vim寄存器中(录制)，然后在需要的时候将缓存的一系列指令进行回放，达到重复操作的目的，其作用类似于vim重复操作命令。 那么，如何指定操作系列呢？ 一、录制宏(1) 在Vim命令模式下，按下 q寄存器名 后开始进入宏录制状态，vim编辑器左下角会显示”记录中”或”recording” 上述寄存器名是指a、b、c等26个英文字母命名的有名寄存器，或0-9等10个数字寄存器 (2) 在vim宏录制状态下，按 q 结束宏录制 (3) 假设录制的宏记录在寄存器a，可以使用Vim命令 @a 执行这个宏，也可以加上执行次数 10@a 执行10次宏 假设需要在以下文件的每行开头添加“System.out.println(”，结尾添加“);”，可以进行以下操作： 在vim命令模式下，输入 qa 开始进行宏录制，再按 0 跳到行首、按下 i 键进入插入模式，再输入 System.out.println( 后按下 esc 键退回到命令模式，再输入 A 跳转到行尾、按下 i 键进入插入模式, 输入 ); 后按下 Esc 键回到vim命令模式，按下 q 停止录制宏 最后，把光标移动到下面一行的任意位置输入 @a 即可。操作过程如下图所示： 对应按键顺序为： qa 0 i System.out.println( Esc A ); Esc q @a j @a j @a 二、修改宏可以使用以下方式修改vim寄存器a中的宏：(1) 先按 G 跳转到文件末尾，然后按 o 新加一行后直接用 ESC 退出到命令模式 (2) 使用命令 &quot;ap 将寄存器a中的命令宏粘贴到当前位置，然后编辑这一行的宏内容，编辑结束后用 0 回到行首 (3) 使用命令 &quot;ayy 将当前行的内容复制到寄存器a中，达到修改寄存器a宏内容的目的 三、保存宏可以使用linux let 命令给寄存器赋值达到保存特定宏内容到指定寄存器的目的。 例如，let @a=&quot;0iSystem.out.println(^[A);^[&quot; 将上述的操作命令保存到寄存器a，然后可以用 @a 命令使用刚刚制作的宏","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim视频教程","slug":"vim视频教程","permalink":"https://vim.ink/tags/vim视频教程/"},{"name":"vim重复操作","slug":"vim重复操作","permalink":"https://vim.ink/tags/vim重复操作/"},{"name":"Vim宏","slug":"Vim宏","permalink":"https://vim.ink/tags/Vim宏/"},{"name":"vim-recording","slug":"vim-recording","permalink":"https://vim.ink/tags/vim-recording/"}]},{"title":"windows显示键盘按键软件KeyCastOW录制vim视频教程-Vim入门教程(27)","slug":"vim-keycastow","date":"2013-11-22T16:00:00.000Z","updated":"2019-04-27T15:34:36.560Z","comments":true,"path":"vim-keycastow.html","link":"","permalink":"https://vim.ink/vim-keycastow.html","excerpt":"","text":"windows类似keycastr的显示键盘按键的软件KeyCastOW只在github上提供了源代码和vs工程，需要自行编译二进制文件。 Vim教程网提供的vim视频教程在很多时候需要在屏幕实时显示对应操作的按键，windows系统下显示按键的软件推荐使用KeyCastOW，具有和Mac上的软件keycastr相同的功能。 一、KeyCastOW编译方法KeyCastOW提供了Visual Studio工程，在windows系统上编译KeyCastOW需要先安装vs2013或vs2015。 安装好vs后需要配置Command Prompt (一个配置好了各种环境变量的cmd) 用于快速编译KeyCastOW工程。 Vim教程网介绍使用Visual Studio的“External Tools”功能，把Command Prompt快捷方式放到IDE的“Tools”菜单下。 再使用Command Prompt编译KeyCastOW源码，编译命令为：msbuild /p:platform=win32 /p:Configuration=Release，编译好的二进制文件为Release\\keycastow.exe","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"windows显示键盘按键","slug":"windows显示键盘按键","permalink":"https://vim.ink/tags/windows显示键盘按键/"},{"name":"vim视频教程录制","slug":"vim视频教程录制","permalink":"https://vim.ink/tags/vim视频教程录制/"},{"name":"windows-KeyCastOW","slug":"windows-KeyCastOW","permalink":"https://vim.ink/tags/windows-KeyCastOW/"},{"name":"windows-keycastr","slug":"windows-keycastr","permalink":"https://vim.ink/tags/windows-keycastr/"}]},{"title":"Vim插件NERD tree介绍与使用方法-Vim入门教程(26)","slug":"vim-nerdtree-plugin","date":"2013-11-16T16:00:00.000Z","updated":"2019-04-27T15:35:46.115Z","comments":true,"path":"vim-nerdtree-plugin.html","link":"","permalink":"https://vim.ink/vim-nerdtree-plugin.html","excerpt":"","text":"Vim插件NERDTree是一款用来在Vim界面显示树形目录的文件管理器插件，可在vim操作界面进行文件打开、目录浏览操作。 其github地址为：https://github.com/scrooloose/nerdtree 一、vim插件NERDTree安装方法推荐使用Vim插件管理器Vundle安装Vim插件NERDTree，vim教程网通过vundle安装NERDTree的配置文件截图如下。 二、vim插件NERDTree基本配置通过vundle安装好NERDTree插件后，在vim命令行模式输入命令:NERDTree就可以看到NERDTree的显示界面。 使用组合按键 Ctrl + w，可将光标自动在左右侧窗口进行切换。 在 vim 启动的时候默认开启 NERDTree：autocmd VimEnter * NERDTree 或使用autocmd的缩写形式 au VimEnter * NERDTree 将NERDTree的窗口设置在vim窗口的右侧(默认为左侧)：let NERDTreeWinPos=&quot;right&quot; 三、Vim插件NERDTree常用命令汇总q&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;关闭 NERDTreeo&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在已有窗口中打开文件或目录，并将光标跳到该窗口O&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;递归打开选中 结点下的所有目录x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合拢选中结点的父目录X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;递归 合拢选中结点下的所有目录P&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跳到根结点p&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跳到父结点 u&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设置上级目录为根路径U&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设置上级目录为跟路径，但是维持原来目录打开的状态r&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;刷新光标所在的目录R&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;刷新当前根路径I&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;显示或者不显示隐藏文件f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开和关闭文件过滤器A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;全屏显示 NERDTree，或者关闭全屏C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将根路径设置为光标所在的目录","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"Vim插件NERDtree","slug":"Vim插件NERDtree","permalink":"https://vim.ink/tags/Vim插件NERDtree/"},{"name":"vim-NERDTree","slug":"vim-NERDTree","permalink":"https://vim.ink/tags/vim-NERDTree/"},{"name":"vim文件管理","slug":"vim文件管理","permalink":"https://vim.ink/tags/vim文件管理/"},{"name":"Vim树形目录","slug":"Vim树形目录","permalink":"https://vim.ink/tags/Vim树形目录/"}]},{"title":"Vim插件surround安装方法介绍与使用方法-Vim入门教程(25)","slug":"vim-surround-plugin","date":"2013-11-10T16:00:00.000Z","updated":"2019-04-27T15:34:36.600Z","comments":true,"path":"vim-surround-plugin.html","link":"","permalink":"https://vim.ink/vim-surround-plugin.html","excerpt":"","text":"Vim插件surround用于高效操作与括号、引号或html、xml标签相关的配对符号(surrounding)，在github上拥有超过5000的star，可通过vim插件管理器bundle进行快速安装。 Vim教程网所描述的所谓vim配对符号是指 (), [], {}, &lt;&gt;, ‘’, “”这些成对出现的符号组合。 一、vim插件surround安装方法surround插件的github地址为：https://github.com/tpope/vim-surround，推荐使用Vim插件管理器Vundle安装Vim插件surround。 下图是通过vundle插件管理器安装vim插件surround的截图说明。 二、vim-surround命令汇总Vim插件surround的命令在vim不同操作模式下有不同的操作命令 2.1 命令行模式ds&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除一个配对符号 (delete a surrounding)cs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;更改一个配对符号 (change a surrounding)ys&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增加一个配对符号 (yank a surrounding)yS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在新的行增加一个配对符号并进行缩进yss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在整行增加一个配对符号ySs/Yss&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在整行增加一个配对符号，配对符号单独成行并进行缩进 在vim光标所在位置配合vim动作(motion, 如w向后一个单词)或文本对象(如iw)，可以实现非常强大的功能。 例如 ysW( 会在当前光标所在单词的周围增加一个()配对， 2.2 可视化模式s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增加一个配对符号S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在整行增加一个配对符号，配对符号单独成行并进行缩进 2.3 插入模式Ctrl + s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;增加一个配对符号Ctrl +s, Ctrl +s &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在整行增加一个配对符号，配对符号单独成行并进行缩进","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"Vim插件surround","slug":"Vim插件surround","permalink":"https://vim.ink/tags/Vim插件surround/"},{"name":"vim-surrounding","slug":"vim-surrounding","permalink":"https://vim.ink/tags/vim-surrounding/"},{"name":"vim配对插件","slug":"vim配对插件","permalink":"https://vim.ink/tags/vim配对插件/"}]},{"title":"Vim文本周边around、内部inside命令-Vim入门教程(24)","slug":"vim-inside-around","date":"2013-10-31T16:00:00.000Z","updated":"2019-04-27T15:35:46.099Z","comments":true,"path":"vim-inside-around.html","link":"","permalink":"https://vim.ink/vim-inside-around.html","excerpt":"","text":"Vim文本对象操作包括范围和操作，范围主要是主要是 i(inner) 和 a(around)，文本对象有 w (word), s (sentence), p (paragraph) 和各种引号和括号等。 介绍Vim文本周边命令a(around)、内部命令i(inside)和iw、aw、iW、aW、is、as、ip和ap命令含义。iw 表示的文本对象包含当前单词全部内容，aw会额外包含该单词前面或后面的一个空白字符。 一、Vim文本对象选择范围使用操作分隔符的文本对象的命令 i (inside) 以配对的符号作为开始和结束，a (around) 则会额外包含指定前面或后面的一个空白字符。 文本对象 选择范围 iw 当前单词 (inside word) aw 当前单词及一个空格 (around word) iW 当前字串 (inside WORD) aW 当前字串及一个空格 (around WORD) is 当前句子 (inside sentence) as 当前句子及一个空格 (around sentence) ip 当前段落 (inside paragraph) ap 当前段落及一个空行 (around paragraph) 二、Vim iw、aw命令分析以 iw 及 aw 选择的文本对象为例，iw 表示的文本对象包含当前单词从第一个到最后一个字符间的全部内容，aw 表示的文本对象范围有所扩大，它会额外包含该单词前面或后面的一个空白字符 (假如该处有空白字符)。 想了解 Vim 如何界定单词的边界，请参阅Vim单词、字串概念 假设Vim打开的某个文件中包含句子 “Improve your writing by deleting excellent adjectives” (1) 若想删除上个句子中的单词 excellent，可以将光标移动到单词内使用 daw 命令。该Vim命令会删除此单词，外加一个空格。 如果用 diw 命令删除完 excellent 后就会有两个连在一起的空格 (2) 若是想把单词 excellent 改成另外一个单词 most，将光标移动到单词内用 ciw 命令可以实现。ciw 命令只删除该单词，而不删除其前后的空白字符，随后Vim会进入插入模式，输入目标单词 most 即可实现想要的效果。 如果用的是 caw 命令的话，那最后两个单词就会连在一起，变成了 “mostadjectives” 一般来说，d{motion} 命令和 aw、as 和 ap 配合起来使用比较好，而c{motion}命令和 iw 及类似的文本对象一起用效果会更好。 因为删除的时候一般会把相连的空格删掉，而修改的话一般需要保留原始空格嘛~","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"Vim-aw","slug":"Vim-aw","permalink":"https://vim.ink/tags/Vim-aw/"},{"name":"vim-iw","slug":"vim-iw","permalink":"https://vim.ink/tags/vim-iw/"},{"name":"vim-as","slug":"vim-as","permalink":"https://vim.ink/tags/vim-as/"},{"name":"vim-is","slug":"vim-is","permalink":"https://vim.ink/tags/vim-is/"},{"name":"vim-ip-ap","slug":"vim-ip-ap","permalink":"https://vim.ink/tags/vim-ip-ap/"},{"name":"Vim教程pdf","slug":"Vim教程pdf","permalink":"https://vim.ink/tags/Vim教程pdf/"}]},{"title":"Vim寄存器-Vim入门教程(23)","slug":"vim-register","date":"2013-10-10T16:00:00.000Z","updated":"2019-04-27T15:36:41.691Z","comments":true,"path":"vim-register.html","link":"","permalink":"https://vim.ink/vim-register.html","excerpt":"","text":"Vim 的删除、复制与粘贴命令均需要使用Vim寄存器。通过在命令前加 &quot;寄存器名 前缀的方式可指定寄存器，否则Vim将缺省使用无名寄存器。若想在Vim和操作系统外部程序间共享复制内容，则必须使用Vim系统剪贴板。 如想把当前单词复制到寄存器 a 中，可执行 &quot;ayiw；把当前整行文本剪切至寄存器 b 中，可以用命令 &quot;bdd；在此之后，既可以通过 &quot;ap 粘贴来自寄存器 a 的单词，也可使用 &quot;bp 命令粘贴来自寄存器 b的整行文本。 这便是Vim寄存器的概念和用途。 一、无名寄存器Vim缺省使用无名寄存器。无名寄存器用引号表示，例如，Vim命令 &quot;&quot;p 完全等同于 p 命令 x、s、d{motion}、c{motion} 与 y{motion} 命令及其对应的大写命令都会覆盖Vim无名寄存器中的内容。 注意：d{motion}表示Vim命令 d 后面跟任意动作命令，下同。 二、复制专用寄存器当使用Vim命令y{motion}时，复制的文本不但被拷贝到无名寄存器，而且也被拷贝到了复制专用寄存器中。Vim复制专用寄存器用数字 0 标识。Vim复制专用寄存器仅当使用 y{motion} 命令时才会被赋值 以下的Vim教程动态图先通过命令 yiw 将光标当前所在位置的单词复制到寄存器(包括无名寄存器和复制寄存器) 然后将光标移动到目标位置后，通过命令 diw 将光标所在位置的单词删除(剪切)到Vim无名寄存器中 再通过命令 &quot;0p 指定将复制专用寄存器(0)中内容粘贴到光标当前位置 最后，通过命令 :reg &quot;0 可以看到，无名寄存器保存的是通过 diw 删除的内容，复制寄存器保存的是 yiw 复制的内容 三、有名寄存器Vim 提供了一组以 26 个英文字母命名的有名寄存器。用小写字母引用有名寄存器会覆盖该寄存器的原有内容，而用大写字母引用则会将新内容 追加 到该寄存器的原有内容之后 四、黑洞寄存器Vim黑洞寄存器是个有去无回的黑洞，可用下划线显式引用。例如， Vim命令 &quot;_d{motion} 会删除文本内容且不保存任何副本 五、系统剪贴板若想在Vim和操作系统外部程序间共享内容，则必须使用Vim系统剪贴板。Vim系统剪贴板通过 + 号显式引用 假设在外部程序中用复制或剪切操作获取了目标文本，则在Vim命令模式下可以通过 &quot;+p 命令将其粘贴到Vim编辑器中。 相反地，如果在Vim的复制或删除命令之前加入 &quot;+ 显式指定使用Vim系统剪贴板，则相应的文本将被捕获至系统剪贴板，退出Vim后，系统中的其他程序可以使用对应文本","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim寄存器","slug":"Vim寄存器","permalink":"https://vim.ink/tags/Vim寄存器/"},{"name":"vim无名寄存器","slug":"vim无名寄存器","permalink":"https://vim.ink/tags/vim无名寄存器/"},{"name":"Vim教程pdf","slug":"Vim教程pdf","permalink":"https://vim.ink/tags/Vim教程pdf/"},{"name":"vim系统剪贴板","slug":"vim系统剪贴板","permalink":"https://vim.ink/tags/vim系统剪贴板/"}]},{"title":"Vim基于单词移动及Vim单词、字串概念-Vim入门教程(22)","slug":"vim-world","date":"2013-10-03T16:00:00.000Z","updated":"2019-04-27T15:35:46.178Z","comments":true,"path":"vim-world.html","link":"","permalink":"https://vim.ink/vim-world.html","excerpt":"","text":"Vim单词(word)以非字母分隔，Vim字串(WORD)以空白字符分隔，Vim中的字串比单词更长。Vim支持按单词或字串正向或反向移动光标到开头或结尾。 一、Vim基于单词移动Vim基于单词移动光标的命令总结如下： Vim命令 光标动作 w 正向移动到下一单词的开头 b 反向 移动到当前单词 / 上一单词的开头 e 正向移动到当前单词 / 下一单词的结尾 ge 反向 移动到上一单词的结尾 如下图所示，假设Vim当前光标所在位置为假设Vim当前光标所在位置为 current 的字母 r w 会将光标移动到下一个单词 next 的开头b 会将光标移动到当前单词 current 的开头，再按键 b 则会将光标移动到上一个单词 prev 的开头e 会将光标移动到当前单词 current 的结尾，再按键 e 则会将光标移动到下一个单词 next 的结尾ge 会将光标移动到上一个单词 prev 的结尾 二、Vim基于字串移动前文介绍的每个面向单词的光标移动命令，都有一个面向字串的命令与其对应，分别为W、B、E 和 gE 所谓Vim单词 (word) 以非字母分隔，字母、数字、下划线或其他非空白字符的序列组成 而Vim字串 (WORD) 以空白字符分隔，由非空白字符序列组成 一般来说，Vim中的字串比单词更长。Vim手册中的定义如下： 例如，e.g. we&#39;re going too slow 包含5个字串和10个单词(句号和单引号都被当成了单词) 下面的Vim动态教程图分别是以单词移动和以字串移动的过程","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"Vim单词移动","slug":"Vim单词移动","permalink":"https://vim.ink/tags/Vim单词移动/"},{"name":"vim单词和字串","slug":"vim单词和字串","permalink":"https://vim.ink/tags/vim单词和字串/"},{"name":"vim-word","slug":"vim-word","permalink":"https://vim.ink/tags/vim-word/"},{"name":"vim-ge","slug":"vim-ge","permalink":"https://vim.ink/tags/vim-ge/"},{"name":"vim-bwe","slug":"vim-bwe","permalink":"https://vim.ink/tags/vim-bwe/"}]},{"title":"Vim删除并进入插入模式命令c(change)-Vim入门教程(21)","slug":"vim-change","date":"2013-10-01T16:00:00.000Z","updated":"2019-04-27T15:36:41.596Z","comments":true,"path":"vim-change.html","link":"","permalink":"https://vim.ink/vim-change.html","excerpt":"","text":"Vim中的 c 命令表示修改(change)，用于删除并进入插入模式，后面可以接一个移动范围，表示修改光标点到移动终点之间的内容并进入插入模式(编辑模式) 例如：(1) Vim命令 ciw 表示删除当前光标所在单词并进入插入模式 关于命令iw的含义与介绍，可以参考Vim教程网文章Vim剪切、复制、粘贴和删除操作与无名寄存器 (2) Vim命令 c$ 表示删除光标当前位置到本行结尾处的内容并进入Vim插入模式 Vim c 修改命令所删除的文件内容都保存在Vim寄存器中, 可以结合p命令构成剪切粘贴操作 下面的Vim教程图先使用命令 c$ 修改并进入了插入模式，按 Esc 退回到命令模式后再按 p 键将内容粘贴到当前位置","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"Vim修改命令","slug":"Vim修改命令","permalink":"https://vim.ink/tags/Vim修改命令/"},{"name":"vim命令change","slug":"vim命令change","permalink":"https://vim.ink/tags/vim命令change/"},{"name":"vim教程pdf","slug":"vim教程pdf","permalink":"https://vim.ink/tags/vim教程pdf/"}]},{"title":"Vim剪切、复制、粘贴和删除操作与Vim无名寄存器-Vim入门教程(20)","slug":"vim-copy-delete-register","date":"2013-09-30T16:00:00.000Z","updated":"2018-08-06T15:50:52.928Z","comments":true,"path":"vim-copy-delete-register.html","link":"","permalink":"https://vim.ink/vim-copy-delete-register.html","excerpt":"","text":"Vim编辑器中的复制、粘贴和删除命令操作的都是Vim寄存器，默认都是操作Vim无名寄存器。 Vim寄存器是一组用于保存文本内容或按键操作历史的中间缓存或容器，无名寄存器是Vim寄存器组中的一个。 Vim中的剪切命令d (delete)、复制命令y (yank) 和 粘贴命令p (put) 都是分别将对应操作文本对象保存到Vim寄存器中 若上述操作没有显式指定要使用的Vim寄存器，则默认操作的是Vim无名寄存器 Vim无名寄存器可以用&quot;&quot;表示，即粘贴命令&quot;&quot;p 完全等价于命令p 例如： yiw 命令表示将当前光标所在位置的单词复制到Vim无名寄存器中 diw 命令表示将当前光标所在位置的单词剪切(删除)到Vim无名寄存器中 注意： (1) w表示基于单词的对象，iw表示单词内，aw表示单词周围，具体可参考Vim文本周边around、内部inside命令 (2) Vim复制命令用y (yank)表示，是因为Vim中已经用c命令用于修改(change)操作了","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim寄存器","slug":"Vim寄存器","permalink":"https://vim.ink/tags/Vim寄存器/"},{"name":"vim无名寄存器","slug":"vim无名寄存器","permalink":"https://vim.ink/tags/vim无名寄存器/"},{"name":"vim复制粘贴","slug":"vim复制粘贴","permalink":"https://vim.ink/tags/vim复制粘贴/"}]},{"title":"Vim屏幕分割(分屏)功能介绍-Vim入门教程(19)","slug":"vim-split-window","date":"2013-09-20T16:00:00.000Z","updated":"2019-04-27T15:35:46.160Z","comments":true,"path":"vim-split-window.html","link":"","permalink":"https://vim.ink/vim-split-window.html","excerpt":"","text":"Vim支持在打开文件时进行屏幕分割，也支持在Vim编辑器内部进行分屏。Vim分屏是指在同一个Vim窗口中同时显示多个文件的内容。 一、打开文件时启动分屏使用Vim打开文件时，可以通过参数-On 或 -on来启动分屏。 n 代表整数，表示将整个屏幕分成n部分 大写 O 表示进行垂直方向分屏，小写 o 表示水平方向进行分屏 二、Vim内部启动分屏使用Vim打开文件后，仍然可以在尾行模式通过以下命令进行屏幕分割 2.1 垂直分屏并打开一个新文件Vim尾行模式下执行命令 :vsplit filename 或缩写形式 :vsp filename 可实现Vim垂直方向分割屏幕，且打开新的文件 filename 注：v 表示单词 vertical，是中文”垂直”的意思 2.2 水平分屏并打开一个新文件Vim尾行模式下执行命令 :split filename 或缩写形式 :sp filename 可实现在Vim水平方向分割屏幕，且打开新的文件 filename 2.3 垂直分隔当前打开的文件Vim命令行模式下执行命令 Ctrl+w v 可将当前打开的文件进行垂直分割 上述命令 Ctrl+w v 的意思是：先同时按键 Ctrl 和 w，再按键 v 2.4 水平分隔当前打开的文件Vim命令行模式下执行命令 Ctrl+w s 可将当前打开的文件进行水平方向分割 上述命令 Ctrl+w s 表示先同时按键 Ctrl 和 w，再按键 s 三、Vim分屏时切换屏幕在Vim分屏模式下，可以按以下方式切换当前操作的屏幕窗口： 3.1 轮流切换在Vim命令行模式下，同时按键 Ctrl+w w 可以在当前的分割屏幕中按顺时针方向切换屏幕 3.2 按指定方向切换屏幕Vim光标移动命令汇总曾介绍，光标键 h, j, k, l 分别用于左、下、上、右 4个方向，因此： 命令 Ctrl+w h 用于把光标移到左边的屏幕中 命令 Ctrl+w l 用于把光标移到右边的屏幕中 命令 Ctrl+w j 用于把光标移到下边的屏幕中 命令 Ctrl+w l 用于把光标移到上边的屏幕中 四、设置分屏大小 命令 Ctrl+w = 表示设置所有的分屏幕都有相同的高度 命令 Ctrl+w + 用于增加当前屏幕的高度 命令 Ctrl+w - 用于减少当前屏幕的高度 五、关闭Vim分屏命令 Ctrl+w c 用于关闭当前操作的Vim分屏幕","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"Vim屏幕分割","slug":"Vim屏幕分割","permalink":"https://vim.ink/tags/Vim屏幕分割/"},{"name":"vim分屏","slug":"vim分屏","permalink":"https://vim.ink/tags/vim分屏/"},{"name":"vim切换屏幕","slug":"vim切换屏幕","permalink":"https://vim.ink/tags/vim切换屏幕/"}]},{"title":"Vim替换命令substitute重用上次的查找模式-Vim入门教程(18)","slug":"vim-substitute-2","date":"2013-09-13T16:00:00.000Z","updated":"2018-01-27T15:47:36.501Z","comments":true,"path":"vim-substitute-2.html","link":"","permalink":"https://vim.ink/vim-substitute-2.html","excerpt":"","text":"Vim教程网介绍的Vim替换命令substitute小结描述过，Vim尾行模式下的替换命令基本语法是：:[range]s/源字符串/目标字符串/[option] 将substitute命令的查找域 源字符串 留空，意味着Vim将会重用上次的查找模式，而所谓上次的查找模式是通过Vim的搜索命令进行指定 即：:[range]s//目标字符串/[option] 表示查找上次所使用过的 源字符串 查找模式进行搜索 而在Vim搜索命令有介绍，命令 * 可用于正向查找当前光标所在单词 因此，配合 * 和上述搜索命令的特性，可以快速地实现替换当前光标所在单词为其他字符串。 关于上述的应用，在Vim教程网的后续两篇文章中会进行详细介绍。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"vim技巧","slug":"vim技巧","permalink":"https://vim.ink/tags/vim技巧/"},{"name":"Vim替换","slug":"Vim替换","permalink":"https://vim.ink/tags/Vim替换/"},{"name":"vim搜索","slug":"vim搜索","permalink":"https://vim.ink/tags/vim搜索/"}]},{"title":"Vim插件vim-fswitch实现同名文件快速切换-Vim入门教程(17)","slug":"vim-fswitch","date":"2013-09-10T16:00:00.000Z","updated":"2019-04-27T15:35:46.063Z","comments":true,"path":"vim-fswitch.html","link":"","permalink":"https://vim.ink/vim-fswitch.html","excerpt":"","text":"Vim每打开一个文件，就会在内存中创建一个对应缓冲区，Vim文件缓冲区列表介绍介绍了使用Vim标准的文件缓冲区切换命令实现缓冲区管理 本文介绍Vim插件vim-fswitch，用于实现同伴文件 (如test.h和test.cpp)的快速切换 vim-fswitch 插件提供配置文件fswitch.vim，其安装方法可以参考Vim教程网介绍的Vim插件管理器Pathogen和Vundle简介 安装完Vim插件vim-fswitch 后，在Vim配置文件~/.vimrc 中增加以下键盘映射配置 12'同伴文件*.cpp 和 *.h 切换'nmap &lt;silent&gt; &lt;Leader&gt;sw :FSHere&lt;cr&gt; 假设Vim当前打开的文件为 MyClass.h，在命令行模式下输入命令 ;sw 后，Vim会在新的文件缓冲区中打开 MyClass.cpp文件显示在当前窗口；再次输入命令 ;sw ，便可以切换到原先的窗口，如下图所示","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"Vim文件切换","slug":"Vim文件切换","permalink":"https://vim.ink/tags/Vim文件切换/"},{"name":"vim-fswitch","slug":"vim-fswitch","permalink":"https://vim.ink/tags/vim-fswitch/"}]},{"title":"Vim右键粘贴格式错乱解决方法-Vim入门教程(16)","slug":"vim-paste","date":"2013-09-01T16:00:00.000Z","updated":"2018-08-06T16:07:56.683Z","comments":true,"path":"vim-paste.html","link":"","permalink":"https://vim.ink/vim-paste.html","excerpt":"","text":"在Vim插入模式下，通过鼠标右键粘贴内容时会在行首多出许多缩进和空格，导致Vim粘贴格式错乱 这是因为鼠标右键粘贴时只是向终端扔了一大堆的文本，Vim 以为你是在快速地输入 但是当你使用Vim寄存器进行粘贴，如+p 命令时，Vim根据上下文是知道你在粘贴，就不会导致格式错乱 为了解决Vim鼠标右键粘贴格式乱码问题，可以在Vim尾行模式使用:set paste 如果不想每次都输入命令:set paste，可以将命令加入到Vim配置文件~/.vimrc中或使用自动设置插件bracketed-paste。 关于bracketed-paste插件的使用方法，Vim教程网后续会进行详细详细的介绍，欢迎关注！","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"Vim粘贴乱码","slug":"Vim粘贴乱码","permalink":"https://vim.ink/tags/Vim粘贴乱码/"},{"name":"vim右键粘贴","slug":"vim右键粘贴","permalink":"https://vim.ink/tags/vim右键粘贴/"}]},{"title":"Vim代码折叠-Vim入门教程(15)","slug":"vim-fold","date":"2013-08-28T16:00:00.000Z","updated":"2019-04-27T15:35:46.061Z","comments":true,"path":"vim-fold.html","link":"","permalink":"https://vim.ink/vim-fold.html","excerpt":"","text":"Vim支持多种折叠形式：手动折叠manual、基于缩进行折叠indent、基于语法进行折叠syntax、未更改文本折叠diff等 日常编程中用到的Vim折叠形式主要有indent 和 syntax，只需要Vim配置文件 ~/.vimrc中增加以下配置： 1234' 基于缩进进行代码折叠set foldmethod=indent' 启动 Vim 时关闭折叠set nofoldenable Vim打开文件后，重复使用操作命令 za 可打开或关闭当前折叠；zM 用于关闭所有折叠，zR 则用来打开所有折叠。 Vim折叠代码效果图如下所示：","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim视频教程","slug":"vim视频教程","permalink":"https://vim.ink/tags/vim视频教程/"},{"name":"Vim折叠","slug":"Vim折叠","permalink":"https://vim.ink/tags/Vim折叠/"},{"name":"vim-foldmethod","slug":"vim-foldmethod","permalink":"https://vim.ink/tags/vim-foldmethod/"}]},{"title":"Vim操作范围、文件范围介绍-Vim入门教程(14)","slug":"vim-ranges","date":"2013-08-09T16:00:00.000Z","updated":"2018-01-21T08:29:20.299Z","comments":true,"path":"vim-ranges.html","link":"","permalink":"https://vim.ink/vim-ranges.html","excerpt":"","text":"Vim大部分命令默认只作用于当前行，只有 :write 和 :global 默认作用于文件所有行 但很多Vim命令都可以加一个行号数字(用于指定某一行)或一对通过 , 或 ; 分割的行号来指明文件范围，扩大命令操作范围 简单来说，Vim操作范围的表示方法为：. 表示当前行，$ 表示结束，% 表示所有行，再加上+ 和 -，可灵活表示当前Vim打开文件的任意范围。 以删除命令:d为例，通过增加Vim文件范围，可修改删除命令的操作对象 Vim命令 操作范围 :d 当前行 :.d 当前行 :1d 第一行 :$d 最后一行 :1,$d 所有行 :%d 所有行 :.,5d 当前行至第 5 行 :,5d 当前行至第 5 行 :,+3d 当前行及接下来的 3 行 :1,+3d 第一行至当前行再加 3 行 :,-3d 当前行及向上的 3 行 :3,&#39;xdelete 第三行至标注 为 x 的那一行 :/^foo/,$delete 当前行以下，以字符 “foo” 开头的那一行至结尾 :/^foo/+1,$delete 当前行以下，以字符 “foo” 开头的那一行的下一行至结尾 除了,外，; 也可以分割行号用于表示Vim操作范围。 区别在于，a,b 的 b 是以当前行作为参考，而 a;b 的 b 是以 a 行作为参考 例如，假设当前光标所在为第 5 行，:1,+1d 命令会删除第 1 行至第 6 (5+1) 行，而 :1;+1d 命令则会删除第 1 行和第 2(1+1) 行。 如果想设置多个寻找条件，只需要在条件前再加上 /，比如： :/foo//bar//quux/d 上面的命令首先在当前行之后寻找第一个包含 “foo” 字符的那一行，然后在找到的这一行之后寻找第一个包含 “bar” 字符的那一行，然后再在找到的这一行之后寻找第一个包含 “quux” 的那一行 最后删除的对象就是最后找到的这一行","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim卡死","slug":"Vim卡死","permalink":"https://vim.ink/tags/Vim卡死/"},{"name":"vim Ctrl s","slug":"vim-Ctrl-s","permalink":"https://vim.ink/tags/vim-Ctrl-s/"}]},{"title":"Vim使用ctags实现函数跳转-Vim入门教程(13)","slug":"vim-ctag","date":"2013-07-31T16:00:00.000Z","updated":"2019-04-27T15:36:41.639Z","comments":true,"path":"vim-ctag.html","link":"","permalink":"https://vim.ink/vim-ctag.html","excerpt":"","text":"编程语言中的数据类型、结构体、枚举类型、类、对象、类成员、函数、宏等称为标识符 每个标识符的定义、所在文件中的行位置、所在文件的路径等信息称为标签(tag)。 ctags 全称Exuberant Ctags，是一款著名的用于生成代码标签信息，以便在源文件中定位对象的开源工具，目前已支持C、C++、python等40多种编程语言。 ctags最初内置在vim程序汇总，但随着Vim 6.0的发布，ctags已经脱离Vim成为一个独立的项目。 Vim配合ctags 可以实现更加强大的函数跳转、自动补齐等功能。 一、使用ctags生成tag标签文件实现跳转假设当前项目共包含3个源文件：main.cpp、my_class.cpp、my_class.h 在当前目录下执行命令ctags -R就可以生成当前项目所有源文件对应的tag标签文件 此时，再通过Vim打开当前项目的某个源文件，把光标移动到某个标识符上，通过按键 Ctrl + ] 就可以跳转到对应的定义位置，命令 Ctrl + o 可以回退到原来的位置 如果当前光标下是个局部变量，在Vim命令模式下执行命令 gd 就可以跳转到这个局部变量的定义处 默认情况下，生成的tags文件必须在vim运行的当前目录才能在vim里面正确跳转 可以在Vim尾行模式或Vim配置文件 .~/.vimrc 中通过以下命令显式地指定tag文件路径： :set tags+=tags文件路径 二、ctags参数介绍ctags 默认并不会提取所有标识符的tag标签，以下命令可以生成更加详细的tag文件 ctags -R --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+liaS --extra=+q 使用命令 ctags --list-kinds=c++ 可列出C++支持生成的标签类型的全量列表(即 –c++-kinds 参数的所有值)： c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类classes)d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;宏定义(macro definitions)e&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;枚举变量(enumerators)f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;函数定义(function definitions)g&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;枚举类型(enumeration names)l&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;局部变量(local variables)，默认不提取m&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类、结构体、联合体(class, struct, and union members)n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;命名空间(namespaces)p&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;函数原型(function prototypes)，默认不提取s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结构体类型(structure names)t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(typedefs)u&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;联合体类型(union names)v&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;变量定义(variable definitions)x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;外部变量(external and forward variable declarations)，默认不提取 局部对象、函数声明、外部变量等类型默认不会生成标签，所以在上面的ctags命令中显式加上了这些类型，用于生成所有类型的标签 fields=+iaS 表明ctags要求描述的信息 i 表示如果有继承(inherit)，则生成的tag文件要标识出其父类；a 表示如果元素是类成员则生成的tag文件要标明其访问权限(即public、protected、private)S 表示如果是函数，则生成的tag文件要标识函数的原型(Signature) extra=+q 表示强制要求ctags对同一个语法元素 再 记一行(如果某个语法元素是类的一个成员，ctags默认会给其记录一行)，这样可以保证在Vim中多个同名函数可以通过路径不同来区分 Vim很多插件(如omnicppcomplete、taglist、showfunc)都是依赖于ctags工具生成的tags标签文件来实现除Vim自带补齐功能外更强大的自动补齐、跳转等功能，具体插件的使用方法可参考Vim教程网上的其他教程介绍。 如果你觉得每次手工执行 ctags -R 命令生成tags文件的方式太麻烦，vim8.0以上用户可以使用vim-gutentags插件自动实时生成tags文件。","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim-tag","slug":"Vim-tag","permalink":"https://vim.ink/tags/Vim-tag/"},{"name":"vim标签","slug":"vim标签","permalink":"https://vim.ink/tags/vim标签/"},{"name":"Vim跳转","slug":"Vim跳转","permalink":"https://vim.ink/tags/Vim跳转/"},{"name":"vim-ctags","slug":"vim-ctags","permalink":"https://vim.ink/tags/vim-ctags/"}]},{"title":"Vim文件缓冲区列表介绍-Vim入门教程(12)","slug":"vim-file-buffer","date":"2013-07-28T16:00:00.000Z","updated":"2019-04-27T15:36:41.655Z","comments":true,"path":"vim-file-buffer.html","link":"","permalink":"https://vim.ink/vim-file-buffer.html","excerpt":"","text":"Vim打开文件进行编辑时其实编辑的是文件在内存中的映像(即Vim中的缓冲区) 当使用Vim对缓冲区进行操作时，磁盘文件内容与内存映像不再一致，执行w、x等命令时便是将缓冲区的内容回写到文件 一、Vim缓冲区列表Vim支持同时在多个缓冲区进行操作，每打开一个文件，Vim就会创建一个对应缓冲区。缓冲区不仅包含了文件的内容，也记录了该文件的编辑状态等配置信息，包括激活、隐藏、上次编辑行数等 假设通过vim命令vim *.txt同时打开了当前目录下的两个文件 1.txt和 2.txt Vim启动时只会显示一个窗口，且窗口内的缓冲区对应着第一个文件，虽然另一个文件当前不可见，但其内容已经被载入到一个Vim的缓冲区 如下图所示，:ls 和 :buffers 命令会列出所有被载入到内存中的缓冲区的列表，%符号指明哪个缓冲区在当前窗口中可见 二、使用Vim缓冲区列表顾名思义，Vim缓冲区列表是个列表结构 在Vim尾行模式下可通过 :bnext 和 :bprev 命令正向或反向遍历列表，命令Ctrl + ^可以在当前文件和轮换文件间快速切换 而 :bfirst 和 :blast 则分别用于跳转到Vim缓冲区列表的开头和结尾 此外，:ls命令获得的Vim缓冲区列表开头的数字是在缓冲区创建时由Vim自动分配的编号(且无法手动更改)，使用:buffer n命令直接凭编号n跳转到该缓冲区 三、删除Vim缓冲区列表可以用 :bdelete 命令删除Vim缓冲区 命令格式为:bdelete n1 n2 n3 或 :n,m bdelete，前者用于删除特定缓冲区，后者用于删除一个编号区间段的缓冲区 注意，删除一个缓冲区并不会影响缓冲区所关联的磁盘文件，只是把该文件在内存中的映像删掉","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim命令","slug":"vim命令","permalink":"https://vim.ink/tags/vim命令/"},{"name":"Vim文件缓冲区","slug":"Vim文件缓冲区","permalink":"https://vim.ink/tags/Vim文件缓冲区/"},{"name":"vim-bnext","slug":"vim-bnext","permalink":"https://vim.ink/tags/vim-bnext/"},{"name":"vim-bprev","slug":"vim-bprev","permalink":"https://vim.ink/tags/vim-bprev/"}]},{"title":"Vim自带自动补齐功能-Vim入门教程(11)","slug":"vim-auto-complement","date":"2013-07-10T16:00:00.000Z","updated":"2019-04-27T15:34:36.457Z","comments":true,"path":"vim-auto-complement.html","link":"","permalink":"https://vim.ink/vim-auto-complement.html","excerpt":"","text":"在插入模式下，Vim可以不借助任何插件实现自动补全功能。介绍Vim自带的单词自动补全、行自动补全和基于用户自定义字典的自动补全。 一、单词补全Ctrl + n：当输入完第一个字母后，再按Ctrl + n，Vim会自动出现下拉菜单，且默认选中第一个单词 继续按 Ctrl + n 可以上下选择，但如果缓冲区没有可选单词，那么下拉列表不会有任何选项 Ctrl + p：功能同上，只是默认选中的是列表最后一个单词 二、行补全在Vim插入模式下输入已经存在行的第一个单词，再按Ctrl + x、Ctrl + l命令，就会列出该整行出来实现Vim行自动补全 三、字典补全假设有一个备选单词表，文件名为dict.txt，每行一个单词，里面包含以下内容： 123456https://vim.inkHelloVimeditorbesttool 若要实现基于该单词表的Vim自动补齐，需要设置以下步骤： (1) 在~/.vimrc配置文件中加入代码：set dictionary-=~/dict.txt dictionary+=~/dict.txt (2) 打开Vim，在插入模式下输入Ctrl + x后再输入Ctrl + k，就能看到dict.txt文件中定义的单词 (3) 若想直接通过Ctrl + n命令就显示其中的列表，再配置.vimrc文件，加入set complete-=k complete+=k 更多信息可以在Normal模式下查看帮助文档:help dictionary，要使用更加高价的自动补齐功能，推荐使用Vim youcomplateme插件。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim自动补齐","slug":"Vim自动补齐","permalink":"https://vim.ink/tags/Vim自动补齐/"},{"name":"vim自动补全","slug":"vim自动补全","permalink":"https://vim.ink/tags/vim自动补全/"},{"name":"vim自定义字典补齐","slug":"vim自定义字典补齐","permalink":"https://vim.ink/tags/vim自定义字典补齐/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"}]},{"title":"Vim替换命令substitute小结-Vim入门教程(10)","slug":"vim-substitute","date":"2013-06-30T16:00:00.000Z","updated":"2019-04-27T15:36:41.711Z","comments":true,"path":"vim-substitute.html","link":"","permalink":"https://vim.ink/vim-substitute.html","excerpt":"","text":"Vim可以在尾行模式下使用:substitute命令将指定的字符替换成其他目标字符，通常使用该命令的缩写格式:s进行操作 一、Vim替换命令语法Vim替换命令的基本语法是 :[range]s/源字符串/目标字符串/[option]，其中range和option字段都可以缺省不填。 各个字段的意思是： range&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示搜索范围，默认表示当前行&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;range字段值1,10表示从第1到第10行，%表示整个文件(相当于1,$)，而.,$代表从当前行到文件末尾 s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;substitute的简写，表示替换 option&nbsp;&nbsp;&nbsp;&nbsp;表示操作类型，默认只对第一个匹配的字符进行替换&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;option字段值g(global)表示全局替换，c(comfirm)表示操作时需要确认，i(ignorecase)表示不区分大小写&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这些选项可以组合使用 二、Vim替换命令举例2.1 全局替换并进行确认执行命令:1,$s/Vim/vim/gc会出现提示”replace with foo(y/n/a/q/l/^E/^Y)?”，询问是否确认执行 待选择操作的含义包括： y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;确认执行这个替换n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;取消这个替换a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;执行所有替换且不再询问q&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;退出而不做任何改动l&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;替换完当前匹配点后退出(last)Ctrl + E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;向上翻滚一行Ctrl + Y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;向下翻滚一行 2.2 将光标所在行出现的所有包含line的字符串中line替换为lines:s/line/lines/g表示将光标所在当前行的line全局替换为lines 2.3 将从2行到3行中出现的所有包含line的字符串中的line替换为lines:2,3s/line/lines/g表示将2~3行的line全局替换为lines 2.4 全文的行首加入//字符，批量注释时非常有用:%s/^/\\/\\//表示在全文范围行首替换插入//，/需要转义 2.5 将所有行尾多余的空格删除:%s= *$==表示全局替换行尾的一个或多个空格，更多正则表达式的说明可以参考Vim正则表达式搜索","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"Vim替换","slug":"Vim替换","permalink":"https://vim.ink/tags/Vim替换/"},{"name":"vim全局替换","slug":"vim全局替换","permalink":"https://vim.ink/tags/vim全局替换/"}]},{"title":"Vim搜索命令使用方法和技巧-Vim入门教程(9)","slug":"vim-search","date":"2013-06-26T16:00:00.000Z","updated":"2019-04-27T15:36:41.703Z","comments":true,"path":"vim-search.html","link":"","permalink":"https://vim.ink/vim-search.html","excerpt":"","text":"介绍Vim搜索命令/ 、 ? 、* 和 #，以及Vim正向搜索和反向搜索，Vim正则表达式搜索特定字符和特定行。 一、Vim基本搜索命令在Vim命令模式下，输入 / 或 ? 符号就进入了搜索模式，/ 用于正向往下搜索，? 用于反向往上搜索。 在搜索模式下可以对Vim打开的整个文本内容进行搜索，当按下 n 时可以继续正向查找下一个相匹配的目前单词。N 的作用与 n 相反，是往上反向搜索目标单词。 在Vim命令模式下，如果要搜索当前光标下的单词，除了可以使用/ 和 ?外，还可以使用特殊命令* 和 #。 假设光标当前所有单词为the，那么在当前光标位置执行命令 * 相当于搜索命令 /\\&lt;the\\&gt;，命令 # 等同于命令 ?\\&lt;the\\&gt;。\\&lt; 是一个单词定界符，表示只匹配单词的开头，\\&gt; 也是单词定界符，表示只匹配单词末尾。关于单词定界符的更多内容，可以阅读Vim搜索字符转义与very magic搜索模式。 大家可仔细观看下图的Vim动画教程示意 注意：搜索一些特殊的字符，例如：*、[、]、^、%、/、?、~、$等，需要在它们的前面加上转义符号\\。 二、Vim高亮搜索为了在Vim中高亮显示被搜索的字符，可以使用命令 set hlsearch，可以在Vim命令行模式执行命令或者在配置文件 .vimrc 中进行永久设置。 如果需要清除最近一次的屏幕搜索高亮结果，可以在Vim命令行模式使用命令 :nohlsearch 或其缩写形式 :noh。更多介绍，可参考文章Vim清除上次的搜索高亮结果-Vim使用技巧(1)。 三、搜索大小写敏感默认Vim搜索命令是大小写敏感的，因此，搜索 the 不会查找到 The。使用命令 :set ignorecase 会使得Vim搜索变得不区分大小写。 不管 ignorecase 选项的值是什么，都可以在搜索命令中使用 \\c 来强制使得当前搜索模式不区分大小写，而命令 \\C 则会强制当前搜索模式大小写敏感。 因此，/the\\c 既会查找 the，也会查找到 The。 如果打开了 ignorecase 选项，那么你也应该设置 :set smartcase。 当 ignorecase 和 smartcase 选项均打开时，只要你的搜索模式中包含大写字母，那Vim会认为你当前的搜索是区分大小写的，如果搜索模式中不包含任何大写字母，Vim则会认为搜索应该不区分大小写。这是个比较”智能的”推测你搜索意图的机制。 例如，在打开上述两个选项的条件下，/The 只会查找到 The，而 /the 既会查找 the，也会查找到 The等。 注意：smartcase 选项只对你手工输入的搜索模式有效，对于 *、# 或 gd 等是不起作用的。 四、Vim搜索进阶 如果想搜索当前光标所在位置的单词，可以先输入 / 进入搜索模式，然后依次输入命令 &lt;Ctrl-r&gt;&lt;Ctrl-w&gt; 来复制光标下的单词并将其插入命令行中。 如果想插入光标下的字串，可以使用命令 &lt;Ctrl-r&gt;&lt;Ctrl-a&gt;。关于Vim单词和字串的概念，可以参考文章Vim单词、字串概念。 完成搜索后，使用 Ctrl-o 会跳转到开始进行搜索的位置，然后使用命令 Ctrl-i 将会往前跳转。 进行过Vim搜索后，当 /、?、:s、:g 命令使用空的搜索模式时会沿用最近一次的搜索模式。所以，在搜索完某个单词后，使用Vim替换命令 :%s//new/g 会将之前搜索的单词全部替换为 new。具体可参考Vim替换命令substitute重用上次的查找模式 在搜索命令前还可以增加一个整数，用于表示搜索目标出现的位置。例如，3/pattern 将会搜索模式 pattern 第三次出现的位置，而 3* 会搜索当前光标所在位置单词第三次出现的位置。 搜索还可以包含一个相对于光标的偏移量，关于搜索偏移量的更多内容，可以参考文章Vim搜索偏移介绍。 五、Vim正则表达式搜索为了更好的进行搜索，Vim支持正则表达式，最基本的正则表达式规则包括： ^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示一行的开头$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示一行的结尾.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;表示任意一个字符*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;匹配0次或n次 5.1 查找在行首的特定字符上图中用^来匹配行首 5.2 查找在行尾的特定字符上图中用$来匹配行尾 5.3 匹配特定行(行首匹配)上图中使用了/^test.*$，其中^表示匹配行首、.*表示匹配任意字符、$表示匹配行尾，合起来表示搜索任意以test开头的行。 关于Vim正则表达式搜索的更多内容，推荐阅读Vim搜索字符转义与very magic搜索模式。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"Vim搜索","slug":"Vim搜索","permalink":"https://vim.ink/tags/Vim搜索/"},{"name":"vim查找","slug":"vim查找","permalink":"https://vim.ink/tags/vim查找/"},{"name":"vim正则表达式","slug":"vim正则表达式","permalink":"https://vim.ink/tags/vim正则表达式/"},{"name":"Vim教程","slug":"Vim教程","permalink":"https://vim.ink/tags/Vim教程/"}]},{"title":"Vim插件管理器Pathogen和Vundle简介 - Vim入门教程(8)","slug":"vim-plugin-manager","date":"2013-06-07T16:00:00.000Z","updated":"2018-08-22T15:53:49.541Z","comments":true,"path":"vim-plugin-manager.html","link":"","permalink":"https://vim.ink/vim-plugin-manager.html","excerpt":"","text":"Vim支持各种插件，也正是因为插件太多导致各个插件的管理比较麻烦，于是Vim插件管理器诞生了，用于安装、管理、卸装Vim插件。本文主要介绍Vim插件管理器Pathogen和Vundle的安装、配置和使用方法。 一 Vim插件管理器Pathogen1.1 安装Pathogenpathogen只有一个单独的脚本pathogen.vim，其github下载地址为：https://github.com/tpope/vim-pathogen Pathogen下载后直接解压并保存到当前用户的 ~/.vim/autoload目录即可完成安装 1.2 启用Pathogen在Vim配置文件vimrc里面增加以下三条命令即可启用Pathogen插件。123execute pathogen#infect()syntax onfiletype plugin indent on 1.3 使用Pathogen安装、卸装Vim插件在当前用户目录~/.vim/下新建bundle目录，将新安装插件放到该目录下后，Pathogen会自动在bundle目录下生成对应插件子目录并使该插件生效。 而如果需要卸载插件，只需把~/.vim/bundle目录下对应的插件目录删除即可 二 Vim插件管理器Vundle2.1 安装VundleVundle插件也是提供一个Vundle.vim文件，其下载地址为：https://github.com/VundleVim/Vundle.vim.git 将下载的Vundle.vim文件保存到~/.vim/bundle即可完成Vundle的安装 也可以使用以下的命令直接从github拉取Vundle.vim文件到bundle文件夹下 git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim 2.2 配置Vundle修改Vim配置文件vimrc，增加必要的配置，以下是.vimrc配置模板123456789101112131415set nocompatible \"去除VIM一致性，必须\"filetype off \"必须\"\"设置包括vundle和初始化相关的运行时路径\"set rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()\"启用vundle管理插件，必须\"Plugin 'VundleVim/Vundle.vim'\"在此增加其他插件，安装的插件需要放在vundle#begin和vundle#end之间\"\"安装github上的插件格式为 Plugin '用户名/插件仓库名'\"call vundle#end() filetype plugin indent on \"加载vim自带和插件相应的语法和文件类型相关脚本，必须\" 更多Vundle有关配置可以参考github上的Quick Start 2.3 使用Vundle安装插件首先需要将要安装的插件，按照上述配置格式将插件地址填写在vundle#begin和vundle#end之间并保存 设置好配置文件后，可通过下述两种方法安装插件: (1) 在Vim尾行模式下运行命令:PluginInstall (2) 在终端命令行下通过命令vim +PluginInstall +qall直接安装 至此，需要安装的插件已经安装完毕，可以正常使用了 2.4 使用Vundle删除插件 (1) 需要删除Vim插件时，只需编辑Vim配置文件.vimrc文件，删除要移除插件所对应的Plugin一行 (2) 打开Vim，在Vim尾行模式执行命令:BundleClean即可删除对应Vim插件 如果你安装的vim插件非常多，又对vim启动速度等非常苛刻，建议你使用另外一款轻量高效的Vim插件管理神器vim-plug。","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim配置","slug":"vim配置","permalink":"https://vim.ink/tags/vim配置/"},{"name":"Vim插件管理","slug":"Vim插件管理","permalink":"https://vim.ink/tags/Vim插件管理/"},{"name":"Pathogen","slug":"Pathogen","permalink":"https://vim.ink/tags/Pathogen/"},{"name":"Vim-Vundle","slug":"Vim-Vundle","permalink":"https://vim.ink/tags/Vim-Vundle/"}]},{"title":"15个著名的Vim配色方案整理-Vim入门教程(7)","slug":"vim-color-schemes","date":"2013-05-31T16:00:00.000Z","updated":"2019-04-23T15:42:22.636Z","comments":true,"path":"vim-color-schemes.html","link":"","permalink":"https://vim.ink/vim-color-schemes.html","excerpt":"","text":"Vi/Vim手工自行安装配色方案的主要步骤包括： (1) 确认当前用户目录下存在~/.vim/colors目录，没有则新建，安装的Vim配色方案对应.vim文件需放在该目录下 (2) 下载或编辑某个配色方案的.vim文件，保存到~/.vim/colors目录下 (3) 修改Vim配置文件~/.vimrc，增加配置项colorscheme molokai并保存 (假设下载了一个叫molokai的配色方案文件molokai.vim) 注意：配置项中的 molokai 为配色方案文件的文件名，Vim通过该文件名加载对应.vim文件 下面介绍15个著名的Vim配色方案及其下载地址，大家可以根据图片效果按需使用。推荐阅读2017年排名前10的暗黑简约型vim配色方案。 1. acme-colorsacme-colors配色方案支持256种颜色，对应.vim文件下载地址为：https://github.com/plan9-for-vimspace/acme-colors/blob/master/colors/acme.vim 2. base16base16配色方案包含一系列配色，还提供了一些额外的插件供安装，具体使用可参考github上的说明：https://github.com/chriskempson/base16-vim 3. gothamGotham自称是一个非常dark的配色方案，包含 gotham和gotham256以及一些其他插件配置，github地址为：https://github.com/whatyouhide/vim-gotham 4. gruvboxgruvbox配色方案在github上的评价较高，据说对人眼非常pleasant，Vim教程网就是用的这个配色方案，下面是github地址及配色截图https://github.com/morhetz/gruvbox 5. janahjanah也是一个dark型的配色方案，github地址为：https://github.com/mhinz/vim-janah 6. jellybeansjellybeans在github上也较流行，github地址：https://github.com/nanotech/jellybeans.vim 7. luciuslucius配色方案的github地址：https://github.com/jonathanfilip/vim-lucius 8. molokaimolokai配色方案非常出名，知乎上有个问题你认为最好看的 Vim 配色方案是哪款，molokai的呼声非常高https://github.com/tomasr/molokai 9. oceanic-nextoceanic-next是一个neovim配色方案，依赖其他几个插件和配色方案https://github.com/mhartington/oceanic-next 10. paramountparamount是一个比较简单的Vim配色方案，只关注一些关键配置https://github.com/owickstrom/vim-colors-paramount 11. flattenedflattened也是一个很简介但不简单的配色方案，官方说法是没有废话“without the bullshit”https://github.com/romainl/flattened 12. railscastsrailscasts同时支持GUI和终端方式，github地址为：https://github.com/jpo/vim-railscasts-theme 13. seoul256seoul256是一个低对比度(low-contrast)的配色方案，github地址：https://github.com/junegunn/seoul256.vim 14. solarizedsolarized配色方案在github上的star非常多，https://github.com/altercation/vim-colors-solarized 15. yowishyowish配色方案同时支持GUI和256色终端，也是一个 dark 主题https://github.com/kabbamine/yowish.vim 更多关于Vim教程介绍，可参考Vim教程网上的其他博客，推荐阅读2017年排名前10的暗黑简约型vim配色方案。","categories":[{"name":"Vim插件","slug":"Vim插件","permalink":"https://vim.ink/categories/Vim插件/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim配色方案","slug":"Vim配色方案","permalink":"https://vim.ink/tags/Vim配色方案/"},{"name":"vim-color-scheme","slug":"vim-color-scheme","permalink":"https://vim.ink/tags/vim-color-scheme/"},{"name":"vim配置","slug":"vim配置","permalink":"https://vim.ink/tags/vim配置/"}]},{"title":"Vim可视化模式-Vim入门教程(6)","slug":"vim-visual-mode","date":"2013-05-27T16:00:00.000Z","updated":"2019-04-27T15:38:08.737Z","comments":true,"path":"vim-visual-mode.html","link":"","permalink":"https://vim.ink/vim-visual-mode.html","excerpt":"","text":"介绍Vim可视化模式下的字符选择、行选择和块选择模式，Vim可视化模式移动选中文本两端点位置，Vim同时注释多行和同时删除多行 一、Vim可视化模式介绍Vi/Vim可视化模式(Visual Mode)下可以选择一块编辑区域，然后对选中的文件内容执行插入、删除、替换、改变大小写等操作，是Vim使用过程中使用非常频繁的一种模式 在Vim命令模式下，输入 v 或者 V 或者 Ctrl + v 都可进入可视化模式，这三个Vim可视化模式的主要区别在于： 字符选择模式: 选中光标经过的所有字符，普通模式下按 v 进入行选择模式：选中光标经过的所有行，普通模式下按 V 进入块选择模式：选中一整个矩形框表示的所有文本，普通模式下按 &lt;Ctrl&gt; + v 进入 如下图所示，进入Vim可视模式后，鼠标选中的文本区域由两个端点来标识(即左上角和右下角) 默认情况下，在Vim可视化模式下移动鼠标是控制右下角端点的位置，当需要调整左上角端点的位置时，可以使用o键在左上角和右下角之间进行切换 二、Vim可视化模式操作示例2.1 Vim字符选择按键 v 进入Vim字符选择可视化模式，通过Vim鼠标移动命令 H 把鼠标往右移动，选择多个字符。 当然，选择好文本后，可以用 y 进行复制，用 p 命令粘贴等。 2.2 Vim同时注释多行使用Vim可视化模式可以很方便地操作多行文本内容，比如一次性注释多行文本，可以如下操作： (1) Ctrl + v进入块选择模式(2) 向上或向下移动光标选择多行(3) 移动光标到行的起始位置(4) 然后按大写的 I 进入行首插入模式(5) 插入注释符(6) 按Esc回到命令模式 需要注意的是：Vim同时编辑多行时，只有在当前的插入动作结束后(按Esc退为命令模式)，之前选中的其它行才会出现同样插入的文本。 2.3 Vim同时删除多行注释如果想一次性删除多行注释，则可以这样做： (1) Ctrl + v 进入块选择模式(2) 向上或向下移动光标，选择要删除的注释符号(3) 按d键删除 关于Vim可视化模式的更多实例，可以参考Vim可视化模式与面向列编辑文本。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"vim命令","slug":"vim命令","permalink":"https://vim.ink/tags/vim命令/"},{"name":"vim视频教程","slug":"vim视频教程","permalink":"https://vim.ink/tags/vim视频教程/"},{"name":"Vim可视化","slug":"Vim可视化","permalink":"https://vim.ink/tags/Vim可视化/"},{"name":"vim模式","slug":"vim模式","permalink":"https://vim.ink/tags/vim模式/"}]},{"title":"vim重复操作命令. (英文句点)-Vim入门教程(5)","slug":"vim-repeat-command","date":"2013-04-30T16:00:00.000Z","updated":"2019-04-27T15:36:41.695Z","comments":true,"path":"vim-repeat-command.html","link":"","permalink":"https://vim.ink/vim-repeat-command.html","excerpt":"","text":"Vim编辑器.命令可以用于重复执行命令 在Vim尾行模式下，通过 :h.查看vim的帮助手册，可以看到： . Repeat last change, with count replaced with [count]. Also repeat a yank command, when the ‘y’ flag is included in ‘cpoptions’. Does not repeat a command-line command 举例来说，删除一个单词，可以使用命令dw(w是word的缩写，表示一个单词，更多示例可以参考Vim教程网上的Vim文本编辑命令汇总) 接着，我们可以使用命令5.再连续删除5个单词，这就是Vim中.点命令的重复功能。 再考虑以下场景：某个源文件中，有若干行以注释符号//结尾，现在我们要在这些行末添加一些相同的内容 我们可以使用如下方式来实现： (1) 搜索字符串//： /\\/\\/ (/需要使用\\进行转义) 现在，只要按下n键就会跳转到下一个搜索到的目标字符串。 (2) 从第一个匹配实例开始添加文本： 按下A进入行尾追加模式，在行末添加文本 (假设为 comment) 按[Esc]退出编辑模式，这条命令执行完成了。但是接下来还有多个个地方需要执行相同的操作。这时，我们便可以使用.点命令重复执行上一条命令。 (3) 跳转到下一个匹配实例并向行末添加文本 n. 上述介绍的Vim中使用.命令重复执行操作的示例如下图所示，大家可以参考并做练习。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim视频教程","slug":"Vim视频教程","permalink":"https://vim.ink/tags/Vim视频教程/"},{"name":"Vim命令","slug":"Vim命令","permalink":"https://vim.ink/tags/Vim命令/"},{"name":"vim重复操作","slug":"vim重复操作","permalink":"https://vim.ink/tags/vim重复操作/"}]},{"title":"Vim中ctrl s卡死解决方法和设置ctrl s为保存文件功能-Vim入门教程(4)","slug":"vim-ctrl-s","date":"2013-04-20T16:00:00.000Z","updated":"2018-09-22T23:36:53.628Z","comments":true,"path":"vim-ctrl-s.html","link":"","permalink":"https://vim.ink/vim-ctrl-s.html","excerpt":"","text":"使用Ctrl + s来保存文件的习惯在Vim编辑器时却会出现大问题： Vim/vi编辑器中按下Ctrl + s会导致Vim假卡死，按其他任何按键和命令都不再也任何反应 解决办法：按下Ctrl + q解锁Vim卡死 解决原理：Ctrl + s 默认在vim中的效果为锁定屏幕。 可通过vim的键盘映射功能设置 Ctrl + s 为保存文件功能：即在vim配置文件 ~/.vimrc中添加配置项 map &lt;C-S&gt; :w&lt;CR&gt; 或在vim命令行模式下执行命令 :map &lt;C-S&gt; :w&lt;CR&gt;。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim卡死","slug":"Vim卡死","permalink":"https://vim.ink/tags/Vim卡死/"},{"name":"vim-Ctrl-s","slug":"vim-Ctrl-s","permalink":"https://vim.ink/tags/vim-Ctrl-s/"}]},{"title":"Vim光标移动命令汇总-Vim入门教程(3)","slug":"vim-cursor","date":"2013-04-14T16:00:00.000Z","updated":"2019-04-27T15:37:04.430Z","comments":true,"path":"vim-cursor.html","link":"","permalink":"https://vim.ink/vim-cursor.html","excerpt":"","text":"介绍Vim光标移动命令，移动vim光标到行首、行跳转、vim匹配单词和匹配括号跳转，Vim翻页命令。 一、Vim光标移动简介Vi/Vim中进行光标移动的命令是针对不同的操作单位而设计，不同的命令对应不同的操作单位。 在执行Vim光标移动命令时，首先要分清楚是采用哪种操作单位：一个字符、一个句子、一个段落、一行、一屏、一页。 确定操作单位后，需要确定命令重复执行的次数。Vim光标移动命令的操作对象范围计算公式为：操作范围 = 操作次数 x 操作单位 例如：5h命令表示左移5个字符，8w命令右移8个单词 二、Vim移动光标命令2.1 上、下、左、右←h&nbsp;&nbsp;&nbsp;&nbsp;j↓&nbsp;&nbsp;&nbsp;&nbsp;k↑&nbsp;&nbsp;&nbsp;&nbsp;l→ Vim的上下左右移动光标命令是经过精心设计的，我们在使用编辑器时最常用的操作是下移光标。而键盘上的j、k按键使用最方便，所以分别用来作为下移、上移光标。h、l分别位于j、k的两侧，根据其所在方位用来实现光标的左移和右移。 2.2 行级移动0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到当前行行首$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到当前行行尾^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到当前行的第一个非空字符nG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到当前文件的第n行:n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到当前文件的第n行 (同上) tips： (1) Vim的命令中，0 表示行首，$ 表示行尾。可以回顾下Vim文本编辑命令汇总中提到的删除命令，里面就提到了0和$ (2) 移动光标到当前文件的第n行使用的命令:n是在vim尾行模式下执行的，所以输入完:n后需要按回车键执行命令 2.3 文件首尾移动gg 或 :0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到当前文件的第一行GG 或 :$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到当前未经的最后一行 2.4 单词级移动w 或 W&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动到下一单词的开头b 或 B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动到上一单词的开头e 或 E&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动到光标所在单词的末尾 W、B、E命令操作的单词是以空白字符(空格、Tab)分隔的字串比如字符串“str1-str2 str3-str4”，对W、B、E命令来说是两个单词，而对w、b、e命令来说则是四个单词 关于Vim单词和字串，可以参考Vim教程网文章Vim基于单词移动及其Vim单词、字串概念 2.5 匹配单词级移动*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到 [匹配] 光标当前所在单词的下一个单词#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到 [匹配] 光标当前所在单词的上一个单词 2.6 匹配括号移动%&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到括号左半部分( 包括(、{、[ )对应右半匹配部分( )、}、] ) 2.7 段落级移动}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到当前段落的末尾{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移到光标到当前段落的开头 2.8 屏幕级移动H&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到屏幕的第一行M&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到屏幕的中间一行L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;移动光标到屏幕的最后一行 2.9 翻页Ctrl + f&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;向前滚动一页Ctrl + b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;向后滚动一页 Ctrl + u&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;向前滚动半页Ctrl + d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;向后滚动半页 三、与其他命令联动很多命令都可以和Vim教程网总结的vim光标移动命令连动 基本命令模式为：&lt;start_position&gt;&lt;command&gt;&lt;end_position&gt; 例如，Vim命令0y$拆开分别表示：0移动光标到当前行首；y复制；$当前行尾。所以，命令0y$意味着复制光标当前所在行所有内容 例如，Vim命令ye，表示从当前位置拷贝到当前所在单词的最后一个字符","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim命令","slug":"Vim命令","permalink":"https://vim.ink/tags/Vim命令/"},{"name":"vim光标移动","slug":"vim光标移动","permalink":"https://vim.ink/tags/vim光标移动/"}]},{"title":"Vim文本编辑命令汇总-Vim入门教程(2)","slug":"vim-edit-command","date":"2013-03-31T16:00:00.000Z","updated":"2019-04-27T15:37:25.659Z","comments":true,"path":"vim-edit-command.html","link":"","permalink":"https://vim.ink/vim-edit-command.html","excerpt":"","text":"介绍Vim三种操作模式和文本编辑命令。Vim编辑模式插入字符，行尾、行首插入，删除一个字符和删除整行命令，Vim复制和粘贴命令，vim替换输入以及撤销和反撤销命令，Vim保存和另存为文件，显示vim当前编辑文件名。 我们使用编辑器的常用文件操作主要是：插入、删除、复制、粘贴、替换、撤销、保存、另存为。 在介绍Vim中的上述基本文件操作命令前，需要先介绍下vim的操作模式。因为vim的各种文件操作命令需要在不同操作模式下使用。 一、Vim三种操作模式Vim编辑器一共有3种模式，分别为命令模式(默认)、编辑模式、尾行模式。这3种模式的转换关系如下图所示。 1.1 命令模式(command mode)命令模式是Vim的默认操作模式，当使用vim命令打开一个文件时，默认进入的就是命令模式。不管用户处于何种模式，只要按下Esc键就可使进入命令行模式 1.2 编辑模式(input mode)只有在vim编辑模式下，才能将键盘键入的内容输入到当前打开的文件中 在命令模式下输入插入命令i(insert)、附加命令a (append)、打开命令o（open）、修改命令c（change）、取代命令r或替换命令s都可以进入文本编辑模式 1.3 尾行模式(last line mode)尾行模式主要用于保存文件或退出Vim，同时也可以设置编辑环境和一些编译工作，如列出行号(set nu)、寻找字符串(/target)等 在命令模式下，用户按冒号键(:)即可进入末行模式下，此时Vi会在显示窗口的最后一行显示一个”:“作为末行模式的提示符，等待用户输入命令 二、Vim文本编辑命令约定：在没有特殊说明的情况下，以下Vim编辑命令部分提到的命令均是在命令模式下使用。 2.1 插入在命令模式下按以下按键可进入编辑模式，执行插入操作，具体包括： 从光标当前所在位置的【前】一个字符处开始插入：i 从光标当前所在位置的【后】一个字符处开始插入：a 从光标当前所在行的【行首】处开始插入：I 从光标当前所在行的【行尾】处开始插入：A 从光标当前所在行的【下一行】处开始插入：o 从光标当前所在行的【上一行】处开始插入：O tips：i (insert)是在当前位置插入，a (append)表示是在后面追加 2.2 删除在命令模式下按以下按键可执行删除操作，具体包括： 删除光标位置的【一个】字符：x 删除当前光标所在【行】：dd 删除从光标所在位置到当前【行首】的内容：d0 删除从光标所在位置到当前【行尾】的内容：d$ 删除从光标所在位置到当前【单词结束】部分的内容并进入插入模式：cw、cW 删除从光标所在位置到当前【单词开始】部分的内容并进入插入模式：cb、cB 删除从光标所在位置到当前【单词结束】部分的内容但不进入插入模式：dw、dW 删除从光标所在位置到当前【单词开始】部分的内容但不进入插入模式：db、dB tips: (1) Vim的命令中，0 表示行首，$ 表示行尾，更多内容可参考Vim教程网上的Vim操作范围、文件范围介绍(2) w(word)、b(back)命令用于光标移动，具体可参考vim教程网上的博客：vim光标移动命令汇总(3) cW、cB、dW、dB 命令操作的单词是以空白字符（空格、Tab）分隔的字符串 删除当前【句子】从光标位置开始到【句末】的内容：d) 删除当前【句子】从光标位置开始到【句首】的内容：d( 删除当前【段落】从光标位置开始到【段末】的内容：d} 删除当前【段落】从光标位置开始到【段首】的内容：d{ tips：Vim命令中用 ( 和 ) 表示句子，{ 和 } 表示段落 2.3 复制、粘贴在命令模式下按以下按键可执行复制、粘贴操作，具体包括： 复制从光标所在位置到当前【单词结束】部分的内容：yw 复制光标所在【行】的所有字符 (包含换行符)：yy 将最后一次删除或复制操作的文本内容粘贴到光标所在字符之【后】：p 将最后一个删除或复制操作的文本内容粘贴到光标当前字符之【前】：P tips：yyp 操作可以实现复制一整行内容到当前所在行的下一行 2.4 替换在命令模式下按以下按键后，再输入字符可替换原始文件中的内容 替换光标当前所在字符一次：r 一直替换光标所在字符，直到按下[ESC]键为止：R 删除、复制操作的操作单位可以加操作次数，操作对象的范围为：操作次数 * 操作单位 例如：d3w命令表示删除三个单词，10dd命令表示从光标所在行开始删除后面的十行，更多内容可以参考Vim中的操作符和动作命令。 2.5 撤销、反撤销在命令模式下可执行撤销操作 撤销最近的一次操作：u 恢复最近的一次操作(取消撤销)：&lt;Ctrl&gt; + r tips：多次执行u 命令可以连续撤销最近的操作 2.6 保存在尾行模式下执行以下命令可保存当前编辑的文件内容 保存当前编辑的文件：:w 保存当前编辑的文件并退出vim：:wq 强制将当前编辑的文件保存：:w! tips：上述操作是在尾行模式下执行的，所以命令都是以:开头 2.7 另存为在尾行模式下执行命令 :w a.txt 可将vim当前打开的文件另存为新文件a.txt. tips：w(write) 表示将文件存档，: 表示尾行模式命令。 2.8 显示当前文件名命令 &lt;Ctrl&gt; + g 可显示当前编辑文件名及行数，可以在不退出 Vim 的情况下了解当前编辑文件的信息，更多内容，可参考30个Vim常用命令和使用技巧。 Vim入门级文件编辑命令汇总就先介绍到这里了，更多Vim文件编辑命令和Vim相关操作可阅读vim教程网上的其他博客。","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim编辑","slug":"Vim编辑","permalink":"https://vim.ink/tags/Vim编辑/"},{"name":"vim命令","slug":"vim命令","permalink":"https://vim.ink/tags/vim命令/"}]},{"title":"Vim入门级基础配置-Vim入门教程(1)","slug":"vimrc-config","date":"2013-03-22T16:00:00.000Z","updated":"2019-04-27T15:37:39.390Z","comments":true,"path":"vimrc-config.html","link":"","permalink":"https://vim.ink/vimrc-config.html","excerpt":"","text":"介绍Vim配置文件.vimrc，配置Vim显示行号、支持utf8中文不乱码、突出显示Vim当前行，设置高亮显示括号匹配和tab缩进，解决Vim粘贴时多出缩进和空格问题。 一、Vim配置文件.vimrcVim编辑器相关的所有功能开关都可以通过.vimrc文件进行设置。 .vimrc配置文件分系统配置和用户配置两种。 系统vimrc配置文件存放在Vim的安装目录，默认路径为/usr/share/vim/.vimrc。可以使用命令echo $VIM来确定Vim的安装目录。 用户vimrc文件，存放在用户主目录下~/.vimrc。可以使用命令echo $HOME确定用户主目录。 注意：用户配置文件优先于系统配置文件，Vim启动时会优先读取当前用户根目录下的.vimrc文件。所以与个人用户相关的个性化配置一般都放在~/.vimrc中。 二、Vim基本配置默认情况下，Vim编辑器里既不显示行号，也没有语法高亮度、智能缩进。为了方便使用，基本的Vim配置选项一般都会包括： 2.1 支持中文不乱码1234'设置编码'set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936set termencoding=utf-8set encoding=utf-8 与Vim编码有关的变量包括：encoding、fileencoding、termencoding。encoding选项用于缓存的文本、寄存器、Vim 脚本文件等；fileencoding选项是Vim写入文件时采用的编码类型；termencoding选项表示输出到终端时采用的编码类型。 2.2 显示行号123'显示行号'set nuset number nu是number的缩写，所以上面两个配置命令是完全等效的。 2.3 突出显示当前行12set cursorlineset cul 'cursorline的缩写形式' 2.4 突出显示当前列12set cursorcolumnset cuc 'cursorcolumn的缩写形式' 2.5 启用鼠标123set mouse=aset selection=exclusiveset selectmode=mouse,key Vim编辑器里默认是不启用鼠标的，也就是说不管你鼠标点击哪个位置，光标都不会移动。通过以上设置就可以启动鼠标，不过对于高级玩家来说，用Vim就是为了解放双方不用鼠标，所以这个设置可以根据个人爱好选择。 2.6 显示括号匹配1set showmatch 2.7 设置缩进123456'设置Tab长度为4空格'set tabstop=4'设置自动缩进长度为4空格'set shiftwidth=4'继承前一行的缩进方式，适用于多行注释'set autoindent 关于Vim缩进的更多内容，可参考vim教程网上的文章Vim自动缩进和tab键替换空格 2.8 设置粘贴模式1set paste 在Vim中通过鼠标右键粘贴时会在行首多出许多缩进和空格，通过set paste可以在插入模式下粘贴内容时不会有任何格式变形、胡乱缩进等问题。 2.9 显示空格和tab键1set listchars=tab:&gt;-,trail:- Vim编辑器中默认不显示文件中的tab和空格符，通过上面的配置可以获得以下的显示效果，方便定位输入错误。 2.10 显示状态栏和光标当前位置1234'总是显示状态栏'set laststatus=2'显示光标当前位置'set ruler 2.11 打开文件类型检测1filetype plugin indent on 推荐阅读Vim文件类型检测原理及应用。 三、Vim配置变更立即生效要让.vimrc变更内容生效，一般的做法是先保存 .vimrc 再重启vim，增加如下设置，可以实现保存 .vimrc 时自动重启加载12'让vimrc配置变更立即生效'autocmd BufWritePost $MYVIMRC source $MYVIMRC Vim入门级基本配置就先介绍到这里了，更多Vim个性配置可参考vim教程网上的其他博客。 附上我的一张Vim配置示意图","categories":[{"name":"Vim入门教程","slug":"Vim入门教程","permalink":"https://vim.ink/categories/Vim入门教程/"}],"tags":[{"name":"Vim教程网","slug":"Vim教程网","permalink":"https://vim.ink/tags/Vim教程网/"},{"name":"Vim配置","slug":"Vim配置","permalink":"https://vim.ink/tags/Vim配置/"},{"name":"vimrc","slug":"vimrc","permalink":"https://vim.ink/tags/vimrc/"}]}]}